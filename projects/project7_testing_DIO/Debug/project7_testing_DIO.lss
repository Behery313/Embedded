
project7_testing_DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000840  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000003fc  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ba 03 	call	0x774	; 0x774 <main>
  64:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
/**************************************************************************/
/***************setting direction of PIN***********************************/
/**************************************************************************/
u8 DIO_u8SetPinDirection(u8 Copy_u8Port ,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	28 97       	sbiw	r28, 0x08	; 8
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	8a 83       	std	Y+2, r24	; 0x02
  82:	6b 83       	std	Y+3, r22	; 0x03
  84:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially set to zero
  86:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin<=DIO_u8PIN_7)
  88:	8b 81       	ldd	r24, Y+3	; 0x03
  8a:	88 30       	cpi	r24, 0x08	; 8
  8c:	08 f0       	brcs	.+2      	; 0x90 <DIO_u8SetPinDirection+0x24>
  8e:	f4 c0       	rjmp	.+488    	; 0x278 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8INPUT)//if direction is input clear bits
  90:	8c 81       	ldd	r24, Y+4	; 0x04
  92:	88 23       	and	r24, r24
  94:	09 f0       	breq	.+2      	; 0x98 <DIO_u8SetPinDirection+0x2c>
  96:	77 c0       	rjmp	.+238    	; 0x186 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
  98:	8a 81       	ldd	r24, Y+2	; 0x02
  9a:	28 2f       	mov	r18, r24
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	38 87       	std	Y+8, r19	; 0x08
  a0:	2f 83       	std	Y+7, r18	; 0x07
  a2:	8f 81       	ldd	r24, Y+7	; 0x07
  a4:	98 85       	ldd	r25, Y+8	; 0x08
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	91 05       	cpc	r25, r1
  aa:	59 f1       	breq	.+86     	; 0x102 <DIO_u8SetPinDirection+0x96>
  ac:	2f 81       	ldd	r18, Y+7	; 0x07
  ae:	38 85       	ldd	r19, Y+8	; 0x08
  b0:	22 30       	cpi	r18, 0x02	; 2
  b2:	31 05       	cpc	r19, r1
  b4:	2c f4       	brge	.+10     	; 0xc0 <DIO_u8SetPinDirection+0x54>
  b6:	8f 81       	ldd	r24, Y+7	; 0x07
  b8:	98 85       	ldd	r25, Y+8	; 0x08
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	69 f0       	breq	.+26     	; 0xd8 <DIO_u8SetPinDirection+0x6c>
  be:	60 c0       	rjmp	.+192    	; 0x180 <DIO_u8SetPinDirection+0x114>
  c0:	2f 81       	ldd	r18, Y+7	; 0x07
  c2:	38 85       	ldd	r19, Y+8	; 0x08
  c4:	22 30       	cpi	r18, 0x02	; 2
  c6:	31 05       	cpc	r19, r1
  c8:	89 f1       	breq	.+98     	; 0x12c <DIO_u8SetPinDirection+0xc0>
  ca:	8f 81       	ldd	r24, Y+7	; 0x07
  cc:	98 85       	ldd	r25, Y+8	; 0x08
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	91 05       	cpc	r25, r1
  d2:	09 f4       	brne	.+2      	; 0xd6 <DIO_u8SetPinDirection+0x6a>
  d4:	40 c0       	rjmp	.+128    	; 0x156 <DIO_u8SetPinDirection+0xea>
  d6:	54 c0       	rjmp	.+168    	; 0x180 <DIO_u8SetPinDirection+0x114>
			{
				case DIO_u8PORTA:
				CLR_BIT(DDRA_reg,Copy_u8Pin);
  d8:	aa e3       	ldi	r26, 0x3A	; 58
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	ea e3       	ldi	r30, 0x3A	; 58
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	48 2f       	mov	r20, r24
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 2e       	mov	r0, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_u8SetPinDirection+0x8a>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_u8SetPinDirection+0x86>
  fa:	80 95       	com	r24
  fc:	84 23       	and	r24, r20
  fe:	8c 93       	st	X, r24
 100:	bd c0       	rjmp	.+378    	; 0x27c <DIO_u8SetPinDirection+0x210>
				break;
					
				case DIO_u8PORTB:
				CLR_BIT(DDRB_reg,Copy_u8Pin);
 102:	a7 e3       	ldi	r26, 0x37	; 55
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e7 e3       	ldi	r30, 0x37	; 55
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	48 2f       	mov	r20, r24
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	28 2f       	mov	r18, r24
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 2e       	mov	r0, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_u8SetPinDirection+0xb4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_u8SetPinDirection+0xb0>
 124:	80 95       	com	r24
 126:	84 23       	and	r24, r20
 128:	8c 93       	st	X, r24
 12a:	a8 c0       	rjmp	.+336    	; 0x27c <DIO_u8SetPinDirection+0x210>
				break;
					
				case DIO_u8PORTC:
				CLR_BIT(DDRC_reg,Copy_u8Pin);
 12c:	a4 e3       	ldi	r26, 0x34	; 52
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e4 e3       	ldi	r30, 0x34	; 52
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	48 2f       	mov	r20, r24
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	28 2f       	mov	r18, r24
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 2e       	mov	r0, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_u8SetPinDirection+0xde>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_u8SetPinDirection+0xda>
 14e:	80 95       	com	r24
 150:	84 23       	and	r24, r20
 152:	8c 93       	st	X, r24
 154:	93 c0       	rjmp	.+294    	; 0x27c <DIO_u8SetPinDirection+0x210>
				break;
					
				case DIO_u8PORTD:
				CLR_BIT(DDRD_reg,Copy_u8Pin);
 156:	a1 e3       	ldi	r26, 0x31	; 49
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	e1 e3       	ldi	r30, 0x31	; 49
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	48 2f       	mov	r20, r24
 162:	8b 81       	ldd	r24, Y+3	; 0x03
 164:	28 2f       	mov	r18, r24
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 2e       	mov	r0, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_u8SetPinDirection+0x108>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_u8SetPinDirection+0x104>
 178:	80 95       	com	r24
 17a:	84 23       	and	r24, r20
 17c:	8c 93       	st	X, r24
 17e:	7e c0       	rjmp	.+252    	; 0x27c <DIO_u8SetPinDirection+0x210>
				break;
					
				default:
				Local_u8ErrorState=1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	89 83       	std	Y+1, r24	; 0x01
 184:	7b c0       	rjmp	.+246    	; 0x27c <DIO_u8SetPinDirection+0x210>
				break;
			}
		}
		else if(Copy_u8Direction==DIO_u8OUTPUT)//if direction is output set bits to one
 186:	8c 81       	ldd	r24, Y+4	; 0x04
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	09 f0       	breq	.+2      	; 0x18e <DIO_u8SetPinDirection+0x122>
 18c:	72 c0       	rjmp	.+228    	; 0x272 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	3e 83       	std	Y+6, r19	; 0x06
 196:	2d 83       	std	Y+5, r18	; 0x05
 198:	8d 81       	ldd	r24, Y+5	; 0x05
 19a:	9e 81       	ldd	r25, Y+6	; 0x06
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	91 05       	cpc	r25, r1
 1a0:	49 f1       	breq	.+82     	; 0x1f4 <DIO_u8SetPinDirection+0x188>
 1a2:	2d 81       	ldd	r18, Y+5	; 0x05
 1a4:	3e 81       	ldd	r19, Y+6	; 0x06
 1a6:	22 30       	cpi	r18, 0x02	; 2
 1a8:	31 05       	cpc	r19, r1
 1aa:	2c f4       	brge	.+10     	; 0x1b6 <DIO_u8SetPinDirection+0x14a>
 1ac:	8d 81       	ldd	r24, Y+5	; 0x05
 1ae:	9e 81       	ldd	r25, Y+6	; 0x06
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	61 f0       	breq	.+24     	; 0x1cc <DIO_u8SetPinDirection+0x160>
 1b4:	5b c0       	rjmp	.+182    	; 0x26c <DIO_u8SetPinDirection+0x200>
 1b6:	2d 81       	ldd	r18, Y+5	; 0x05
 1b8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ba:	22 30       	cpi	r18, 0x02	; 2
 1bc:	31 05       	cpc	r19, r1
 1be:	71 f1       	breq	.+92     	; 0x21c <DIO_u8SetPinDirection+0x1b0>
 1c0:	8d 81       	ldd	r24, Y+5	; 0x05
 1c2:	9e 81       	ldd	r25, Y+6	; 0x06
 1c4:	83 30       	cpi	r24, 0x03	; 3
 1c6:	91 05       	cpc	r25, r1
 1c8:	e9 f1       	breq	.+122    	; 0x244 <DIO_u8SetPinDirection+0x1d8>
 1ca:	50 c0       	rjmp	.+160    	; 0x26c <DIO_u8SetPinDirection+0x200>
			{
				case DIO_u8PORTA:
				SET_BIT(DDRA_reg,Copy_u8Pin);
 1cc:	aa e3       	ldi	r26, 0x3A	; 58
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	ea e3       	ldi	r30, 0x3A	; 58
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	48 2f       	mov	r20, r24
 1d8:	8b 81       	ldd	r24, Y+3	; 0x03
 1da:	28 2f       	mov	r18, r24
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 2e       	mov	r0, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_u8SetPinDirection+0x17e>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_u8SetPinDirection+0x17a>
 1ee:	84 2b       	or	r24, r20
 1f0:	8c 93       	st	X, r24
 1f2:	44 c0       	rjmp	.+136    	; 0x27c <DIO_u8SetPinDirection+0x210>
				break;
				
				case DIO_u8PORTB:
				SET_BIT(DDRB_reg,Copy_u8Pin);
 1f4:	a7 e3       	ldi	r26, 0x37	; 55
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e7 e3       	ldi	r30, 0x37	; 55
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	8b 81       	ldd	r24, Y+3	; 0x03
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 2e       	mov	r0, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_u8SetPinDirection+0x1a6>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_u8SetPinDirection+0x1a2>
 216:	84 2b       	or	r24, r20
 218:	8c 93       	st	X, r24
 21a:	30 c0       	rjmp	.+96     	; 0x27c <DIO_u8SetPinDirection+0x210>
				break;
				
				case DIO_u8PORTC:
				SET_BIT(DDRC_reg,Copy_u8Pin);
 21c:	a4 e3       	ldi	r26, 0x34	; 52
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e4 e3       	ldi	r30, 0x34	; 52
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	48 2f       	mov	r20, r24
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 2e       	mov	r0, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_u8SetPinDirection+0x1ce>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	0a 94       	dec	r0
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_u8SetPinDirection+0x1ca>
 23e:	84 2b       	or	r24, r20
 240:	8c 93       	st	X, r24
 242:	1c c0       	rjmp	.+56     	; 0x27c <DIO_u8SetPinDirection+0x210>
				break;
				
				case DIO_u8PORTD:
				SET_BIT(DDRD_reg,Copy_u8Pin);
 244:	a1 e3       	ldi	r26, 0x31	; 49
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	e1 e3       	ldi	r30, 0x31	; 49
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	48 2f       	mov	r20, r24
 250:	8b 81       	ldd	r24, Y+3	; 0x03
 252:	28 2f       	mov	r18, r24
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 2e       	mov	r0, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_u8SetPinDirection+0x1f6>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_u8SetPinDirection+0x1f2>
 266:	84 2b       	or	r24, r20
 268:	8c 93       	st	X, r24
 26a:	08 c0       	rjmp	.+16     	; 0x27c <DIO_u8SetPinDirection+0x210>
				break;
				
				default:
				Local_u8ErrorState=1;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	05 c0       	rjmp	.+10     	; 0x27c <DIO_u8SetPinDirection+0x210>
				
			}
		}
		else//direction is neither input nor output return 0
		{
			Local_u8ErrorState=1;//error state set to 1
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;//error state set to 1
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 27c:	89 81       	ldd	r24, Y+1	; 0x01
}
 27e:	28 96       	adiw	r28, 0x08	; 8
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	cf 91       	pop	r28
 28c:	df 91       	pop	r29
 28e:	08 95       	ret

00000290 <DIO_u8SetPortDirection>:
/***************************************************************************/
/***************setting direction of PORT***********************************/
/***************************************************************************/

u8 DIO_u8SetPortDirection(u8 Copy_u8Port ,u8 Copy_u8Direction)
{
 290:	df 93       	push	r29
 292:	cf 93       	push	r28
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	27 97       	sbiw	r28, 0x07	; 7
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	8a 83       	std	Y+2, r24	; 0x02
 2a6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;//error state initially zero
 2a8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Direction==DIO_u8INPUT)
 2aa:	8b 81       	ldd	r24, Y+3	; 0x03
 2ac:	88 23       	and	r24, r24
 2ae:	91 f5       	brne	.+100    	; 0x314 <DIO_u8SetPortDirection+0x84>
	{
		switch (Copy_u8Port)
 2b0:	8a 81       	ldd	r24, Y+2	; 0x02
 2b2:	28 2f       	mov	r18, r24
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	3f 83       	std	Y+7, r19	; 0x07
 2b8:	2e 83       	std	Y+6, r18	; 0x06
 2ba:	8e 81       	ldd	r24, Y+6	; 0x06
 2bc:	9f 81       	ldd	r25, Y+7	; 0x07
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	91 05       	cpc	r25, r1
 2c2:	c9 f0       	breq	.+50     	; 0x2f6 <DIO_u8SetPortDirection+0x66>
 2c4:	2e 81       	ldd	r18, Y+6	; 0x06
 2c6:	3f 81       	ldd	r19, Y+7	; 0x07
 2c8:	22 30       	cpi	r18, 0x02	; 2
 2ca:	31 05       	cpc	r19, r1
 2cc:	2c f4       	brge	.+10     	; 0x2d8 <DIO_u8SetPortDirection+0x48>
 2ce:	8e 81       	ldd	r24, Y+6	; 0x06
 2d0:	9f 81       	ldd	r25, Y+7	; 0x07
 2d2:	00 97       	sbiw	r24, 0x00	; 0
 2d4:	61 f0       	breq	.+24     	; 0x2ee <DIO_u8SetPortDirection+0x5e>
 2d6:	1b c0       	rjmp	.+54     	; 0x30e <DIO_u8SetPortDirection+0x7e>
 2d8:	2e 81       	ldd	r18, Y+6	; 0x06
 2da:	3f 81       	ldd	r19, Y+7	; 0x07
 2dc:	22 30       	cpi	r18, 0x02	; 2
 2de:	31 05       	cpc	r19, r1
 2e0:	71 f0       	breq	.+28     	; 0x2fe <DIO_u8SetPortDirection+0x6e>
 2e2:	8e 81       	ldd	r24, Y+6	; 0x06
 2e4:	9f 81       	ldd	r25, Y+7	; 0x07
 2e6:	83 30       	cpi	r24, 0x03	; 3
 2e8:	91 05       	cpc	r25, r1
 2ea:	69 f0       	breq	.+26     	; 0x306 <DIO_u8SetPortDirection+0x76>
 2ec:	10 c0       	rjmp	.+32     	; 0x30e <DIO_u8SetPortDirection+0x7e>
		{	
			case DIO_u8PORTA:
			DDRA_reg=0;
 2ee:	ea e3       	ldi	r30, 0x3A	; 58
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	10 82       	st	Z, r1
 2f4:	4a c0       	rjmp	.+148    	; 0x38a <DIO_u8SetPortDirection+0xfa>
			break;
			
			case DIO_u8PORTB:
			DDRB_reg=0;
 2f6:	e7 e3       	ldi	r30, 0x37	; 55
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	10 82       	st	Z, r1
 2fc:	46 c0       	rjmp	.+140    	; 0x38a <DIO_u8SetPortDirection+0xfa>
			break;
			
			case DIO_u8PORTC:
			DDRC_reg=0;
 2fe:	e4 e3       	ldi	r30, 0x34	; 52
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	10 82       	st	Z, r1
 304:	42 c0       	rjmp	.+132    	; 0x38a <DIO_u8SetPortDirection+0xfa>
			break;
			
			case DIO_u8PORTD:
			DDRD_reg=0;
 306:	e1 e3       	ldi	r30, 0x31	; 49
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	10 82       	st	Z, r1
 30c:	3e c0       	rjmp	.+124    	; 0x38a <DIO_u8SetPortDirection+0xfa>
			break;
			
			default:
			Local_u8ErrorState=1;
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	89 83       	std	Y+1, r24	; 0x01
 312:	3b c0       	rjmp	.+118    	; 0x38a <DIO_u8SetPortDirection+0xfa>
			break;
		}
	}	
	else if(Copy_u8Direction==DIO_u8OUTPUT)
 314:	8b 81       	ldd	r24, Y+3	; 0x03
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	b1 f5       	brne	.+108    	; 0x386 <DIO_u8SetPortDirection+0xf6>
	{
		switch (Copy_u8Port)
 31a:	8a 81       	ldd	r24, Y+2	; 0x02
 31c:	28 2f       	mov	r18, r24
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	3d 83       	std	Y+5, r19	; 0x05
 322:	2c 83       	std	Y+4, r18	; 0x04
 324:	8c 81       	ldd	r24, Y+4	; 0x04
 326:	9d 81       	ldd	r25, Y+5	; 0x05
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	91 05       	cpc	r25, r1
 32c:	d1 f0       	breq	.+52     	; 0x362 <DIO_u8SetPortDirection+0xd2>
 32e:	2c 81       	ldd	r18, Y+4	; 0x04
 330:	3d 81       	ldd	r19, Y+5	; 0x05
 332:	22 30       	cpi	r18, 0x02	; 2
 334:	31 05       	cpc	r19, r1
 336:	2c f4       	brge	.+10     	; 0x342 <DIO_u8SetPortDirection+0xb2>
 338:	8c 81       	ldd	r24, Y+4	; 0x04
 33a:	9d 81       	ldd	r25, Y+5	; 0x05
 33c:	00 97       	sbiw	r24, 0x00	; 0
 33e:	61 f0       	breq	.+24     	; 0x358 <DIO_u8SetPortDirection+0xc8>
 340:	1f c0       	rjmp	.+62     	; 0x380 <DIO_u8SetPortDirection+0xf0>
 342:	2c 81       	ldd	r18, Y+4	; 0x04
 344:	3d 81       	ldd	r19, Y+5	; 0x05
 346:	22 30       	cpi	r18, 0x02	; 2
 348:	31 05       	cpc	r19, r1
 34a:	81 f0       	breq	.+32     	; 0x36c <DIO_u8SetPortDirection+0xdc>
 34c:	8c 81       	ldd	r24, Y+4	; 0x04
 34e:	9d 81       	ldd	r25, Y+5	; 0x05
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	91 05       	cpc	r25, r1
 354:	81 f0       	breq	.+32     	; 0x376 <DIO_u8SetPortDirection+0xe6>
 356:	14 c0       	rjmp	.+40     	; 0x380 <DIO_u8SetPortDirection+0xf0>
		{	
			case DIO_u8PORTA:
			DDRA_reg=0xff;
 358:	ea e3       	ldi	r30, 0x3A	; 58
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	80 83       	st	Z, r24
 360:	14 c0       	rjmp	.+40     	; 0x38a <DIO_u8SetPortDirection+0xfa>
			break;
			
			case DIO_u8PORTB:
			DDRB_reg=0xff;
 362:	e7 e3       	ldi	r30, 0x37	; 55
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	8f ef       	ldi	r24, 0xFF	; 255
 368:	80 83       	st	Z, r24
 36a:	0f c0       	rjmp	.+30     	; 0x38a <DIO_u8SetPortDirection+0xfa>
			break;
			
			case DIO_u8PORTC:
			DDRC_reg=0xff;
 36c:	e4 e3       	ldi	r30, 0x34	; 52
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	80 83       	st	Z, r24
 374:	0a c0       	rjmp	.+20     	; 0x38a <DIO_u8SetPortDirection+0xfa>
			break;
			
			case DIO_u8PORTD:
			DDRD_reg=0xff;
 376:	e1 e3       	ldi	r30, 0x31	; 49
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	8f ef       	ldi	r24, 0xFF	; 255
 37c:	80 83       	st	Z, r24
 37e:	05 c0       	rjmp	.+10     	; 0x38a <DIO_u8SetPortDirection+0xfa>
			break;
			
			default:
			Local_u8ErrorState=1;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	89 83       	std	Y+1, r24	; 0x01
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_u8SetPortDirection+0xfa>
			break;
		}
	}
	else 		//incorrect direction
	{
		Local_u8ErrorState=1;	 //error incorrect input
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	89 83       	std	Y+1, r24	; 0x01
	}	
	return Local_u8ErrorState;
 38a:	89 81       	ldd	r24, Y+1	; 0x01
}
 38c:	27 96       	adiw	r28, 0x07	; 7
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	f8 94       	cli
 392:	de bf       	out	0x3e, r29	; 62
 394:	0f be       	out	0x3f, r0	; 63
 396:	cd bf       	out	0x3d, r28	; 61
 398:	cf 91       	pop	r28
 39a:	df 91       	pop	r29
 39c:	08 95       	ret

0000039e <DIO_u8SetPinValue>:
/******************************************************************************/
/***********************Setting pin value**************************************/
/******************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin,u8 Copy_u8Value)
{
 39e:	df 93       	push	r29
 3a0:	cf 93       	push	r28
 3a2:	cd b7       	in	r28, 0x3d	; 61
 3a4:	de b7       	in	r29, 0x3e	; 62
 3a6:	28 97       	sbiw	r28, 0x08	; 8
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	f8 94       	cli
 3ac:	de bf       	out	0x3e, r29	; 62
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	cd bf       	out	0x3d, r28	; 61
 3b2:	8a 83       	std	Y+2, r24	; 0x02
 3b4:	6b 83       	std	Y+3, r22	; 0x03
 3b6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially zero
 3b8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN_7)
 3ba:	8b 81       	ldd	r24, Y+3	; 0x03
 3bc:	88 30       	cpi	r24, 0x08	; 8
 3be:	08 f0       	brcs	.+2      	; 0x3c2 <DIO_u8SetPinValue+0x24>
 3c0:	ed c0       	rjmp	.+474    	; 0x59c <DIO_u8SetPinValue+0x1fe>
	{
		if (Copy_u8Value)//if value is 1 SET the required PIN
 3c2:	8c 81       	ldd	r24, Y+4	; 0x04
 3c4:	88 23       	and	r24, r24
 3c6:	09 f4       	brne	.+2      	; 0x3ca <DIO_u8SetPinValue+0x2c>
 3c8:	72 c0       	rjmp	.+228    	; 0x4ae <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
 3ca:	8a 81       	ldd	r24, Y+2	; 0x02
 3cc:	28 2f       	mov	r18, r24
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	38 87       	std	Y+8, r19	; 0x08
 3d2:	2f 83       	std	Y+7, r18	; 0x07
 3d4:	8f 81       	ldd	r24, Y+7	; 0x07
 3d6:	98 85       	ldd	r25, Y+8	; 0x08
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	91 05       	cpc	r25, r1
 3dc:	49 f1       	breq	.+82     	; 0x430 <DIO_u8SetPinValue+0x92>
 3de:	2f 81       	ldd	r18, Y+7	; 0x07
 3e0:	38 85       	ldd	r19, Y+8	; 0x08
 3e2:	22 30       	cpi	r18, 0x02	; 2
 3e4:	31 05       	cpc	r19, r1
 3e6:	2c f4       	brge	.+10     	; 0x3f2 <DIO_u8SetPinValue+0x54>
 3e8:	8f 81       	ldd	r24, Y+7	; 0x07
 3ea:	98 85       	ldd	r25, Y+8	; 0x08
 3ec:	00 97       	sbiw	r24, 0x00	; 0
 3ee:	61 f0       	breq	.+24     	; 0x408 <DIO_u8SetPinValue+0x6a>
 3f0:	5b c0       	rjmp	.+182    	; 0x4a8 <DIO_u8SetPinValue+0x10a>
 3f2:	2f 81       	ldd	r18, Y+7	; 0x07
 3f4:	38 85       	ldd	r19, Y+8	; 0x08
 3f6:	22 30       	cpi	r18, 0x02	; 2
 3f8:	31 05       	cpc	r19, r1
 3fa:	71 f1       	breq	.+92     	; 0x458 <DIO_u8SetPinValue+0xba>
 3fc:	8f 81       	ldd	r24, Y+7	; 0x07
 3fe:	98 85       	ldd	r25, Y+8	; 0x08
 400:	83 30       	cpi	r24, 0x03	; 3
 402:	91 05       	cpc	r25, r1
 404:	e9 f1       	breq	.+122    	; 0x480 <DIO_u8SetPinValue+0xe2>
 406:	50 c0       	rjmp	.+160    	; 0x4a8 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA:
				SET_BIT(PORTA_reg,Copy_u8Pin);
 408:	ab e3       	ldi	r26, 0x3B	; 59
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	eb e3       	ldi	r30, 0x3B	; 59
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	48 2f       	mov	r20, r24
 414:	8b 81       	ldd	r24, Y+3	; 0x03
 416:	28 2f       	mov	r18, r24
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 2e       	mov	r0, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_u8SetPinValue+0x88>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_u8SetPinValue+0x84>
 42a:	84 2b       	or	r24, r20
 42c:	8c 93       	st	X, r24
 42e:	b8 c0       	rjmp	.+368    	; 0x5a0 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTB:
				SET_BIT(PORTB_reg,Copy_u8Pin);
 430:	a8 e3       	ldi	r26, 0x38	; 56
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	e8 e3       	ldi	r30, 0x38	; 56
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	48 2f       	mov	r20, r24
 43c:	8b 81       	ldd	r24, Y+3	; 0x03
 43e:	28 2f       	mov	r18, r24
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 2e       	mov	r0, r18
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_u8SetPinValue+0xb0>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	0a 94       	dec	r0
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_u8SetPinValue+0xac>
 452:	84 2b       	or	r24, r20
 454:	8c 93       	st	X, r24
 456:	a4 c0       	rjmp	.+328    	; 0x5a0 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTC:
				SET_BIT(PORTC_reg,Copy_u8Pin);
 458:	a5 e3       	ldi	r26, 0x35	; 53
 45a:	b0 e0       	ldi	r27, 0x00	; 0
 45c:	e5 e3       	ldi	r30, 0x35	; 53
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	48 2f       	mov	r20, r24
 464:	8b 81       	ldd	r24, Y+3	; 0x03
 466:	28 2f       	mov	r18, r24
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	02 2e       	mov	r0, r18
 470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_u8SetPinValue+0xd8>
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	0a 94       	dec	r0
 478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_u8SetPinValue+0xd4>
 47a:	84 2b       	or	r24, r20
 47c:	8c 93       	st	X, r24
 47e:	90 c0       	rjmp	.+288    	; 0x5a0 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTD:
				SET_BIT(PORTD_reg,Copy_u8Pin);
 480:	a2 e3       	ldi	r26, 0x32	; 50
 482:	b0 e0       	ldi	r27, 0x00	; 0
 484:	e2 e3       	ldi	r30, 0x32	; 50
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	48 2f       	mov	r20, r24
 48c:	8b 81       	ldd	r24, Y+3	; 0x03
 48e:	28 2f       	mov	r18, r24
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 2e       	mov	r0, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_u8SetPinValue+0x100>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_u8SetPinValue+0xfc>
 4a2:	84 2b       	or	r24, r20
 4a4:	8c 93       	st	X, r24
 4a6:	7c c0       	rjmp	.+248    	; 0x5a0 <DIO_u8SetPinValue+0x202>
				break;
			
				default:
				Local_u8ErrorState=1;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	89 83       	std	Y+1, r24	; 0x01
 4ac:	79 c0       	rjmp	.+242    	; 0x5a0 <DIO_u8SetPinValue+0x202>
				break;
			}
		}
		else//value is 0 so we clear the bits
		{
			switch(Copy_u8Port)
 4ae:	8a 81       	ldd	r24, Y+2	; 0x02
 4b0:	28 2f       	mov	r18, r24
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	3e 83       	std	Y+6, r19	; 0x06
 4b6:	2d 83       	std	Y+5, r18	; 0x05
 4b8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ba:	9e 81       	ldd	r25, Y+6	; 0x06
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	91 05       	cpc	r25, r1
 4c0:	59 f1       	breq	.+86     	; 0x518 <DIO_u8SetPinValue+0x17a>
 4c2:	2d 81       	ldd	r18, Y+5	; 0x05
 4c4:	3e 81       	ldd	r19, Y+6	; 0x06
 4c6:	22 30       	cpi	r18, 0x02	; 2
 4c8:	31 05       	cpc	r19, r1
 4ca:	2c f4       	brge	.+10     	; 0x4d6 <DIO_u8SetPinValue+0x138>
 4cc:	8d 81       	ldd	r24, Y+5	; 0x05
 4ce:	9e 81       	ldd	r25, Y+6	; 0x06
 4d0:	00 97       	sbiw	r24, 0x00	; 0
 4d2:	69 f0       	breq	.+26     	; 0x4ee <DIO_u8SetPinValue+0x150>
 4d4:	60 c0       	rjmp	.+192    	; 0x596 <DIO_u8SetPinValue+0x1f8>
 4d6:	2d 81       	ldd	r18, Y+5	; 0x05
 4d8:	3e 81       	ldd	r19, Y+6	; 0x06
 4da:	22 30       	cpi	r18, 0x02	; 2
 4dc:	31 05       	cpc	r19, r1
 4de:	89 f1       	breq	.+98     	; 0x542 <DIO_u8SetPinValue+0x1a4>
 4e0:	8d 81       	ldd	r24, Y+5	; 0x05
 4e2:	9e 81       	ldd	r25, Y+6	; 0x06
 4e4:	83 30       	cpi	r24, 0x03	; 3
 4e6:	91 05       	cpc	r25, r1
 4e8:	09 f4       	brne	.+2      	; 0x4ec <DIO_u8SetPinValue+0x14e>
 4ea:	40 c0       	rjmp	.+128    	; 0x56c <DIO_u8SetPinValue+0x1ce>
 4ec:	54 c0       	rjmp	.+168    	; 0x596 <DIO_u8SetPinValue+0x1f8>
			{
				case DIO_u8PORTA:
				CLR_BIT(PORTA_reg,Copy_u8Pin);
 4ee:	ab e3       	ldi	r26, 0x3B	; 59
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	eb e3       	ldi	r30, 0x3B	; 59
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	48 2f       	mov	r20, r24
 4fa:	8b 81       	ldd	r24, Y+3	; 0x03
 4fc:	28 2f       	mov	r18, r24
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 2e       	mov	r0, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_u8SetPinValue+0x16e>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_u8SetPinValue+0x16a>
 510:	80 95       	com	r24
 512:	84 23       	and	r24, r20
 514:	8c 93       	st	X, r24
 516:	44 c0       	rjmp	.+136    	; 0x5a0 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTB:
				CLR_BIT(PORTB_reg,Copy_u8Pin);
 518:	a8 e3       	ldi	r26, 0x38	; 56
 51a:	b0 e0       	ldi	r27, 0x00	; 0
 51c:	e8 e3       	ldi	r30, 0x38	; 56
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	48 2f       	mov	r20, r24
 524:	8b 81       	ldd	r24, Y+3	; 0x03
 526:	28 2f       	mov	r18, r24
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 2e       	mov	r0, r18
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_u8SetPinValue+0x198>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	0a 94       	dec	r0
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_u8SetPinValue+0x194>
 53a:	80 95       	com	r24
 53c:	84 23       	and	r24, r20
 53e:	8c 93       	st	X, r24
 540:	2f c0       	rjmp	.+94     	; 0x5a0 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTC:
				CLR_BIT(PORTC_reg,Copy_u8Pin);
 542:	a5 e3       	ldi	r26, 0x35	; 53
 544:	b0 e0       	ldi	r27, 0x00	; 0
 546:	e5 e3       	ldi	r30, 0x35	; 53
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	48 2f       	mov	r20, r24
 54e:	8b 81       	ldd	r24, Y+3	; 0x03
 550:	28 2f       	mov	r18, r24
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	02 2e       	mov	r0, r18
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_u8SetPinValue+0x1c2>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	0a 94       	dec	r0
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_u8SetPinValue+0x1be>
 564:	80 95       	com	r24
 566:	84 23       	and	r24, r20
 568:	8c 93       	st	X, r24
 56a:	1a c0       	rjmp	.+52     	; 0x5a0 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTD:
				CLR_BIT(PORTD_reg,Copy_u8Pin);
 56c:	a2 e3       	ldi	r26, 0x32	; 50
 56e:	b0 e0       	ldi	r27, 0x00	; 0
 570:	e2 e3       	ldi	r30, 0x32	; 50
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	48 2f       	mov	r20, r24
 578:	8b 81       	ldd	r24, Y+3	; 0x03
 57a:	28 2f       	mov	r18, r24
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 2e       	mov	r0, r18
 584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_u8SetPinValue+0x1ec>
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	0a 94       	dec	r0
 58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_u8SetPinValue+0x1e8>
 58e:	80 95       	com	r24
 590:	84 23       	and	r24, r20
 592:	8c 93       	st	X, r24
 594:	05 c0       	rjmp	.+10     	; 0x5a0 <DIO_u8SetPinValue+0x202>
				break;
				
				default:
				Local_u8ErrorState=1;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	89 83       	std	Y+1, r24	; 0x01
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_u8SetPinValue+0x202>
			}
		}
	}
	else //incorrect input
	{
		Local_u8ErrorState=1;
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	89 83       	std	Y+1, r24	; 0x01
	}	
	return Local_u8ErrorState;
 5a0:	89 81       	ldd	r24, Y+1	; 0x01
}
 5a2:	28 96       	adiw	r28, 0x08	; 8
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	de bf       	out	0x3e, r29	; 62
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	cd bf       	out	0x3d, r28	; 61
 5ae:	cf 91       	pop	r28
 5b0:	df 91       	pop	r29
 5b2:	08 95       	ret

000005b4 <DIO_u8SetPortValue>:
/******************************************************************************/
/***********************Setting port value*************************************/
/******************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port ,u8 Copy_u8Value)
{
 5b4:	df 93       	push	r29
 5b6:	cf 93       	push	r28
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <DIO_u8SetPortValue+0x6>
 5ba:	00 d0       	rcall	.+0      	; 0x5bc <DIO_u8SetPortValue+0x8>
 5bc:	0f 92       	push	r0
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	8a 83       	std	Y+2, r24	; 0x02
 5c4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;//error state initially zero
 5c6:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
 5c8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ca:	28 2f       	mov	r18, r24
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	3d 83       	std	Y+5, r19	; 0x05
 5d0:	2c 83       	std	Y+4, r18	; 0x04
 5d2:	8c 81       	ldd	r24, Y+4	; 0x04
 5d4:	9d 81       	ldd	r25, Y+5	; 0x05
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	91 05       	cpc	r25, r1
 5da:	d1 f0       	breq	.+52     	; 0x610 <DIO_u8SetPortValue+0x5c>
 5dc:	2c 81       	ldd	r18, Y+4	; 0x04
 5de:	3d 81       	ldd	r19, Y+5	; 0x05
 5e0:	22 30       	cpi	r18, 0x02	; 2
 5e2:	31 05       	cpc	r19, r1
 5e4:	2c f4       	brge	.+10     	; 0x5f0 <DIO_u8SetPortValue+0x3c>
 5e6:	8c 81       	ldd	r24, Y+4	; 0x04
 5e8:	9d 81       	ldd	r25, Y+5	; 0x05
 5ea:	00 97       	sbiw	r24, 0x00	; 0
 5ec:	61 f0       	breq	.+24     	; 0x606 <DIO_u8SetPortValue+0x52>
 5ee:	1f c0       	rjmp	.+62     	; 0x62e <DIO_u8SetPortValue+0x7a>
 5f0:	2c 81       	ldd	r18, Y+4	; 0x04
 5f2:	3d 81       	ldd	r19, Y+5	; 0x05
 5f4:	22 30       	cpi	r18, 0x02	; 2
 5f6:	31 05       	cpc	r19, r1
 5f8:	81 f0       	breq	.+32     	; 0x61a <DIO_u8SetPortValue+0x66>
 5fa:	8c 81       	ldd	r24, Y+4	; 0x04
 5fc:	9d 81       	ldd	r25, Y+5	; 0x05
 5fe:	83 30       	cpi	r24, 0x03	; 3
 600:	91 05       	cpc	r25, r1
 602:	81 f0       	breq	.+32     	; 0x624 <DIO_u8SetPortValue+0x70>
 604:	14 c0       	rjmp	.+40     	; 0x62e <DIO_u8SetPortValue+0x7a>
		{
			case DIO_u8PORTA:
			PORTA_reg=Copy_u8Value;
 606:	eb e3       	ldi	r30, 0x3B	; 59
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	8b 81       	ldd	r24, Y+3	; 0x03
 60c:	80 83       	st	Z, r24
 60e:	11 c0       	rjmp	.+34     	; 0x632 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTB:
			PORTB_reg=Copy_u8Value;
 610:	e8 e3       	ldi	r30, 0x38	; 56
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	8b 81       	ldd	r24, Y+3	; 0x03
 616:	80 83       	st	Z, r24
 618:	0c c0       	rjmp	.+24     	; 0x632 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTC:
			PORTC_reg=Copy_u8Value;
 61a:	e5 e3       	ldi	r30, 0x35	; 53
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	8b 81       	ldd	r24, Y+3	; 0x03
 620:	80 83       	st	Z, r24
 622:	07 c0       	rjmp	.+14     	; 0x632 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTD:
			PORTD_reg=Copy_u8Value;
 624:	e2 e3       	ldi	r30, 0x32	; 50
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	8b 81       	ldd	r24, Y+3	; 0x03
 62a:	80 83       	st	Z, r24
 62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_u8SetPortValue+0x7e>
			break;
			
			default:
			Local_u8ErrorState=1;
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_u8ErrorState;//incorrect input
 632:	89 81       	ldd	r24, Y+1	; 0x01
}
 634:	0f 90       	pop	r0
 636:	0f 90       	pop	r0
 638:	0f 90       	pop	r0
 63a:	0f 90       	pop	r0
 63c:	0f 90       	pop	r0
 63e:	cf 91       	pop	r28
 640:	df 91       	pop	r29
 642:	08 95       	ret

00000644 <DIO_u8GetPinValue>:
/******************************************************************************/
/***********************Getting PIN value**************************************/
/******************************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 644:	df 93       	push	r29
 646:	cf 93       	push	r28
 648:	cd b7       	in	r28, 0x3d	; 61
 64a:	de b7       	in	r29, 0x3e	; 62
 64c:	27 97       	sbiw	r28, 0x07	; 7
 64e:	0f b6       	in	r0, 0x3f	; 63
 650:	f8 94       	cli
 652:	de bf       	out	0x3e, r29	; 62
 654:	0f be       	out	0x3f, r0	; 63
 656:	cd bf       	out	0x3d, r28	; 61
 658:	8a 83       	std	Y+2, r24	; 0x02
 65a:	6b 83       	std	Y+3, r22	; 0x03
 65c:	5d 83       	std	Y+5, r21	; 0x05
 65e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially zero
 660:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL)&&Copy_u8Pin<=DIO_u8PIN_7)//check if ptr not null and correct input pin
 662:	8c 81       	ldd	r24, Y+4	; 0x04
 664:	9d 81       	ldd	r25, Y+5	; 0x05
 666:	00 97       	sbiw	r24, 0x00	; 0
 668:	09 f4       	brne	.+2      	; 0x66c <DIO_u8GetPinValue+0x28>
 66a:	78 c0       	rjmp	.+240    	; 0x75c <DIO_u8GetPinValue+0x118>
 66c:	8b 81       	ldd	r24, Y+3	; 0x03
 66e:	88 30       	cpi	r24, 0x08	; 8
 670:	08 f0       	brcs	.+2      	; 0x674 <DIO_u8GetPinValue+0x30>
 672:	74 c0       	rjmp	.+232    	; 0x75c <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
 674:	8a 81       	ldd	r24, Y+2	; 0x02
 676:	28 2f       	mov	r18, r24
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	3f 83       	std	Y+7, r19	; 0x07
 67c:	2e 83       	std	Y+6, r18	; 0x06
 67e:	4e 81       	ldd	r20, Y+6	; 0x06
 680:	5f 81       	ldd	r21, Y+7	; 0x07
 682:	41 30       	cpi	r20, 0x01	; 1
 684:	51 05       	cpc	r21, r1
 686:	59 f1       	breq	.+86     	; 0x6de <DIO_u8GetPinValue+0x9a>
 688:	8e 81       	ldd	r24, Y+6	; 0x06
 68a:	9f 81       	ldd	r25, Y+7	; 0x07
 68c:	82 30       	cpi	r24, 0x02	; 2
 68e:	91 05       	cpc	r25, r1
 690:	34 f4       	brge	.+12     	; 0x69e <DIO_u8GetPinValue+0x5a>
 692:	2e 81       	ldd	r18, Y+6	; 0x06
 694:	3f 81       	ldd	r19, Y+7	; 0x07
 696:	21 15       	cp	r18, r1
 698:	31 05       	cpc	r19, r1
 69a:	69 f0       	breq	.+26     	; 0x6b6 <DIO_u8GetPinValue+0x72>
 69c:	5c c0       	rjmp	.+184    	; 0x756 <DIO_u8GetPinValue+0x112>
 69e:	4e 81       	ldd	r20, Y+6	; 0x06
 6a0:	5f 81       	ldd	r21, Y+7	; 0x07
 6a2:	42 30       	cpi	r20, 0x02	; 2
 6a4:	51 05       	cpc	r21, r1
 6a6:	79 f1       	breq	.+94     	; 0x706 <DIO_u8GetPinValue+0xc2>
 6a8:	8e 81       	ldd	r24, Y+6	; 0x06
 6aa:	9f 81       	ldd	r25, Y+7	; 0x07
 6ac:	83 30       	cpi	r24, 0x03	; 3
 6ae:	91 05       	cpc	r25, r1
 6b0:	09 f4       	brne	.+2      	; 0x6b4 <DIO_u8GetPinValue+0x70>
 6b2:	3d c0       	rjmp	.+122    	; 0x72e <DIO_u8GetPinValue+0xea>
 6b4:	50 c0       	rjmp	.+160    	; 0x756 <DIO_u8GetPinValue+0x112>
		{
			case DIO_u8PORTA:
			*Copy_pu8Value=GET_BIT(PINA_reg,Copy_u8Pin);
 6b6:	e9 e3       	ldi	r30, 0x39	; 57
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	80 81       	ld	r24, Z
 6bc:	28 2f       	mov	r18, r24
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	8b 81       	ldd	r24, Y+3	; 0x03
 6c2:	88 2f       	mov	r24, r24
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	a9 01       	movw	r20, r18
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <DIO_u8GetPinValue+0x8a>
 6ca:	55 95       	asr	r21
 6cc:	47 95       	ror	r20
 6ce:	8a 95       	dec	r24
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <DIO_u8GetPinValue+0x86>
 6d2:	ca 01       	movw	r24, r20
 6d4:	81 70       	andi	r24, 0x01	; 1
 6d6:	ec 81       	ldd	r30, Y+4	; 0x04
 6d8:	fd 81       	ldd	r31, Y+5	; 0x05
 6da:	80 83       	st	Z, r24
 6dc:	41 c0       	rjmp	.+130    	; 0x760 <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTB:
			*Copy_pu8Value=GET_BIT(PINB_reg,Copy_u8Pin);
 6de:	e6 e3       	ldi	r30, 0x36	; 54
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	28 2f       	mov	r18, r24
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ea:	88 2f       	mov	r24, r24
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	a9 01       	movw	r20, r18
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_u8GetPinValue+0xb2>
 6f2:	55 95       	asr	r21
 6f4:	47 95       	ror	r20
 6f6:	8a 95       	dec	r24
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <DIO_u8GetPinValue+0xae>
 6fa:	ca 01       	movw	r24, r20
 6fc:	81 70       	andi	r24, 0x01	; 1
 6fe:	ec 81       	ldd	r30, Y+4	; 0x04
 700:	fd 81       	ldd	r31, Y+5	; 0x05
 702:	80 83       	st	Z, r24
 704:	2d c0       	rjmp	.+90     	; 0x760 <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTC:
			*Copy_pu8Value=GET_BIT(PINC_reg,Copy_u8Pin);
 706:	e3 e3       	ldi	r30, 0x33	; 51
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 81       	ld	r24, Z
 70c:	28 2f       	mov	r18, r24
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	8b 81       	ldd	r24, Y+3	; 0x03
 712:	88 2f       	mov	r24, r24
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	a9 01       	movw	r20, r18
 718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_u8GetPinValue+0xda>
 71a:	55 95       	asr	r21
 71c:	47 95       	ror	r20
 71e:	8a 95       	dec	r24
 720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_u8GetPinValue+0xd6>
 722:	ca 01       	movw	r24, r20
 724:	81 70       	andi	r24, 0x01	; 1
 726:	ec 81       	ldd	r30, Y+4	; 0x04
 728:	fd 81       	ldd	r31, Y+5	; 0x05
 72a:	80 83       	st	Z, r24
 72c:	19 c0       	rjmp	.+50     	; 0x760 <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTD:
			*Copy_pu8Value=GET_BIT(PIND_reg,Copy_u8Pin);
 72e:	e0 e3       	ldi	r30, 0x30	; 48
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	28 2f       	mov	r18, r24
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	8b 81       	ldd	r24, Y+3	; 0x03
 73a:	88 2f       	mov	r24, r24
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	a9 01       	movw	r20, r18
 740:	02 c0       	rjmp	.+4      	; 0x746 <DIO_u8GetPinValue+0x102>
 742:	55 95       	asr	r21
 744:	47 95       	ror	r20
 746:	8a 95       	dec	r24
 748:	e2 f7       	brpl	.-8      	; 0x742 <DIO_u8GetPinValue+0xfe>
 74a:	ca 01       	movw	r24, r20
 74c:	81 70       	andi	r24, 0x01	; 1
 74e:	ec 81       	ldd	r30, Y+4	; 0x04
 750:	fd 81       	ldd	r31, Y+5	; 0x05
 752:	80 83       	st	Z, r24
 754:	05 c0       	rjmp	.+10     	; 0x760 <DIO_u8GetPinValue+0x11c>
			break;
			
			default:
			Local_u8ErrorState=1;
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	89 83       	std	Y+1, r24	; 0x01
 75a:	02 c0       	rjmp	.+4      	; 0x760 <DIO_u8GetPinValue+0x11c>
			break;
		}
	}
	else
	{
		Local_u8ErrorState=1;
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 760:	89 81       	ldd	r24, Y+1	; 0x01
 762:	27 96       	adiw	r28, 0x07	; 7
 764:	0f b6       	in	r0, 0x3f	; 63
 766:	f8 94       	cli
 768:	de bf       	out	0x3e, r29	; 62
 76a:	0f be       	out	0x3f, r0	; 63
 76c:	cd bf       	out	0x3d, r28	; 61
 76e:	cf 91       	pop	r28
 770:	df 91       	pop	r29
 772:	08 95       	ret

00000774 <main>:
 *      Author: Yusuf
 */
#include"STD_TYPES.h"
#include"DIO_interface.h"
void main()
{
 774:	df 93       	push	r29
 776:	cf 93       	push	r28
 778:	0f 92       	push	r0
 77a:	cd b7       	in	r28, 0x3d	; 61
 77c:	de b7       	in	r29, 0x3e	; 62
	u8 test;
	DIO_u8SetPortDirection(DIO_u8PORTA,DIO_u8OUTPUT);
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	61 e0       	ldi	r22, 0x01	; 1
 782:	0e 94 48 01 	call	0x290	; 0x290 <DIO_u8SetPortDirection>

	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN_3,DIO_u8OUTPUT);
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	63 e0       	ldi	r22, 0x03	; 3
 78a:	41 e0       	ldi	r20, 0x01	; 1
 78c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN_4,DIO_u8OUTPUT);
 790:	82 e0       	ldi	r24, 0x02	; 2
 792:	64 e0       	ldi	r22, 0x04	; 4
 794:	41 e0       	ldi	r20, 0x01	; 1
 796:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN_7,DIO_u8INPUT);
 79a:	82 e0       	ldi	r24, 0x02	; 2
 79c:	67 e0       	ldi	r22, 0x07	; 7
 79e:	40 e0       	ldi	r20, 0x00	; 0
 7a0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN_7,DIO_u8HIGH);
 7a4:	82 e0       	ldi	r24, 0x02	; 2
 7a6:	67 e0       	ldi	r22, 0x07	; 7
 7a8:	41 e0       	ldi	r20, 0x01	; 1
 7aa:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_u8SetPinValue>
	while(1)
	{
		DIO_u8SetPortValue(DIO_u8PORTA,0b10100000);
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	60 ea       	ldi	r22, 0xA0	; 160
 7b2:	0e 94 da 02 	call	0x5b4	; 0x5b4 <DIO_u8SetPortValue>

		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN_3,DIO_u8HIGH);
 7b6:	82 e0       	ldi	r24, 0x02	; 2
 7b8:	63 e0       	ldi	r22, 0x03	; 3
 7ba:	41 e0       	ldi	r20, 0x01	; 1
 7bc:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_u8SetPinValue>


		DIO_u8GetPinValue(DIO_u8PORTC,DIO_u8PIN_7,&test);
 7c0:	82 e0       	ldi	r24, 0x02	; 2
 7c2:	67 e0       	ldi	r22, 0x07	; 7
 7c4:	9e 01       	movw	r18, r28
 7c6:	2f 5f       	subi	r18, 0xFF	; 255
 7c8:	3f 4f       	sbci	r19, 0xFF	; 255
 7ca:	a9 01       	movw	r20, r18
 7cc:	0e 94 22 03 	call	0x644	; 0x644 <DIO_u8GetPinValue>

		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN_4,test);
 7d0:	99 81       	ldd	r25, Y+1	; 0x01
 7d2:	82 e0       	ldi	r24, 0x02	; 2
 7d4:	64 e0       	ldi	r22, 0x04	; 4
 7d6:	49 2f       	mov	r20, r25
 7d8:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_u8SetPinValue>
 7dc:	e8 cf       	rjmp	.-48     	; 0x7ae <main+0x3a>

000007de <_exit>:
 7de:	f8 94       	cli

000007e0 <__stop_program>:
 7e0:	ff cf       	rjmp	.-2      	; 0x7e0 <__stop_program>
