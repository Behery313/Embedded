
project25_ServoOperation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000f6a  00000ffe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800062  00800062  00001000  2**0
                  ALLOC
  3 .stab         00001704  00000000  00000000  00001000  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d5a  00000000  00000000  00002704  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__vector_10>
  2c:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <main>
  8a:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_VoidInit>:
/*to be used in setting the callback function*/
static void(* ADC_pvSetCallBackNotification)(void)=NULL;

static u8 ADC_u8ISRSource=0;
void ADC_VoidInit()
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	/*reference selection*/
	#if RefSelection==AREF
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);
	#elif RefSelection==AVCC
	SET_BIT(ADMUX,ADMUX_REFS0);
  9a:	a7 e2       	ldi	r26, 0x27	; 39
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e7 e2       	ldi	r30, 0x27	; 39
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
  a8:	a7 e2       	ldi	r26, 0x27	; 39
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	e7 e2       	ldi	r30, 0x27	; 39
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	8f 77       	andi	r24, 0x7F	; 127
  b4:	8c 93       	st	X, r24
	#error "Error in reference selection"
	#endif

	/* adjustment*/
	#if Adjustment==Left
	SET_BIT(ADMUX,ADMUX_ADLAR);
  b6:	a7 e2       	ldi	r26, 0x27	; 39
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	e7 e2       	ldi	r30, 0x27	; 39
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	8c 93       	st	X, r24
	#else
	#error"Error in left adjustment"
	#endif

	/*Prescaler (BIT MASKING)*/
	ADCSRA&=Prescaler_BIT_MASK;
  c4:	a6 e2       	ldi	r26, 0x26	; 38
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	e6 e2       	ldi	r30, 0x26	; 38
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 7f       	andi	r24, 0xF8	; 248
  d0:	8c 93       	st	X, r24
	ADCSRA|=PRESCALER_SEL;
  d2:	a6 e2       	ldi	r26, 0x26	; 38
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e6 e2       	ldi	r30, 0x26	; 38
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	87 60       	ori	r24, 0x07	; 7
  de:	8c 93       	st	X, r24
	#if Autotrigger==ENABLED
		SET_BIT(ADCSRA,ADCSRA_ADATE);
		SFIOR&=Autotrigger_BIT_MASK;
		SFIOR|=AutotriggerSource;
	#elif Autotrigger==DISABLED
		CLR_BIT(ADCSRA,ADCSRA_ADATE);
  e0:	a6 e2       	ldi	r26, 0x26	; 38
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e6 e2       	ldi	r30, 0x26	; 38
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	8f 7d       	andi	r24, 0xDF	; 223
  ec:	8c 93       	st	X, r24
	#else
		#error "Error in Autotrigger option"
	#endif
	/*Enable ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
  ee:	a6 e2       	ldi	r26, 0x26	; 38
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e6 e2       	ldi	r30, 0x26	; 38
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	8c 93       	st	X, r24
}
  fc:	cf 91       	pop	r28
  fe:	df 91       	pop	r29
 100:	08 95       	ret

00000102 <ADC_u8GetChannelReadingSync>:
u8 ADC_u8GetChannelReadingSync(u8 Copy_u8Channel , u16* Copy_pu16ADCReading)
{
 102:	df 93       	push	r29
 104:	cf 93       	push	r28
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	28 97       	sbiw	r28, 0x08	; 8
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	de bf       	out	0x3e, r29	; 62
 112:	0f be       	out	0x3f, r0	; 63
 114:	cd bf       	out	0x3d, r28	; 61
 116:	8e 83       	std	Y+6, r24	; 0x06
 118:	78 87       	std	Y+8, r23	; 0x08
 11a:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState=OK;
 11c:	1d 82       	std	Y+5, r1	; 0x05
	if(Copy_pu16ADCReading!=NULL)
 11e:	8f 81       	ldd	r24, Y+7	; 0x07
 120:	98 85       	ldd	r25, Y+8	; 0x08
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	09 f4       	brne	.+2      	; 0x128 <ADC_u8GetChannelReadingSync+0x26>
 126:	6a c0       	rjmp	.+212    	; 0x1fc <ADC_u8GetChannelReadingSync+0xfa>
	{
		if(Global_u8ADCState==IDLE)
 128:	80 91 62 00 	lds	r24, 0x0062
 12c:	88 23       	and	r24, r24
 12e:	09 f0       	breq	.+2      	; 0x132 <ADC_u8GetChannelReadingSync+0x30>
 130:	62 c0       	rjmp	.+196    	; 0x1f6 <ADC_u8GetChannelReadingSync+0xf4>
		{
			//make ADC state busy
			Global_u8ADCState=BUSY;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 62 00 	sts	0x0062, r24

			u32 Local_u8LoopCounter=0;
 138:	19 82       	std	Y+1, r1	; 0x01
 13a:	1a 82       	std	Y+2, r1	; 0x02
 13c:	1b 82       	std	Y+3, r1	; 0x03
 13e:	1c 82       	std	Y+4, r1	; 0x04

			//setting channel
			ADMUX&=MUX_BIT_MASK;
 140:	a7 e2       	ldi	r26, 0x27	; 39
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	e7 e2       	ldi	r30, 0x27	; 39
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 7e       	andi	r24, 0xE0	; 224
 14c:	8c 93       	st	X, r24
			ADMUX|=Copy_u8Channel;
 14e:	a7 e2       	ldi	r26, 0x27	; 39
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	e7 e2       	ldi	r30, 0x27	; 39
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	90 81       	ld	r25, Z
 158:	8e 81       	ldd	r24, Y+6	; 0x06
 15a:	89 2b       	or	r24, r25
 15c:	8c 93       	st	X, r24


			//Start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
 15e:	a6 e2       	ldi	r26, 0x26	; 38
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	e6 e2       	ldi	r30, 0x26	; 38
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	8c 93       	st	X, r24
 16c:	0b c0       	rjmp	.+22     	; 0x184 <ADC_u8GetChannelReadingSync+0x82>

			//polling(busy waiting) until conversion is done
			while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u8LoopCounter<ADC_TIMEOUT))
			{
				Local_u8LoopCounter++;
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	9a 81       	ldd	r25, Y+2	; 0x02
 172:	ab 81       	ldd	r26, Y+3	; 0x03
 174:	bc 81       	ldd	r27, Y+4	; 0x04
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	a1 1d       	adc	r26, r1
 17a:	b1 1d       	adc	r27, r1
 17c:	89 83       	std	Y+1, r24	; 0x01
 17e:	9a 83       	std	Y+2, r25	; 0x02
 180:	ab 83       	std	Y+3, r26	; 0x03
 182:	bc 83       	std	Y+4, r27	; 0x04

			//Start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);

			//polling(busy waiting) until conversion is done
			while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u8LoopCounter<ADC_TIMEOUT))
 184:	e6 e2       	ldi	r30, 0x26	; 38
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	82 95       	swap	r24
 18c:	8f 70       	andi	r24, 0x0F	; 15
 18e:	88 2f       	mov	r24, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	81 70       	andi	r24, 0x01	; 1
 194:	90 70       	andi	r25, 0x00	; 0
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	61 f4       	brne	.+24     	; 0x1b2 <ADC_u8GetChannelReadingSync+0xb0>
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	9a 81       	ldd	r25, Y+2	; 0x02
 19e:	ab 81       	ldd	r26, Y+3	; 0x03
 1a0:	bc 81       	ldd	r27, Y+4	; 0x04
 1a2:	80 35       	cpi	r24, 0x50	; 80
 1a4:	23 ec       	ldi	r18, 0xC3	; 195
 1a6:	92 07       	cpc	r25, r18
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	a2 07       	cpc	r26, r18
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	b2 07       	cpc	r27, r18
 1b0:	f0 f2       	brcs	.-68     	; 0x16e <ADC_u8GetChannelReadingSync+0x6c>
			{
				Local_u8LoopCounter++;
			}
			if(Local_u8LoopCounter==ADC_TIMEOUT)
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	9a 81       	ldd	r25, Y+2	; 0x02
 1b6:	ab 81       	ldd	r26, Y+3	; 0x03
 1b8:	bc 81       	ldd	r27, Y+4	; 0x04
 1ba:	80 35       	cpi	r24, 0x50	; 80
 1bc:	23 ec       	ldi	r18, 0xC3	; 195
 1be:	92 07       	cpc	r25, r18
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	a2 07       	cpc	r26, r18
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	b2 07       	cpc	r27, r18
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <ADC_u8GetChannelReadingSync+0xce>
			{
				Local_u8ErrorState=TIMEOUT;
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	8d 83       	std	Y+5, r24	; 0x05
 1ce:	18 c0       	rjmp	.+48     	; 0x200 <ADC_u8GetChannelReadingSync+0xfe>

			}
			else
			{
				//make ADC state IDLE
				Global_u8ADCState=IDLE;
 1d0:	10 92 62 00 	sts	0x0062, r1

				//clear the flag manually by setting it to 1
				SET_BIT(ADCSRA,ADCSRA_ADIF);
 1d4:	a6 e2       	ldi	r26, 0x26	; 38
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e6 e2       	ldi	r30, 0x26	; 38
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	80 61       	ori	r24, 0x10	; 16
 1e0:	8c 93       	st	X, r24

				#if Adjustment==Left//take 8 bits

					*Copy_pu16ADCReading= ADCH;
 1e2:	e5 e2       	ldi	r30, 0x25	; 37
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	88 2f       	mov	r24, r24
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	ef 81       	ldd	r30, Y+7	; 0x07
 1ee:	f8 85       	ldd	r31, Y+8	; 0x08
 1f0:	91 83       	std	Z+1, r25	; 0x01
 1f2:	80 83       	st	Z, r24
 1f4:	05 c0       	rjmp	.+10     	; 0x200 <ADC_u8GetChannelReadingSync+0xfe>
			}
		}
		else
		{
			/*make error state busy function*/
			Local_u8ErrorState=BUSY_FUNC;
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	8d 83       	std	Y+5, r24	; 0x05
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <ADC_u8GetChannelReadingSync+0xfe>
		}
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_u8ErrorState;
 200:	8d 81       	ldd	r24, Y+5	; 0x05
}
 202:	28 96       	adiw	r28, 0x08	; 8
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
 20e:	cf 91       	pop	r28
 210:	df 91       	pop	r29
 212:	08 95       	ret

00000214 <ADC_u8GetChannelReadingAsync>:
u8 ADC_u8GetChannelReadingAsync(u8 Copy_u8Channel , u16* Copy_pu16ADCReading,void(*Copy_pvADCNotification)(void))
{
 214:	df 93       	push	r29
 216:	cf 93       	push	r28
 218:	00 d0       	rcall	.+0      	; 0x21a <ADC_u8GetChannelReadingAsync+0x6>
 21a:	00 d0       	rcall	.+0      	; 0x21c <ADC_u8GetChannelReadingAsync+0x8>
 21c:	00 d0       	rcall	.+0      	; 0x21e <ADC_u8GetChannelReadingAsync+0xa>
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	8a 83       	std	Y+2, r24	; 0x02
 224:	7c 83       	std	Y+4, r23	; 0x04
 226:	6b 83       	std	Y+3, r22	; 0x03
 228:	5e 83       	std	Y+6, r21	; 0x06
 22a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
 22c:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu16ADCReading==NULL)||(Copy_pvADCNotification==NULL))
 22e:	8b 81       	ldd	r24, Y+3	; 0x03
 230:	9c 81       	ldd	r25, Y+4	; 0x04
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	21 f0       	breq	.+8      	; 0x23e <ADC_u8GetChannelReadingAsync+0x2a>
 236:	8d 81       	ldd	r24, Y+5	; 0x05
 238:	9e 81       	ldd	r25, Y+6	; 0x06
 23a:	00 97       	sbiw	r24, 0x00	; 0
 23c:	19 f4       	brne	.+6      	; 0x244 <ADC_u8GetChannelReadingAsync+0x30>
	{
		Local_u8ErrorState=NULL_POINTER;
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	89 83       	std	Y+1, r24	; 0x01
 242:	36 c0       	rjmp	.+108    	; 0x2b0 <ADC_u8GetChannelReadingAsync+0x9c>
	}
	else
	{
		if(Global_u8ADCState==IDLE)
 244:	80 91 62 00 	lds	r24, 0x0062
 248:	88 23       	and	r24, r24
 24a:	81 f5       	brne	.+96     	; 0x2ac <ADC_u8GetChannelReadingAsync+0x98>
		{

			/*edit ADC ISR source*/
			ADC_u8ISRSource=SingleChannelAsync;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 93 6a 00 	sts	0x006A, r24

			/*set ADC state to busy*/
			Global_u8ADCState=BUSY;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 62 00 	sts	0x0062, r24

			/*setting global pointers to the input pointers to be used in the ISR*/
			ADC_pu16Reading=Copy_pu16ADCReading;
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	9c 81       	ldd	r25, Y+4	; 0x04
 25c:	90 93 6c 00 	sts	0x006C, r25
 260:	80 93 6b 00 	sts	0x006B, r24
			ADC_pvSetCallBackNotification=Copy_pvADCNotification;
 264:	8d 81       	ldd	r24, Y+5	; 0x05
 266:	9e 81       	ldd	r25, Y+6	; 0x06
 268:	90 93 69 00 	sts	0x0069, r25
 26c:	80 93 68 00 	sts	0x0068, r24

			/*setting channel*/
			ADMUX&=MUX_BIT_MASK;
 270:	a7 e2       	ldi	r26, 0x27	; 39
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	e7 e2       	ldi	r30, 0x27	; 39
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	80 7e       	andi	r24, 0xE0	; 224
 27c:	8c 93       	st	X, r24
			ADMUX|=Copy_u8Channel;
 27e:	a7 e2       	ldi	r26, 0x27	; 39
 280:	b0 e0       	ldi	r27, 0x00	; 0
 282:	e7 e2       	ldi	r30, 0x27	; 39
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	90 81       	ld	r25, Z
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	89 2b       	or	r24, r25
 28c:	8c 93       	st	X, r24

			/*enable interrupt*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
 28e:	a6 e2       	ldi	r26, 0x26	; 38
 290:	b0 e0       	ldi	r27, 0x00	; 0
 292:	e6 e2       	ldi	r30, 0x26	; 38
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	88 60       	ori	r24, 0x08	; 8
 29a:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
 29c:	a6 e2       	ldi	r26, 0x26	; 38
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	e6 e2       	ldi	r30, 0x26	; 38
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	80 64       	ori	r24, 0x40	; 64
 2a8:	8c 93       	st	X, r24
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <ADC_u8GetChannelReadingAsync+0x9c>

		}
		else
		{
			Local_u8ErrorState=BUSY_FUNC;
 2ac:	84 e0       	ldi	r24, 0x04	; 4
 2ae:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState;
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
}
 2b2:	26 96       	adiw	r28, 0x06	; 6
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	f8 94       	cli
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	cd bf       	out	0x3d, r28	; 61
 2be:	cf 91       	pop	r28
 2c0:	df 91       	pop	r29
 2c2:	08 95       	ret

000002c4 <ADC_u16AccessADCRegisters>:

u8 ADC_u16AccessADCRegisters(u16* pu16_ADCReading)
{
 2c4:	df 93       	push	r29
 2c6:	cf 93       	push	r28
 2c8:	00 d0       	rcall	.+0      	; 0x2ca <ADC_u16AccessADCRegisters+0x6>
 2ca:	0f 92       	push	r0
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	9b 83       	std	Y+3, r25	; 0x03
 2d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
 2d4:	19 82       	std	Y+1, r1	; 0x01
	if(pu16_ADCReading==NULL)
 2d6:	8a 81       	ldd	r24, Y+2	; 0x02
 2d8:	9b 81       	ldd	r25, Y+3	; 0x03
 2da:	00 97       	sbiw	r24, 0x00	; 0
 2dc:	19 f4       	brne	.+6      	; 0x2e4 <ADC_u16AccessADCRegisters+0x20>
	{
		Local_u8ErrorState=NULL_POINTER;
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	89 83       	std	Y+1, r24	; 0x01
 2e2:	09 c0       	rjmp	.+18     	; 0x2f6 <ADC_u16AccessADCRegisters+0x32>
	}
	else
	{
		#if Adjustment==Left//take 8 bits
			*pu16_ADCReading= ADCH;
 2e4:	e5 e2       	ldi	r30, 0x25	; 37
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	88 2f       	mov	r24, r24
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	ea 81       	ldd	r30, Y+2	; 0x02
 2f0:	fb 81       	ldd	r31, Y+3	; 0x03
 2f2:	91 83       	std	Z+1, r25	; 0x01
 2f4:	80 83       	st	Z, r24
			*pu16_ADCReading=ADC;//this will take 2 bytes which include ADCL and ADCH
		#else
		#error "Error in adjustment"
		#endif
	}
	return Local_u8ErrorState;
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
}
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	cf 91       	pop	r28
 300:	df 91       	pop	r29
 302:	08 95       	ret

00000304 <ADC_u8StartChainAsync>:

u8 ADC_u8StartChainAsync(Chain_t *Copy_Chain)
{
 304:	df 93       	push	r29
 306:	cf 93       	push	r28
 308:	00 d0       	rcall	.+0      	; 0x30a <ADC_u8StartChainAsync+0x6>
 30a:	0f 92       	push	r0
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	9b 83       	std	Y+3, r25	; 0x03
 312:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
 314:	19 82       	std	Y+1, r1	; 0x01

	/*check null pointer*/
	if(Copy_Chain==NULL)
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	9b 81       	ldd	r25, Y+3	; 0x03
 31a:	00 97       	sbiw	r24, 0x00	; 0
 31c:	19 f4       	brne	.+6      	; 0x324 <ADC_u8StartChainAsync+0x20>
	{
		Local_u8ErrorState=NULL_POINTER;
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	89 83       	std	Y+1, r24	; 0x01
 322:	54 c0       	rjmp	.+168    	; 0x3cc <ADC_u8StartChainAsync+0xc8>
	}
	else
	{
		/*edit ADC ISR source*/
		ADC_u8ISRSource=ChainChannelAsync;
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	80 93 6a 00 	sts	0x006A, r24

		/*Check on state of ADC*/
		if (Global_u8ADCState==BUSY)
 32a:	80 91 62 00 	lds	r24, 0x0062
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	19 f4       	brne	.+6      	; 0x338 <ADC_u8StartChainAsync+0x34>
		{
			Local_u8ErrorState=BUSY;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	89 83       	std	Y+1, r24	; 0x01
 336:	4a c0       	rjmp	.+148    	; 0x3cc <ADC_u8StartChainAsync+0xc8>
		}
		/*in case of idle*/
		else
		{
			/*Make ADC BUSY*/
			Global_u8ADCState=BUSY;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	80 93 62 00 	sts	0x0062, r24

			/*copy the struct elements to the global variables*/

			/*initialize global ADC channel Array*/
			Global_pu8ADCChannelArr=		  Copy_Chain->Channels;
 33e:	ea 81       	ldd	r30, Y+2	; 0x02
 340:	fb 81       	ldd	r31, Y+3	; 0x03
 342:	80 81       	ld	r24, Z
 344:	91 81       	ldd	r25, Z+1	; 0x01
 346:	90 93 66 00 	sts	0x0066, r25
 34a:	80 93 65 00 	sts	0x0065, r24

			/*initialize global ADC chain size*/
			Global_u8ADCChainSize=		  Copy_Chain->Size;
 34e:	ea 81       	ldd	r30, Y+2	; 0x02
 350:	fb 81       	ldd	r31, Y+3	; 0x03
 352:	84 81       	ldd	r24, Z+4	; 0x04
 354:	80 93 6d 00 	sts	0x006D, r24

			/*initialize global ADC result array*/
			Global_pu16ADCChainResultArr=  Copy_Chain->Results;
 358:	ea 81       	ldd	r30, Y+2	; 0x02
 35a:	fb 81       	ldd	r31, Y+3	; 0x03
 35c:	82 81       	ldd	r24, Z+2	; 0x02
 35e:	93 81       	ldd	r25, Z+3	; 0x03
 360:	90 93 64 00 	sts	0x0064, r25
 364:	80 93 63 00 	sts	0x0063, r24

			/*initialize callback function*/
			ADC_pvSetCallBackNotification=Copy_Chain->NotificationFunc;
 368:	ea 81       	ldd	r30, Y+2	; 0x02
 36a:	fb 81       	ldd	r31, Y+3	; 0x03
 36c:	85 81       	ldd	r24, Z+5	; 0x05
 36e:	96 81       	ldd	r25, Z+6	; 0x06
 370:	90 93 69 00 	sts	0x0069, r25
 374:	80 93 68 00 	sts	0x0068, r24

			/*initialize Current conversion index to 0*/
			Global_u8ChainConversionIndex=0;
 378:	10 92 67 00 	sts	0x0067, r1

			/*set required channel*/
			/*clearing the channel selection bits*/
			ADMUX&=MUX_BIT_MASK;
 37c:	a7 e2       	ldi	r26, 0x27	; 39
 37e:	b0 e0       	ldi	r27, 0x00	; 0
 380:	e7 e2       	ldi	r30, 0x27	; 39
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	80 7e       	andi	r24, 0xE0	; 224
 388:	8c 93       	st	X, r24

			/*set required channel (first channel)*/
			ADMUX|=Global_pu8ADCChannelArr[Global_u8ChainConversionIndex];
 38a:	a7 e2       	ldi	r26, 0x27	; 39
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	e7 e2       	ldi	r30, 0x27	; 39
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	40 81       	ld	r20, Z
 394:	20 91 65 00 	lds	r18, 0x0065
 398:	30 91 66 00 	lds	r19, 0x0066
 39c:	80 91 67 00 	lds	r24, 0x0067
 3a0:	88 2f       	mov	r24, r24
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	f9 01       	movw	r30, r18
 3a6:	e8 0f       	add	r30, r24
 3a8:	f9 1f       	adc	r31, r25
 3aa:	80 81       	ld	r24, Z
 3ac:	84 2b       	or	r24, r20
 3ae:	8c 93       	st	X, r24

			/*enable conversion complete interrupt*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
 3b0:	a6 e2       	ldi	r26, 0x26	; 38
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	e6 e2       	ldi	r30, 0x26	; 38
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	88 60       	ori	r24, 0x08	; 8
 3bc:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
 3be:	a6 e2       	ldi	r26, 0x26	; 38
 3c0:	b0 e0       	ldi	r27, 0x00	; 0
 3c2:	e6 e2       	ldi	r30, 0x26	; 38
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	80 64       	ori	r24, 0x40	; 64
 3ca:	8c 93       	st	X, r24

		}
	}
	return Local_u8ErrorState;
 3cc:	89 81       	ldd	r24, Y+1	; 0x01
}
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	cf 91       	pop	r28
 3d6:	df 91       	pop	r29
 3d8:	08 95       	ret

000003da <__vector_16>:
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	2f 93       	push	r18
 3e6:	3f 93       	push	r19
 3e8:	4f 93       	push	r20
 3ea:	5f 93       	push	r21
 3ec:	6f 93       	push	r22
 3ee:	7f 93       	push	r23
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	af 93       	push	r26
 3f6:	bf 93       	push	r27
 3f8:	ef 93       	push	r30
 3fa:	ff 93       	push	r31
 3fc:	df 93       	push	r29
 3fe:	cf 93       	push	r28
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSource==SingleChannelAsync)
 404:	80 91 6a 00 	lds	r24, 0x006A
 408:	81 30       	cpi	r24, 0x01	; 1
 40a:	d1 f4       	brne	.+52     	; 0x440 <__vector_16+0x66>
	{
		/*conversion done set adc state to idle*/
		Global_u8ADCState=IDLE;
 40c:	10 92 62 00 	sts	0x0062, r1

		/*conversion done set the adc reading*/
#if Adjustment==Left//take 8 bits
		*ADC_pu16Reading= ADCH;
 410:	a0 91 6b 00 	lds	r26, 0x006B
 414:	b0 91 6c 00 	lds	r27, 0x006C
 418:	e5 e2       	ldi	r30, 0x25	; 37
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	88 2f       	mov	r24, r24
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	8d 93       	st	X+, r24
 424:	9c 93       	st	X, r25
#else
#error "Error in adjustment"
#endif

		/*callback the notification function*/
		ADC_pvSetCallBackNotification();
 426:	e0 91 68 00 	lds	r30, 0x0068
 42a:	f0 91 69 00 	lds	r31, 0x0069
 42e:	09 95       	icall

		/*Disable the interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
 430:	a6 e2       	ldi	r26, 0x26	; 38
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	e6 e2       	ldi	r30, 0x26	; 38
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	87 7f       	andi	r24, 0xF7	; 247
 43c:	8c 93       	st	X, r24
 43e:	5b c0       	rjmp	.+182    	; 0x4f6 <__vector_16+0x11c>
	}
	/*ChainAsync*/
	else if(ADC_u8ISRSource==ChainChannelAsync)
 440:	80 91 6a 00 	lds	r24, 0x006A
 444:	82 30       	cpi	r24, 0x02	; 2
 446:	09 f0       	breq	.+2      	; 0x44a <__vector_16+0x70>
 448:	56 c0       	rjmp	.+172    	; 0x4f6 <__vector_16+0x11c>
	{
		/*store the data*/
#if Adjustment==Left//take 8 bits
		Global_pu16ADCChainResultArr[Global_u8ChainConversionIndex]=ADCH;
 44a:	20 91 63 00 	lds	r18, 0x0063
 44e:	30 91 64 00 	lds	r19, 0x0064
 452:	80 91 67 00 	lds	r24, 0x0067
 456:	88 2f       	mov	r24, r24
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	d9 01       	movw	r26, r18
 460:	a8 0f       	add	r26, r24
 462:	b9 1f       	adc	r27, r25
 464:	e5 e2       	ldi	r30, 0x25	; 37
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	88 2f       	mov	r24, r24
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	11 96       	adiw	r26, 0x01	; 1
 470:	9c 93       	st	X, r25
 472:	8e 93       	st	-X, r24
#else
#error "Error in adjustment"
#endif

		/*increment index*/
		Global_u8ChainConversionIndex++;
 474:	80 91 67 00 	lds	r24, 0x0067
 478:	8f 5f       	subi	r24, 0xFF	; 255
 47a:	80 93 67 00 	sts	0x0067, r24

		/*check if we finished the conversion of all required channels*/
		/*in case of finishing all channels*/
		if(Global_u8ChainConversionIndex==Global_u8ADCChainSize)
 47e:	90 91 67 00 	lds	r25, 0x0067
 482:	80 91 6d 00 	lds	r24, 0x006D
 486:	98 17       	cp	r25, r24
 488:	79 f4       	brne	.+30     	; 0x4a8 <__vector_16+0xce>
		{
			/*Reset ADC state*/
			Global_u8ADCState=IDLE;
 48a:	10 92 62 00 	sts	0x0062, r1

			/*Call notification function*/
			ADC_pvSetCallBackNotification();
 48e:	e0 91 68 00 	lds	r30, 0x0068
 492:	f0 91 69 00 	lds	r31, 0x0069
 496:	09 95       	icall

			/*Disable conversion complete interrupt*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
 498:	a6 e2       	ldi	r26, 0x26	; 38
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	e6 e2       	ldi	r30, 0x26	; 38
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	87 7f       	andi	r24, 0xF7	; 247
 4a4:	8c 93       	st	X, r24
 4a6:	27 c0       	rjmp	.+78     	; 0x4f6 <__vector_16+0x11c>
		}
		/*in case of remaining channels*/
		else if(Global_u8ChainConversionIndex<Global_u8ADCChainSize)
 4a8:	90 91 67 00 	lds	r25, 0x0067
 4ac:	80 91 6d 00 	lds	r24, 0x006D
 4b0:	98 17       	cp	r25, r24
 4b2:	08 f5       	brcc	.+66     	; 0x4f6 <__vector_16+0x11c>
		{
			/*set next channel*/
			/*clearing the channel selection bits*/
			ADMUX&=MUX_BIT_MASK;
 4b4:	a7 e2       	ldi	r26, 0x27	; 39
 4b6:	b0 e0       	ldi	r27, 0x00	; 0
 4b8:	e7 e2       	ldi	r30, 0x27	; 39
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	80 7e       	andi	r24, 0xE0	; 224
 4c0:	8c 93       	st	X, r24

			/*set required channel (first channel)*/
			ADMUX|=Global_pu8ADCChannelArr[Global_u8ChainConversionIndex];
 4c2:	a7 e2       	ldi	r26, 0x27	; 39
 4c4:	b0 e0       	ldi	r27, 0x00	; 0
 4c6:	e7 e2       	ldi	r30, 0x27	; 39
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	40 81       	ld	r20, Z
 4cc:	20 91 65 00 	lds	r18, 0x0065
 4d0:	30 91 66 00 	lds	r19, 0x0066
 4d4:	80 91 67 00 	lds	r24, 0x0067
 4d8:	88 2f       	mov	r24, r24
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	f9 01       	movw	r30, r18
 4de:	e8 0f       	add	r30, r24
 4e0:	f9 1f       	adc	r31, r25
 4e2:	80 81       	ld	r24, Z
 4e4:	84 2b       	or	r24, r20
 4e6:	8c 93       	st	X, r24

			/*start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
 4e8:	a6 e2       	ldi	r26, 0x26	; 38
 4ea:	b0 e0       	ldi	r27, 0x00	; 0
 4ec:	e6 e2       	ldi	r30, 0x26	; 38
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	80 64       	ori	r24, 0x40	; 64
 4f4:	8c 93       	st	X, r24
		}
	}
}
 4f6:	cf 91       	pop	r28
 4f8:	df 91       	pop	r29
 4fa:	ff 91       	pop	r31
 4fc:	ef 91       	pop	r30
 4fe:	bf 91       	pop	r27
 500:	af 91       	pop	r26
 502:	9f 91       	pop	r25
 504:	8f 91       	pop	r24
 506:	7f 91       	pop	r23
 508:	6f 91       	pop	r22
 50a:	5f 91       	pop	r21
 50c:	4f 91       	pop	r20
 50e:	3f 91       	pop	r19
 510:	2f 91       	pop	r18
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <DIO_u8SetPinValue>:
/******************************************************************************/
/***********************Setting pin value**************************************/
/******************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin,u8 Copy_u8Value)
{
 51c:	df 93       	push	r29
 51e:	cf 93       	push	r28
 520:	cd b7       	in	r28, 0x3d	; 61
 522:	de b7       	in	r29, 0x3e	; 62
 524:	28 97       	sbiw	r28, 0x08	; 8
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	f8 94       	cli
 52a:	de bf       	out	0x3e, r29	; 62
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	cd bf       	out	0x3d, r28	; 61
 530:	8a 83       	std	Y+2, r24	; 0x02
 532:	6b 83       	std	Y+3, r22	; 0x03
 534:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially zero
 536:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN_7)
 538:	8b 81       	ldd	r24, Y+3	; 0x03
 53a:	88 30       	cpi	r24, 0x08	; 8
 53c:	08 f0       	brcs	.+2      	; 0x540 <DIO_u8SetPinValue+0x24>
 53e:	ed c0       	rjmp	.+474    	; 0x71a <DIO_u8SetPinValue+0x1fe>
	{
		if (Copy_u8Value)//if value is 1 SET the required PIN
 540:	8c 81       	ldd	r24, Y+4	; 0x04
 542:	88 23       	and	r24, r24
 544:	09 f4       	brne	.+2      	; 0x548 <DIO_u8SetPinValue+0x2c>
 546:	72 c0       	rjmp	.+228    	; 0x62c <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
 548:	8a 81       	ldd	r24, Y+2	; 0x02
 54a:	28 2f       	mov	r18, r24
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	38 87       	std	Y+8, r19	; 0x08
 550:	2f 83       	std	Y+7, r18	; 0x07
 552:	8f 81       	ldd	r24, Y+7	; 0x07
 554:	98 85       	ldd	r25, Y+8	; 0x08
 556:	81 30       	cpi	r24, 0x01	; 1
 558:	91 05       	cpc	r25, r1
 55a:	49 f1       	breq	.+82     	; 0x5ae <DIO_u8SetPinValue+0x92>
 55c:	2f 81       	ldd	r18, Y+7	; 0x07
 55e:	38 85       	ldd	r19, Y+8	; 0x08
 560:	22 30       	cpi	r18, 0x02	; 2
 562:	31 05       	cpc	r19, r1
 564:	2c f4       	brge	.+10     	; 0x570 <DIO_u8SetPinValue+0x54>
 566:	8f 81       	ldd	r24, Y+7	; 0x07
 568:	98 85       	ldd	r25, Y+8	; 0x08
 56a:	00 97       	sbiw	r24, 0x00	; 0
 56c:	61 f0       	breq	.+24     	; 0x586 <DIO_u8SetPinValue+0x6a>
 56e:	5b c0       	rjmp	.+182    	; 0x626 <DIO_u8SetPinValue+0x10a>
 570:	2f 81       	ldd	r18, Y+7	; 0x07
 572:	38 85       	ldd	r19, Y+8	; 0x08
 574:	22 30       	cpi	r18, 0x02	; 2
 576:	31 05       	cpc	r19, r1
 578:	71 f1       	breq	.+92     	; 0x5d6 <DIO_u8SetPinValue+0xba>
 57a:	8f 81       	ldd	r24, Y+7	; 0x07
 57c:	98 85       	ldd	r25, Y+8	; 0x08
 57e:	83 30       	cpi	r24, 0x03	; 3
 580:	91 05       	cpc	r25, r1
 582:	e9 f1       	breq	.+122    	; 0x5fe <DIO_u8SetPinValue+0xe2>
 584:	50 c0       	rjmp	.+160    	; 0x626 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA:
				SET_BIT(PORTA_reg,Copy_u8Pin);
 586:	ab e3       	ldi	r26, 0x3B	; 59
 588:	b0 e0       	ldi	r27, 0x00	; 0
 58a:	eb e3       	ldi	r30, 0x3B	; 59
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	48 2f       	mov	r20, r24
 592:	8b 81       	ldd	r24, Y+3	; 0x03
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 2e       	mov	r0, r18
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_u8SetPinValue+0x88>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_u8SetPinValue+0x84>
 5a8:	84 2b       	or	r24, r20
 5aa:	8c 93       	st	X, r24
 5ac:	b8 c0       	rjmp	.+368    	; 0x71e <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTB:
				SET_BIT(PORTB_reg,Copy_u8Pin);
 5ae:	a8 e3       	ldi	r26, 0x38	; 56
 5b0:	b0 e0       	ldi	r27, 0x00	; 0
 5b2:	e8 e3       	ldi	r30, 0x38	; 56
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	48 2f       	mov	r20, r24
 5ba:	8b 81       	ldd	r24, Y+3	; 0x03
 5bc:	28 2f       	mov	r18, r24
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 2e       	mov	r0, r18
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_u8SetPinValue+0xb0>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	0a 94       	dec	r0
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_u8SetPinValue+0xac>
 5d0:	84 2b       	or	r24, r20
 5d2:	8c 93       	st	X, r24
 5d4:	a4 c0       	rjmp	.+328    	; 0x71e <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTC:
				SET_BIT(PORTC_reg,Copy_u8Pin);
 5d6:	a5 e3       	ldi	r26, 0x35	; 53
 5d8:	b0 e0       	ldi	r27, 0x00	; 0
 5da:	e5 e3       	ldi	r30, 0x35	; 53
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	48 2f       	mov	r20, r24
 5e2:	8b 81       	ldd	r24, Y+3	; 0x03
 5e4:	28 2f       	mov	r18, r24
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	02 2e       	mov	r0, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_u8SetPinValue+0xd8>
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	0a 94       	dec	r0
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_u8SetPinValue+0xd4>
 5f8:	84 2b       	or	r24, r20
 5fa:	8c 93       	st	X, r24
 5fc:	90 c0       	rjmp	.+288    	; 0x71e <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTD:
				SET_BIT(PORTD_reg,Copy_u8Pin);
 5fe:	a2 e3       	ldi	r26, 0x32	; 50
 600:	b0 e0       	ldi	r27, 0x00	; 0
 602:	e2 e3       	ldi	r30, 0x32	; 50
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	48 2f       	mov	r20, r24
 60a:	8b 81       	ldd	r24, Y+3	; 0x03
 60c:	28 2f       	mov	r18, r24
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	02 2e       	mov	r0, r18
 616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_u8SetPinValue+0x100>
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	0a 94       	dec	r0
 61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_u8SetPinValue+0xfc>
 620:	84 2b       	or	r24, r20
 622:	8c 93       	st	X, r24
 624:	7c c0       	rjmp	.+248    	; 0x71e <DIO_u8SetPinValue+0x202>
				break;
			
				default:
				Local_u8ErrorState=1;
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	89 83       	std	Y+1, r24	; 0x01
 62a:	79 c0       	rjmp	.+242    	; 0x71e <DIO_u8SetPinValue+0x202>
				break;
			}
		}
		else//value is 0 so we clear the bits
		{
			switch(Copy_u8Port)
 62c:	8a 81       	ldd	r24, Y+2	; 0x02
 62e:	28 2f       	mov	r18, r24
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	3e 83       	std	Y+6, r19	; 0x06
 634:	2d 83       	std	Y+5, r18	; 0x05
 636:	8d 81       	ldd	r24, Y+5	; 0x05
 638:	9e 81       	ldd	r25, Y+6	; 0x06
 63a:	81 30       	cpi	r24, 0x01	; 1
 63c:	91 05       	cpc	r25, r1
 63e:	59 f1       	breq	.+86     	; 0x696 <DIO_u8SetPinValue+0x17a>
 640:	2d 81       	ldd	r18, Y+5	; 0x05
 642:	3e 81       	ldd	r19, Y+6	; 0x06
 644:	22 30       	cpi	r18, 0x02	; 2
 646:	31 05       	cpc	r19, r1
 648:	2c f4       	brge	.+10     	; 0x654 <DIO_u8SetPinValue+0x138>
 64a:	8d 81       	ldd	r24, Y+5	; 0x05
 64c:	9e 81       	ldd	r25, Y+6	; 0x06
 64e:	00 97       	sbiw	r24, 0x00	; 0
 650:	69 f0       	breq	.+26     	; 0x66c <DIO_u8SetPinValue+0x150>
 652:	60 c0       	rjmp	.+192    	; 0x714 <DIO_u8SetPinValue+0x1f8>
 654:	2d 81       	ldd	r18, Y+5	; 0x05
 656:	3e 81       	ldd	r19, Y+6	; 0x06
 658:	22 30       	cpi	r18, 0x02	; 2
 65a:	31 05       	cpc	r19, r1
 65c:	89 f1       	breq	.+98     	; 0x6c0 <DIO_u8SetPinValue+0x1a4>
 65e:	8d 81       	ldd	r24, Y+5	; 0x05
 660:	9e 81       	ldd	r25, Y+6	; 0x06
 662:	83 30       	cpi	r24, 0x03	; 3
 664:	91 05       	cpc	r25, r1
 666:	09 f4       	brne	.+2      	; 0x66a <DIO_u8SetPinValue+0x14e>
 668:	40 c0       	rjmp	.+128    	; 0x6ea <DIO_u8SetPinValue+0x1ce>
 66a:	54 c0       	rjmp	.+168    	; 0x714 <DIO_u8SetPinValue+0x1f8>
			{
				case DIO_u8PORTA:
				CLR_BIT(PORTA_reg,Copy_u8Pin);
 66c:	ab e3       	ldi	r26, 0x3B	; 59
 66e:	b0 e0       	ldi	r27, 0x00	; 0
 670:	eb e3       	ldi	r30, 0x3B	; 59
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	80 81       	ld	r24, Z
 676:	48 2f       	mov	r20, r24
 678:	8b 81       	ldd	r24, Y+3	; 0x03
 67a:	28 2f       	mov	r18, r24
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	02 2e       	mov	r0, r18
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_u8SetPinValue+0x16e>
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	0a 94       	dec	r0
 68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_u8SetPinValue+0x16a>
 68e:	80 95       	com	r24
 690:	84 23       	and	r24, r20
 692:	8c 93       	st	X, r24
 694:	44 c0       	rjmp	.+136    	; 0x71e <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTB:
				CLR_BIT(PORTB_reg,Copy_u8Pin);
 696:	a8 e3       	ldi	r26, 0x38	; 56
 698:	b0 e0       	ldi	r27, 0x00	; 0
 69a:	e8 e3       	ldi	r30, 0x38	; 56
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	80 81       	ld	r24, Z
 6a0:	48 2f       	mov	r20, r24
 6a2:	8b 81       	ldd	r24, Y+3	; 0x03
 6a4:	28 2f       	mov	r18, r24
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	02 2e       	mov	r0, r18
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_u8SetPinValue+0x198>
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	0a 94       	dec	r0
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_u8SetPinValue+0x194>
 6b8:	80 95       	com	r24
 6ba:	84 23       	and	r24, r20
 6bc:	8c 93       	st	X, r24
 6be:	2f c0       	rjmp	.+94     	; 0x71e <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTC:
				CLR_BIT(PORTC_reg,Copy_u8Pin);
 6c0:	a5 e3       	ldi	r26, 0x35	; 53
 6c2:	b0 e0       	ldi	r27, 0x00	; 0
 6c4:	e5 e3       	ldi	r30, 0x35	; 53
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	48 2f       	mov	r20, r24
 6cc:	8b 81       	ldd	r24, Y+3	; 0x03
 6ce:	28 2f       	mov	r18, r24
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	02 2e       	mov	r0, r18
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_u8SetPinValue+0x1c2>
 6da:	88 0f       	add	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	0a 94       	dec	r0
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <DIO_u8SetPinValue+0x1be>
 6e2:	80 95       	com	r24
 6e4:	84 23       	and	r24, r20
 6e6:	8c 93       	st	X, r24
 6e8:	1a c0       	rjmp	.+52     	; 0x71e <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTD:
				CLR_BIT(PORTD_reg,Copy_u8Pin);
 6ea:	a2 e3       	ldi	r26, 0x32	; 50
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	e2 e3       	ldi	r30, 0x32	; 50
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	48 2f       	mov	r20, r24
 6f6:	8b 81       	ldd	r24, Y+3	; 0x03
 6f8:	28 2f       	mov	r18, r24
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	02 2e       	mov	r0, r18
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_u8SetPinValue+0x1ec>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	0a 94       	dec	r0
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_u8SetPinValue+0x1e8>
 70c:	80 95       	com	r24
 70e:	84 23       	and	r24, r20
 710:	8c 93       	st	X, r24
 712:	05 c0       	rjmp	.+10     	; 0x71e <DIO_u8SetPinValue+0x202>
				break;
				
				default:
				Local_u8ErrorState=1;
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	89 83       	std	Y+1, r24	; 0x01
 718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_u8SetPinValue+0x202>
			}
		}
	}
	else //incorrect input
	{
		Local_u8ErrorState=1;
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	89 83       	std	Y+1, r24	; 0x01
	}	
	return Local_u8ErrorState;
 71e:	89 81       	ldd	r24, Y+1	; 0x01
}
 720:	28 96       	adiw	r28, 0x08	; 8
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	f8 94       	cli
 726:	de bf       	out	0x3e, r29	; 62
 728:	0f be       	out	0x3f, r0	; 63
 72a:	cd bf       	out	0x3d, r28	; 61
 72c:	cf 91       	pop	r28
 72e:	df 91       	pop	r29
 730:	08 95       	ret

00000732 <DIO_u8SetPortValue>:
/******************************************************************************/
/***********************Setting port value*************************************/
/******************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port ,u8 Copy_u8Value)
{
 732:	df 93       	push	r29
 734:	cf 93       	push	r28
 736:	00 d0       	rcall	.+0      	; 0x738 <DIO_u8SetPortValue+0x6>
 738:	00 d0       	rcall	.+0      	; 0x73a <DIO_u8SetPortValue+0x8>
 73a:	0f 92       	push	r0
 73c:	cd b7       	in	r28, 0x3d	; 61
 73e:	de b7       	in	r29, 0x3e	; 62
 740:	8a 83       	std	Y+2, r24	; 0x02
 742:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;//error state initially zero
 744:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
 746:	8a 81       	ldd	r24, Y+2	; 0x02
 748:	28 2f       	mov	r18, r24
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	3d 83       	std	Y+5, r19	; 0x05
 74e:	2c 83       	std	Y+4, r18	; 0x04
 750:	8c 81       	ldd	r24, Y+4	; 0x04
 752:	9d 81       	ldd	r25, Y+5	; 0x05
 754:	81 30       	cpi	r24, 0x01	; 1
 756:	91 05       	cpc	r25, r1
 758:	d1 f0       	breq	.+52     	; 0x78e <DIO_u8SetPortValue+0x5c>
 75a:	2c 81       	ldd	r18, Y+4	; 0x04
 75c:	3d 81       	ldd	r19, Y+5	; 0x05
 75e:	22 30       	cpi	r18, 0x02	; 2
 760:	31 05       	cpc	r19, r1
 762:	2c f4       	brge	.+10     	; 0x76e <DIO_u8SetPortValue+0x3c>
 764:	8c 81       	ldd	r24, Y+4	; 0x04
 766:	9d 81       	ldd	r25, Y+5	; 0x05
 768:	00 97       	sbiw	r24, 0x00	; 0
 76a:	61 f0       	breq	.+24     	; 0x784 <DIO_u8SetPortValue+0x52>
 76c:	1f c0       	rjmp	.+62     	; 0x7ac <DIO_u8SetPortValue+0x7a>
 76e:	2c 81       	ldd	r18, Y+4	; 0x04
 770:	3d 81       	ldd	r19, Y+5	; 0x05
 772:	22 30       	cpi	r18, 0x02	; 2
 774:	31 05       	cpc	r19, r1
 776:	81 f0       	breq	.+32     	; 0x798 <DIO_u8SetPortValue+0x66>
 778:	8c 81       	ldd	r24, Y+4	; 0x04
 77a:	9d 81       	ldd	r25, Y+5	; 0x05
 77c:	83 30       	cpi	r24, 0x03	; 3
 77e:	91 05       	cpc	r25, r1
 780:	81 f0       	breq	.+32     	; 0x7a2 <DIO_u8SetPortValue+0x70>
 782:	14 c0       	rjmp	.+40     	; 0x7ac <DIO_u8SetPortValue+0x7a>
		{
			case DIO_u8PORTA:
			PORTA_reg=Copy_u8Value;
 784:	eb e3       	ldi	r30, 0x3B	; 59
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	8b 81       	ldd	r24, Y+3	; 0x03
 78a:	80 83       	st	Z, r24
 78c:	11 c0       	rjmp	.+34     	; 0x7b0 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTB:
			PORTB_reg=Copy_u8Value;
 78e:	e8 e3       	ldi	r30, 0x38	; 56
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	8b 81       	ldd	r24, Y+3	; 0x03
 794:	80 83       	st	Z, r24
 796:	0c c0       	rjmp	.+24     	; 0x7b0 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTC:
			PORTC_reg=Copy_u8Value;
 798:	e5 e3       	ldi	r30, 0x35	; 53
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	8b 81       	ldd	r24, Y+3	; 0x03
 79e:	80 83       	st	Z, r24
 7a0:	07 c0       	rjmp	.+14     	; 0x7b0 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTD:
			PORTD_reg=Copy_u8Value;
 7a2:	e2 e3       	ldi	r30, 0x32	; 50
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	8b 81       	ldd	r24, Y+3	; 0x03
 7a8:	80 83       	st	Z, r24
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <DIO_u8SetPortValue+0x7e>
			break;
			
			default:
			Local_u8ErrorState=1;
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_u8ErrorState;//incorrect input
 7b0:	89 81       	ldd	r24, Y+1	; 0x01
}
 7b2:	0f 90       	pop	r0
 7b4:	0f 90       	pop	r0
 7b6:	0f 90       	pop	r0
 7b8:	0f 90       	pop	r0
 7ba:	0f 90       	pop	r0
 7bc:	cf 91       	pop	r28
 7be:	df 91       	pop	r29
 7c0:	08 95       	ret

000007c2 <DIO_u8GetPinValue>:
/******************************************************************************/
/***********************Getting PIN value**************************************/
/******************************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 7c2:	df 93       	push	r29
 7c4:	cf 93       	push	r28
 7c6:	cd b7       	in	r28, 0x3d	; 61
 7c8:	de b7       	in	r29, 0x3e	; 62
 7ca:	27 97       	sbiw	r28, 0x07	; 7
 7cc:	0f b6       	in	r0, 0x3f	; 63
 7ce:	f8 94       	cli
 7d0:	de bf       	out	0x3e, r29	; 62
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	cd bf       	out	0x3d, r28	; 61
 7d6:	8a 83       	std	Y+2, r24	; 0x02
 7d8:	6b 83       	std	Y+3, r22	; 0x03
 7da:	5d 83       	std	Y+5, r21	; 0x05
 7dc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially zero
 7de:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL)&&Copy_u8Pin<=DIO_u8PIN_7)//check if ptr not null and correct input pin
 7e0:	8c 81       	ldd	r24, Y+4	; 0x04
 7e2:	9d 81       	ldd	r25, Y+5	; 0x05
 7e4:	00 97       	sbiw	r24, 0x00	; 0
 7e6:	09 f4       	brne	.+2      	; 0x7ea <DIO_u8GetPinValue+0x28>
 7e8:	78 c0       	rjmp	.+240    	; 0x8da <__stack+0x7b>
 7ea:	8b 81       	ldd	r24, Y+3	; 0x03
 7ec:	88 30       	cpi	r24, 0x08	; 8
 7ee:	08 f0       	brcs	.+2      	; 0x7f2 <DIO_u8GetPinValue+0x30>
 7f0:	74 c0       	rjmp	.+232    	; 0x8da <__stack+0x7b>
	{
		switch(Copy_u8Port)
 7f2:	8a 81       	ldd	r24, Y+2	; 0x02
 7f4:	28 2f       	mov	r18, r24
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	3f 83       	std	Y+7, r19	; 0x07
 7fa:	2e 83       	std	Y+6, r18	; 0x06
 7fc:	4e 81       	ldd	r20, Y+6	; 0x06
 7fe:	5f 81       	ldd	r21, Y+7	; 0x07
 800:	41 30       	cpi	r20, 0x01	; 1
 802:	51 05       	cpc	r21, r1
 804:	59 f1       	breq	.+86     	; 0x85c <DIO_u8GetPinValue+0x9a>
 806:	8e 81       	ldd	r24, Y+6	; 0x06
 808:	9f 81       	ldd	r25, Y+7	; 0x07
 80a:	82 30       	cpi	r24, 0x02	; 2
 80c:	91 05       	cpc	r25, r1
 80e:	34 f4       	brge	.+12     	; 0x81c <DIO_u8GetPinValue+0x5a>
 810:	2e 81       	ldd	r18, Y+6	; 0x06
 812:	3f 81       	ldd	r19, Y+7	; 0x07
 814:	21 15       	cp	r18, r1
 816:	31 05       	cpc	r19, r1
 818:	69 f0       	breq	.+26     	; 0x834 <DIO_u8GetPinValue+0x72>
 81a:	5c c0       	rjmp	.+184    	; 0x8d4 <__stack+0x75>
 81c:	4e 81       	ldd	r20, Y+6	; 0x06
 81e:	5f 81       	ldd	r21, Y+7	; 0x07
 820:	42 30       	cpi	r20, 0x02	; 2
 822:	51 05       	cpc	r21, r1
 824:	79 f1       	breq	.+94     	; 0x884 <__stack+0x25>
 826:	8e 81       	ldd	r24, Y+6	; 0x06
 828:	9f 81       	ldd	r25, Y+7	; 0x07
 82a:	83 30       	cpi	r24, 0x03	; 3
 82c:	91 05       	cpc	r25, r1
 82e:	09 f4       	brne	.+2      	; 0x832 <DIO_u8GetPinValue+0x70>
 830:	3d c0       	rjmp	.+122    	; 0x8ac <__stack+0x4d>
 832:	50 c0       	rjmp	.+160    	; 0x8d4 <__stack+0x75>
		{
			case DIO_u8PORTA:
			*Copy_pu8Value=GET_BIT(PINA_reg,Copy_u8Pin);
 834:	e9 e3       	ldi	r30, 0x39	; 57
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	28 2f       	mov	r18, r24
 83c:	30 e0       	ldi	r19, 0x00	; 0
 83e:	8b 81       	ldd	r24, Y+3	; 0x03
 840:	88 2f       	mov	r24, r24
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	a9 01       	movw	r20, r18
 846:	02 c0       	rjmp	.+4      	; 0x84c <DIO_u8GetPinValue+0x8a>
 848:	55 95       	asr	r21
 84a:	47 95       	ror	r20
 84c:	8a 95       	dec	r24
 84e:	e2 f7       	brpl	.-8      	; 0x848 <DIO_u8GetPinValue+0x86>
 850:	ca 01       	movw	r24, r20
 852:	81 70       	andi	r24, 0x01	; 1
 854:	ec 81       	ldd	r30, Y+4	; 0x04
 856:	fd 81       	ldd	r31, Y+5	; 0x05
 858:	80 83       	st	Z, r24
 85a:	41 c0       	rjmp	.+130    	; 0x8de <__stack+0x7f>
			break;
			
			case DIO_u8PORTB:
			*Copy_pu8Value=GET_BIT(PINB_reg,Copy_u8Pin);
 85c:	e6 e3       	ldi	r30, 0x36	; 54
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	80 81       	ld	r24, Z
 862:	28 2f       	mov	r18, r24
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	8b 81       	ldd	r24, Y+3	; 0x03
 868:	88 2f       	mov	r24, r24
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	a9 01       	movw	r20, r18
 86e:	02 c0       	rjmp	.+4      	; 0x874 <__stack+0x15>
 870:	55 95       	asr	r21
 872:	47 95       	ror	r20
 874:	8a 95       	dec	r24
 876:	e2 f7       	brpl	.-8      	; 0x870 <__stack+0x11>
 878:	ca 01       	movw	r24, r20
 87a:	81 70       	andi	r24, 0x01	; 1
 87c:	ec 81       	ldd	r30, Y+4	; 0x04
 87e:	fd 81       	ldd	r31, Y+5	; 0x05
 880:	80 83       	st	Z, r24
 882:	2d c0       	rjmp	.+90     	; 0x8de <__stack+0x7f>
			break;
			
			case DIO_u8PORTC:
			*Copy_pu8Value=GET_BIT(PINC_reg,Copy_u8Pin);
 884:	e3 e3       	ldi	r30, 0x33	; 51
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	80 81       	ld	r24, Z
 88a:	28 2f       	mov	r18, r24
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	8b 81       	ldd	r24, Y+3	; 0x03
 890:	88 2f       	mov	r24, r24
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	a9 01       	movw	r20, r18
 896:	02 c0       	rjmp	.+4      	; 0x89c <__stack+0x3d>
 898:	55 95       	asr	r21
 89a:	47 95       	ror	r20
 89c:	8a 95       	dec	r24
 89e:	e2 f7       	brpl	.-8      	; 0x898 <__stack+0x39>
 8a0:	ca 01       	movw	r24, r20
 8a2:	81 70       	andi	r24, 0x01	; 1
 8a4:	ec 81       	ldd	r30, Y+4	; 0x04
 8a6:	fd 81       	ldd	r31, Y+5	; 0x05
 8a8:	80 83       	st	Z, r24
 8aa:	19 c0       	rjmp	.+50     	; 0x8de <__stack+0x7f>
			break;
			
			case DIO_u8PORTD:
			*Copy_pu8Value=GET_BIT(PIND_reg,Copy_u8Pin);
 8ac:	e0 e3       	ldi	r30, 0x30	; 48
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	80 81       	ld	r24, Z
 8b2:	28 2f       	mov	r18, r24
 8b4:	30 e0       	ldi	r19, 0x00	; 0
 8b6:	8b 81       	ldd	r24, Y+3	; 0x03
 8b8:	88 2f       	mov	r24, r24
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	a9 01       	movw	r20, r18
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <__stack+0x65>
 8c0:	55 95       	asr	r21
 8c2:	47 95       	ror	r20
 8c4:	8a 95       	dec	r24
 8c6:	e2 f7       	brpl	.-8      	; 0x8c0 <__stack+0x61>
 8c8:	ca 01       	movw	r24, r20
 8ca:	81 70       	andi	r24, 0x01	; 1
 8cc:	ec 81       	ldd	r30, Y+4	; 0x04
 8ce:	fd 81       	ldd	r31, Y+5	; 0x05
 8d0:	80 83       	st	Z, r24
 8d2:	05 c0       	rjmp	.+10     	; 0x8de <__stack+0x7f>
			break;
			
			default:
			Local_u8ErrorState=1;
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	89 83       	std	Y+1, r24	; 0x01
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <__stack+0x7f>
			break;
		}
	}
	else
	{
		Local_u8ErrorState=1;
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 8de:	89 81       	ldd	r24, Y+1	; 0x01
}
 8e0:	27 96       	adiw	r28, 0x07	; 7
 8e2:	0f b6       	in	r0, 0x3f	; 63
 8e4:	f8 94       	cli
 8e6:	de bf       	out	0x3e, r29	; 62
 8e8:	0f be       	out	0x3f, r0	; 63
 8ea:	cd bf       	out	0x3d, r28	; 61
 8ec:	cf 91       	pop	r28
 8ee:	df 91       	pop	r29
 8f0:	08 95       	ret

000008f2 <DIO_u8GetPortValue>:
/*not tested*/
u8 DIO_u8GetPortValue(u8 Copy_u8Port ,u8* Copy_pu8Value)//get value of entire port
{
 8f2:	df 93       	push	r29
 8f4:	cf 93       	push	r28
 8f6:	00 d0       	rcall	.+0      	; 0x8f8 <DIO_u8GetPortValue+0x6>
 8f8:	00 d0       	rcall	.+0      	; 0x8fa <DIO_u8GetPortValue+0x8>
 8fa:	00 d0       	rcall	.+0      	; 0x8fc <DIO_u8GetPortValue+0xa>
 8fc:	cd b7       	in	r28, 0x3d	; 61
 8fe:	de b7       	in	r29, 0x3e	; 62
 900:	8a 83       	std	Y+2, r24	; 0x02
 902:	7c 83       	std	Y+4, r23	; 0x04
 904:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 906:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 908:	8a 81       	ldd	r24, Y+2	; 0x02
 90a:	28 2f       	mov	r18, r24
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	3e 83       	std	Y+6, r19	; 0x06
 910:	2d 83       	std	Y+5, r18	; 0x05
 912:	8d 81       	ldd	r24, Y+5	; 0x05
 914:	9e 81       	ldd	r25, Y+6	; 0x06
 916:	81 30       	cpi	r24, 0x01	; 1
 918:	91 05       	cpc	r25, r1
 91a:	e1 f0       	breq	.+56     	; 0x954 <DIO_u8GetPortValue+0x62>
 91c:	2d 81       	ldd	r18, Y+5	; 0x05
 91e:	3e 81       	ldd	r19, Y+6	; 0x06
 920:	22 30       	cpi	r18, 0x02	; 2
 922:	31 05       	cpc	r19, r1
 924:	2c f4       	brge	.+10     	; 0x930 <DIO_u8GetPortValue+0x3e>
 926:	8d 81       	ldd	r24, Y+5	; 0x05
 928:	9e 81       	ldd	r25, Y+6	; 0x06
 92a:	00 97       	sbiw	r24, 0x00	; 0
 92c:	61 f0       	breq	.+24     	; 0x946 <DIO_u8GetPortValue+0x54>
 92e:	27 c0       	rjmp	.+78     	; 0x97e <DIO_u8GetPortValue+0x8c>
 930:	2d 81       	ldd	r18, Y+5	; 0x05
 932:	3e 81       	ldd	r19, Y+6	; 0x06
 934:	22 30       	cpi	r18, 0x02	; 2
 936:	31 05       	cpc	r19, r1
 938:	a1 f0       	breq	.+40     	; 0x962 <DIO_u8GetPortValue+0x70>
 93a:	8d 81       	ldd	r24, Y+5	; 0x05
 93c:	9e 81       	ldd	r25, Y+6	; 0x06
 93e:	83 30       	cpi	r24, 0x03	; 3
 940:	91 05       	cpc	r25, r1
 942:	b1 f0       	breq	.+44     	; 0x970 <DIO_u8GetPortValue+0x7e>
 944:	1c c0       	rjmp	.+56     	; 0x97e <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA:
		*Copy_pu8Value=PINA_reg;
 946:	e9 e3       	ldi	r30, 0x39	; 57
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	eb 81       	ldd	r30, Y+3	; 0x03
 94e:	fc 81       	ldd	r31, Y+4	; 0x04
 950:	80 83       	st	Z, r24
 952:	17 c0       	rjmp	.+46     	; 0x982 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTB:
		*Copy_pu8Value=PINB_reg;
 954:	e6 e3       	ldi	r30, 0x36	; 54
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	80 81       	ld	r24, Z
 95a:	eb 81       	ldd	r30, Y+3	; 0x03
 95c:	fc 81       	ldd	r31, Y+4	; 0x04
 95e:	80 83       	st	Z, r24
 960:	10 c0       	rjmp	.+32     	; 0x982 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTC:
		*Copy_pu8Value=PINC_reg;
 962:	e3 e3       	ldi	r30, 0x33	; 51
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	80 81       	ld	r24, Z
 968:	eb 81       	ldd	r30, Y+3	; 0x03
 96a:	fc 81       	ldd	r31, Y+4	; 0x04
 96c:	80 83       	st	Z, r24
 96e:	09 c0       	rjmp	.+18     	; 0x982 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTD:
		*Copy_pu8Value=PIND_reg;
 970:	e0 e3       	ldi	r30, 0x30	; 48
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	80 81       	ld	r24, Z
 976:	eb 81       	ldd	r30, Y+3	; 0x03
 978:	fc 81       	ldd	r31, Y+4	; 0x04
 97a:	80 83       	st	Z, r24
 97c:	02 c0       	rjmp	.+4      	; 0x982 <DIO_u8GetPortValue+0x90>
		break;
	default:
		Local_u8ErrorState=1;
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 982:	89 81       	ldd	r24, Y+1	; 0x01
}
 984:	26 96       	adiw	r28, 0x06	; 6
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	f8 94       	cli
 98a:	de bf       	out	0x3e, r29	; 62
 98c:	0f be       	out	0x3f, r0	; 63
 98e:	cd bf       	out	0x3d, r28	; 61
 990:	cf 91       	pop	r28
 992:	df 91       	pop	r29
 994:	08 95       	ret

00000996 <GIE_VoidEnable>:
#include "GIE_config.h"
#include "GIE_private.h"


void GIE_VoidEnable (void)
{
 996:	df 93       	push	r29
 998:	cf 93       	push	r28
 99a:	cd b7       	in	r28, 0x3d	; 61
 99c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I_BIT);
 99e:	af e5       	ldi	r26, 0x5F	; 95
 9a0:	b0 e0       	ldi	r27, 0x00	; 0
 9a2:	ef e5       	ldi	r30, 0x5F	; 95
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	80 81       	ld	r24, Z
 9a8:	80 68       	ori	r24, 0x80	; 128
 9aa:	8c 93       	st	X, r24
}
 9ac:	cf 91       	pop	r28
 9ae:	df 91       	pop	r29
 9b0:	08 95       	ret

000009b2 <GIE_VoidDisable>:


void GIE_VoidDisable (void)
{
 9b2:	df 93       	push	r29
 9b4:	cf 93       	push	r28
 9b6:	cd b7       	in	r28, 0x3d	; 61
 9b8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I_BIT);
 9ba:	af e5       	ldi	r26, 0x5F	; 95
 9bc:	b0 e0       	ldi	r27, 0x00	; 0
 9be:	ef e5       	ldi	r30, 0x5F	; 95
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	80 81       	ld	r24, Z
 9c4:	8f 77       	andi	r24, 0x7F	; 127
 9c6:	8c 93       	st	X, r24
 9c8:	cf 91       	pop	r28
 9ca:	df 91       	pop	r29
 9cc:	08 95       	ret

000009ce <PORT_VoidInit>:
#include"PORT_interface.h"
#include"PORT_config.h"
#include"PORT_private.h"
#include"PORT_register.h"
void PORT_VoidInit()
{
 9ce:	df 93       	push	r29
 9d0:	cf 93       	push	r28
 9d2:	cd b7       	in	r28, 0x3d	; 61
 9d4:	de b7       	in	r29, 0x3e	; 62
	DDRA_reg=PORTA_DIR;
 9d6:	ea e3       	ldi	r30, 0x3A	; 58
 9d8:	f0 e0       	ldi	r31, 0x00	; 0
 9da:	80 ef       	ldi	r24, 0xF0	; 240
 9dc:	80 83       	st	Z, r24
	DDRB_reg=PORTB_DIR;
 9de:	e7 e3       	ldi	r30, 0x37	; 55
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	8f ef       	ldi	r24, 0xFF	; 255
 9e4:	80 83       	st	Z, r24
	DDRC_reg=PORTC_DIR;
 9e6:	e4 e3       	ldi	r30, 0x34	; 52
 9e8:	f0 e0       	ldi	r31, 0x00	; 0
 9ea:	87 e0       	ldi	r24, 0x07	; 7
 9ec:	80 83       	st	Z, r24
	DDRD_reg=PORTD_DIR;
 9ee:	e1 e3       	ldi	r30, 0x31	; 49
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	83 ef       	ldi	r24, 0xF3	; 243
 9f4:	80 83       	st	Z, r24
	
	PORTA_reg=PORTA_InitValue;
 9f6:	eb e3       	ldi	r30, 0x3B	; 59
 9f8:	f0 e0       	ldi	r31, 0x00	; 0
 9fa:	8f ef       	ldi	r24, 0xFF	; 255
 9fc:	80 83       	st	Z, r24
    PORTB_reg=PORTB_InitValue;
 9fe:	e8 e3       	ldi	r30, 0x38	; 56
 a00:	f0 e0       	ldi	r31, 0x00	; 0
 a02:	10 82       	st	Z, r1
    PORTC_reg=PORTC_InitValue;
 a04:	e5 e3       	ldi	r30, 0x35	; 53
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	10 82       	st	Z, r1
    PORTD_reg=PORTD_InitValue;
 a0a:	e2 e3       	ldi	r30, 0x32	; 50
 a0c:	f0 e0       	ldi	r31, 0x00	; 0
 a0e:	8c e0       	ldi	r24, 0x0C	; 12
 a10:	80 83       	st	Z, r24
}
 a12:	cf 91       	pop	r28
 a14:	df 91       	pop	r29
 a16:	08 95       	ret

00000a18 <TIMER0_VoidInitSync>:

void (*Timer0_Notif)(void)=NULL;

u8 Global_u8State=IDLE;
void TIMER0_VoidInitSync()
{
 a18:	df 93       	push	r29
 a1a:	cf 93       	push	r28
 a1c:	cd b7       	in	r28, 0x3d	; 61
 a1e:	de b7       	in	r29, 0x3e	; 62
	#else
	#error "Error in mode selection"
	#endif

		/*set OC0 Action*/
		TCCR0&=COM_OutputModeBitMask;
 a20:	a3 e5       	ldi	r26, 0x53	; 83
 a22:	b0 e0       	ldi	r27, 0x00	; 0
 a24:	e3 e5       	ldi	r30, 0x53	; 83
 a26:	f0 e0       	ldi	r31, 0x00	; 0
 a28:	80 81       	ld	r24, Z
 a2a:	8f 7c       	andi	r24, 0xCF	; 207
 a2c:	8c 93       	st	X, r24
		TCCR0|=OC0_action;
 a2e:	a3 e5       	ldi	r26, 0x53	; 83
 a30:	b0 e0       	ldi	r27, 0x00	; 0
 a32:	e3 e5       	ldi	r30, 0x53	; 83
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	80 81       	ld	r24, Z
 a38:	80 62       	ori	r24, 0x20	; 32
 a3a:	8c 93       	st	X, r24
}
 a3c:	cf 91       	pop	r28
 a3e:	df 91       	pop	r29
 a40:	08 95       	ret

00000a42 <TIMER0_u8WaitSync>:


u8 TIMER0_u8WaitSync(u8 Copy_u8RegisterValue,u32 Copy_u32Counts)
{
 a42:	df 93       	push	r29
 a44:	cf 93       	push	r28
 a46:	cd b7       	in	r28, 0x3d	; 61
 a48:	de b7       	in	r29, 0x3e	; 62
 a4a:	27 97       	sbiw	r28, 0x07	; 7
 a4c:	0f b6       	in	r0, 0x3f	; 63
 a4e:	f8 94       	cli
 a50:	de bf       	out	0x3e, r29	; 62
 a52:	0f be       	out	0x3f, r0	; 63
 a54:	cd bf       	out	0x3d, r28	; 61
 a56:	8a 83       	std	Y+2, r24	; 0x02
 a58:	4b 83       	std	Y+3, r20	; 0x03
 a5a:	5c 83       	std	Y+4, r21	; 0x04
 a5c:	6d 83       	std	Y+5, r22	; 0x05
 a5e:	7e 83       	std	Y+6, r23	; 0x06
	u8 Local_u8ErrorState=OK;
 a60:	19 82       	std	Y+1, r1	; 0x01
	if (Global_u8State==BUSY)
 a62:	80 91 60 00 	lds	r24, 0x0060
 a66:	88 23       	and	r24, r24
 a68:	19 f4       	brne	.+6      	; 0xa70 <TIMER0_u8WaitSync+0x2e>
	{
		Local_u8ErrorState=BUSY_FUNC;
 a6a:	84 e0       	ldi	r24, 0x04	; 4
 a6c:	89 83       	std	Y+1, r24	; 0x01
 a6e:	14 c0       	rjmp	.+40     	; 0xa98 <TIMER0_u8WaitSync+0x56>
	}
	else
	{
		/*set state to BUSY to avoid calling the function by interrupts while working in it*/
		Global_u8State=BUSY;
 a70:	10 92 60 00 	sts	0x0060, r1
		#else
#error "Error in mode selection"
#endif

		/*turn timer off*/
		TCCR0&=CLK_SourceBitMask;
 a74:	a3 e5       	ldi	r26, 0x53	; 83
 a76:	b0 e0       	ldi	r27, 0x00	; 0
 a78:	e3 e5       	ldi	r30, 0x53	; 83
 a7a:	f0 e0       	ldi	r31, 0x00	; 0
 a7c:	80 81       	ld	r24, Z
 a7e:	88 7f       	andi	r24, 0xF8	; 248
 a80:	8c 93       	st	X, r24
		TCCR0|=OFF;
 a82:	a3 e5       	ldi	r26, 0x53	; 83
 a84:	b0 e0       	ldi	r27, 0x00	; 0
 a86:	e3 e5       	ldi	r30, 0x53	; 83
 a88:	f0 e0       	ldi	r31, 0x00	; 0
 a8a:	80 81       	ld	r24, Z
 a8c:	8c 93       	st	X, r24

		/*reset state to be called again*/
		Global_u8State=IDLE;
 a8e:	81 e0       	ldi	r24, 0x01	; 1
 a90:	80 93 60 00 	sts	0x0060, r24
		return Local_u8ErrorState;
 a94:	89 81       	ldd	r24, Y+1	; 0x01
 a96:	8f 83       	std	Y+7, r24	; 0x07
	}
}
 a98:	8f 81       	ldd	r24, Y+7	; 0x07
 a9a:	27 96       	adiw	r28, 0x07	; 7
 a9c:	0f b6       	in	r0, 0x3f	; 63
 a9e:	f8 94       	cli
 aa0:	de bf       	out	0x3e, r29	; 62
 aa2:	0f be       	out	0x3f, r0	; 63
 aa4:	cd bf       	out	0x3d, r28	; 61
 aa6:	cf 91       	pop	r28
 aa8:	df 91       	pop	r29
 aaa:	08 95       	ret

00000aac <TIMER0_VoidInitAsync>:
/***************************************************************/
void TIMER0_VoidInitAsync(u8 Copy_u8RegisterValue)
{
 aac:	df 93       	push	r29
 aae:	cf 93       	push	r28
 ab0:	0f 92       	push	r0
 ab2:	cd b7       	in	r28, 0x3d	; 61
 ab4:	de b7       	in	r29, 0x3e	; 62
 ab6:	89 83       	std	Y+1, r24	; 0x01
		TCCR0|=TIMER0_1ClkSource;

#elif MODE==FastPWM_MODE

		/*choose Fast PWM MODE*/
		SET_BIT(TCCR0,TCCR0_WGM01);
 ab8:	a3 e5       	ldi	r26, 0x53	; 83
 aba:	b0 e0       	ldi	r27, 0x00	; 0
 abc:	e3 e5       	ldi	r30, 0x53	; 83
 abe:	f0 e0       	ldi	r31, 0x00	; 0
 ac0:	80 81       	ld	r24, Z
 ac2:	88 60       	ori	r24, 0x08	; 8
 ac4:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM00);
 ac6:	a3 e5       	ldi	r26, 0x53	; 83
 ac8:	b0 e0       	ldi	r27, 0x00	; 0
 aca:	e3 e5       	ldi	r30, 0x53	; 83
 acc:	f0 e0       	ldi	r31, 0x00	; 0
 ace:	80 81       	ld	r24, Z
 ad0:	80 64       	ori	r24, 0x40	; 64
 ad2:	8c 93       	st	X, r24

		/*Save output compare value*/
		OCR0=Copy_u8RegisterValue;
 ad4:	ec e5       	ldi	r30, 0x5C	; 92
 ad6:	f0 e0       	ldi	r31, 0x00	; 0
 ad8:	89 81       	ldd	r24, Y+1	; 0x01
 ada:	80 83       	st	Z, r24

		/*choose OC0 behavior*/
		TCCR0&=COM_OutputModeBitMask;
 adc:	a3 e5       	ldi	r26, 0x53	; 83
 ade:	b0 e0       	ldi	r27, 0x00	; 0
 ae0:	e3 e5       	ldi	r30, 0x53	; 83
 ae2:	f0 e0       	ldi	r31, 0x00	; 0
 ae4:	80 81       	ld	r24, Z
 ae6:	8f 7c       	andi	r24, 0xCF	; 207
 ae8:	8c 93       	st	X, r24
		TCCR0|=OC0_action;
 aea:	a3 e5       	ldi	r26, 0x53	; 83
 aec:	b0 e0       	ldi	r27, 0x00	; 0
 aee:	e3 e5       	ldi	r30, 0x53	; 83
 af0:	f0 e0       	ldi	r31, 0x00	; 0
 af2:	80 81       	ld	r24, Z
 af4:	80 62       	ori	r24, 0x20	; 32
 af6:	8c 93       	st	X, r24

		/*choose prescaler*/
		TCCR0&=CLK_SourceBitMask;
 af8:	a3 e5       	ldi	r26, 0x53	; 83
 afa:	b0 e0       	ldi	r27, 0x00	; 0
 afc:	e3 e5       	ldi	r30, 0x53	; 83
 afe:	f0 e0       	ldi	r31, 0x00	; 0
 b00:	80 81       	ld	r24, Z
 b02:	88 7f       	andi	r24, 0xF8	; 248
 b04:	8c 93       	st	X, r24
		TCCR0|=TIMER0_1ClkSource;
 b06:	a3 e5       	ldi	r26, 0x53	; 83
 b08:	b0 e0       	ldi	r27, 0x00	; 0
 b0a:	e3 e5       	ldi	r30, 0x53	; 83
 b0c:	f0 e0       	ldi	r31, 0x00	; 0
 b0e:	80 81       	ld	r24, Z
 b10:	84 60       	ori	r24, 0x04	; 4
 b12:	8c 93       	st	X, r24
#error "Error in mode selection"
#endif



}
 b14:	0f 90       	pop	r0
 b16:	cf 91       	pop	r28
 b18:	df 91       	pop	r29
 b1a:	08 95       	ret

00000b1c <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void (*Copy_pvNotif)(void))//used in every mode of operation
{
 b1c:	df 93       	push	r29
 b1e:	cf 93       	push	r28
 b20:	00 d0       	rcall	.+0      	; 0xb22 <TIMER0_u8SetCallBack+0x6>
 b22:	0f 92       	push	r0
 b24:	cd b7       	in	r28, 0x3d	; 61
 b26:	de b7       	in	r29, 0x3e	; 62
 b28:	9b 83       	std	Y+3, r25	; 0x03
 b2a:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ErrorState=OK;
 b2c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvNotif!=NULL)
 b2e:	8a 81       	ldd	r24, Y+2	; 0x02
 b30:	9b 81       	ldd	r25, Y+3	; 0x03
 b32:	00 97       	sbiw	r24, 0x00	; 0
 b34:	39 f0       	breq	.+14     	; 0xb44 <TIMER0_u8SetCallBack+0x28>
	{
		Timer0_Notif=Copy_pvNotif;
 b36:	8a 81       	ldd	r24, Y+2	; 0x02
 b38:	9b 81       	ldd	r25, Y+3	; 0x03
 b3a:	90 93 6f 00 	sts	0x006F, r25
 b3e:	80 93 6e 00 	sts	0x006E, r24
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
 b44:	82 e0       	ldi	r24, 0x02	; 2
 b46:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 b48:	89 81       	ldd	r24, Y+1	; 0x01
}
 b4a:	0f 90       	pop	r0
 b4c:	0f 90       	pop	r0
 b4e:	0f 90       	pop	r0
 b50:	cf 91       	pop	r28
 b52:	df 91       	pop	r29
 b54:	08 95       	ret

00000b56 <__vector_10>:
void __vector_10(void) __attribute__((signal));//compare match interrupt
void __vector_10()
{
 b56:	1f 92       	push	r1
 b58:	0f 92       	push	r0
 b5a:	0f b6       	in	r0, 0x3f	; 63
 b5c:	0f 92       	push	r0
 b5e:	11 24       	eor	r1, r1
 b60:	2f 93       	push	r18
 b62:	3f 93       	push	r19
 b64:	4f 93       	push	r20
 b66:	5f 93       	push	r21
 b68:	6f 93       	push	r22
 b6a:	7f 93       	push	r23
 b6c:	8f 93       	push	r24
 b6e:	9f 93       	push	r25
 b70:	af 93       	push	r26
 b72:	bf 93       	push	r27
 b74:	ef 93       	push	r30
 b76:	ff 93       	push	r31
 b78:	df 93       	push	r29
 b7a:	cf 93       	push	r28
 b7c:	cd b7       	in	r28, 0x3d	; 61
 b7e:	de b7       	in	r29, 0x3e	; 62

	if(Timer0_Notif!=NULL)
 b80:	80 91 6e 00 	lds	r24, 0x006E
 b84:	90 91 6f 00 	lds	r25, 0x006F
 b88:	00 97       	sbiw	r24, 0x00	; 0
 b8a:	29 f0       	breq	.+10     	; 0xb96 <__vector_10+0x40>
	{
		Timer0_Notif();
 b8c:	e0 91 6e 00 	lds	r30, 0x006E
 b90:	f0 91 6f 00 	lds	r31, 0x006F
 b94:	09 95       	icall
	}
}
 b96:	cf 91       	pop	r28
 b98:	df 91       	pop	r29
 b9a:	ff 91       	pop	r31
 b9c:	ef 91       	pop	r30
 b9e:	bf 91       	pop	r27
 ba0:	af 91       	pop	r26
 ba2:	9f 91       	pop	r25
 ba4:	8f 91       	pop	r24
 ba6:	7f 91       	pop	r23
 ba8:	6f 91       	pop	r22
 baa:	5f 91       	pop	r21
 bac:	4f 91       	pop	r20
 bae:	3f 91       	pop	r19
 bb0:	2f 91       	pop	r18
 bb2:	0f 90       	pop	r0
 bb4:	0f be       	out	0x3f, r0	; 63
 bb6:	0f 90       	pop	r0
 bb8:	1f 90       	pop	r1
 bba:	18 95       	reti

00000bbc <__vector_11>:
void __vector_11(void) __attribute__((signal));//overflow interrupt
void __vector_11()
{
 bbc:	1f 92       	push	r1
 bbe:	0f 92       	push	r0
 bc0:	0f b6       	in	r0, 0x3f	; 63
 bc2:	0f 92       	push	r0
 bc4:	11 24       	eor	r1, r1
 bc6:	2f 93       	push	r18
 bc8:	3f 93       	push	r19
 bca:	4f 93       	push	r20
 bcc:	5f 93       	push	r21
 bce:	6f 93       	push	r22
 bd0:	7f 93       	push	r23
 bd2:	8f 93       	push	r24
 bd4:	9f 93       	push	r25
 bd6:	af 93       	push	r26
 bd8:	bf 93       	push	r27
 bda:	ef 93       	push	r30
 bdc:	ff 93       	push	r31
 bde:	df 93       	push	r29
 be0:	cf 93       	push	r28
 be2:	cd b7       	in	r28, 0x3d	; 61
 be4:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_Notif!=NULL)
 be6:	80 91 6e 00 	lds	r24, 0x006E
 bea:	90 91 6f 00 	lds	r25, 0x006F
 bee:	00 97       	sbiw	r24, 0x00	; 0
 bf0:	29 f0       	breq	.+10     	; 0xbfc <__vector_11+0x40>
	{
		Timer0_Notif();
 bf2:	e0 91 6e 00 	lds	r30, 0x006E
 bf6:	f0 91 6f 00 	lds	r31, 0x006F
 bfa:	09 95       	icall
	}
}
 bfc:	cf 91       	pop	r28
 bfe:	df 91       	pop	r29
 c00:	ff 91       	pop	r31
 c02:	ef 91       	pop	r30
 c04:	bf 91       	pop	r27
 c06:	af 91       	pop	r26
 c08:	9f 91       	pop	r25
 c0a:	8f 91       	pop	r24
 c0c:	7f 91       	pop	r23
 c0e:	6f 91       	pop	r22
 c10:	5f 91       	pop	r21
 c12:	4f 91       	pop	r20
 c14:	3f 91       	pop	r19
 c16:	2f 91       	pop	r18
 c18:	0f 90       	pop	r0
 c1a:	0f be       	out	0x3f, r0	; 63
 c1c:	0f 90       	pop	r0
 c1e:	1f 90       	pop	r1
 c20:	18 95       	reti

00000c22 <TIMER0_SetPreload>:
void TIMER0_SetPreload(u8 Copy_u8Preload)
{
 c22:	df 93       	push	r29
 c24:	cf 93       	push	r28
 c26:	0f 92       	push	r0
 c28:	cd b7       	in	r28, 0x3d	; 61
 c2a:	de b7       	in	r29, 0x3e	; 62
 c2c:	89 83       	std	Y+1, r24	; 0x01
#if MODE==Normal_MODE
	TCNT0=Copy_u8Preload;
#endif
}
 c2e:	0f 90       	pop	r0
 c30:	cf 91       	pop	r28
 c32:	df 91       	pop	r29
 c34:	08 95       	ret

00000c36 <TIMER1_VoidInit>:

void TIMER1_VoidInit(u16 Copy_u16TOP)
{
 c36:	df 93       	push	r29
 c38:	cf 93       	push	r28
 c3a:	00 d0       	rcall	.+0      	; 0xc3c <TIMER1_VoidInit+0x6>
 c3c:	cd b7       	in	r28, 0x3d	; 61
 c3e:	de b7       	in	r29, 0x3e	; 62
 c40:	9a 83       	std	Y+2, r25	; 0x02
 c42:	89 83       	std	Y+1, r24	; 0x01
	/*output PWM behavior on Channel A non inverting */
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
 c44:	af e4       	ldi	r26, 0x4F	; 79
 c46:	b0 e0       	ldi	r27, 0x00	; 0
 c48:	ef e4       	ldi	r30, 0x4F	; 79
 c4a:	f0 e0       	ldi	r31, 0x00	; 0
 c4c:	80 81       	ld	r24, Z
 c4e:	80 68       	ori	r24, 0x80	; 128
 c50:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
 c52:	af e4       	ldi	r26, 0x4F	; 79
 c54:	b0 e0       	ldi	r27, 0x00	; 0
 c56:	ef e4       	ldi	r30, 0x4F	; 79
 c58:	f0 e0       	ldi	r31, 0x00	; 0
 c5a:	80 81       	ld	r24, Z
 c5c:	8f 7b       	andi	r24, 0xBF	; 191
 c5e:	8c 93       	st	X, r24

	/*Set mode to FAST PWM with TOP=ICR*/
	SET_BIT(TCCR1A,TCCR1A_WGM11);
 c60:	af e4       	ldi	r26, 0x4F	; 79
 c62:	b0 e0       	ldi	r27, 0x00	; 0
 c64:	ef e4       	ldi	r30, 0x4F	; 79
 c66:	f0 e0       	ldi	r31, 0x00	; 0
 c68:	80 81       	ld	r24, Z
 c6a:	82 60       	ori	r24, 0x02	; 2
 c6c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
 c6e:	ae e4       	ldi	r26, 0x4E	; 78
 c70:	b0 e0       	ldi	r27, 0x00	; 0
 c72:	ee e4       	ldi	r30, 0x4E	; 78
 c74:	f0 e0       	ldi	r31, 0x00	; 0
 c76:	80 81       	ld	r24, Z
 c78:	88 60       	ori	r24, 0x08	; 8
 c7a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
 c7c:	ae e4       	ldi	r26, 0x4E	; 78
 c7e:	b0 e0       	ldi	r27, 0x00	; 0
 c80:	ee e4       	ldi	r30, 0x4E	; 78
 c82:	f0 e0       	ldi	r31, 0x00	; 0
 c84:	80 81       	ld	r24, Z
 c86:	80 61       	ori	r24, 0x10	; 16
 c88:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
 c8a:	af e4       	ldi	r26, 0x4F	; 79
 c8c:	b0 e0       	ldi	r27, 0x00	; 0
 c8e:	ef e4       	ldi	r30, 0x4F	; 79
 c90:	f0 e0       	ldi	r31, 0x00	; 0
 c92:	80 81       	ld	r24, Z
 c94:	8e 7f       	andi	r24, 0xFE	; 254
 c96:	8c 93       	st	X, r24

	/*Set the TOP value in ICR*/
	ICR1=Copy_u16TOP;
 c98:	e6 e4       	ldi	r30, 0x46	; 70
 c9a:	f0 e0       	ldi	r31, 0x00	; 0
 c9c:	89 81       	ldd	r24, Y+1	; 0x01
 c9e:	9a 81       	ldd	r25, Y+2	; 0x02
 ca0:	91 83       	std	Z+1, r25	; 0x01
 ca2:	80 83       	st	Z, r24

	/*Set the prescaler*/
	TCCR1B&=CLK_SourceBitMask;
 ca4:	ae e4       	ldi	r26, 0x4E	; 78
 ca6:	b0 e0       	ldi	r27, 0x00	; 0
 ca8:	ee e4       	ldi	r30, 0x4E	; 78
 caa:	f0 e0       	ldi	r31, 0x00	; 0
 cac:	80 81       	ld	r24, Z
 cae:	88 7f       	andi	r24, 0xF8	; 248
 cb0:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_1ClkSource;
 cb2:	ae e4       	ldi	r26, 0x4E	; 78
 cb4:	b0 e0       	ldi	r27, 0x00	; 0
 cb6:	ee e4       	ldi	r30, 0x4E	; 78
 cb8:	f0 e0       	ldi	r31, 0x00	; 0
 cba:	80 81       	ld	r24, Z
 cbc:	83 60       	ori	r24, 0x03	; 3
 cbe:	8c 93       	st	X, r24
}
 cc0:	0f 90       	pop	r0
 cc2:	0f 90       	pop	r0
 cc4:	cf 91       	pop	r28
 cc6:	df 91       	pop	r29
 cc8:	08 95       	ret

00000cca <TIMER1_VoidSetOCRValue>:
void TIMER1_VoidSetOCRValue(u16 Copy_u16RegisterValue)
{
 cca:	df 93       	push	r29
 ccc:	cf 93       	push	r28
 cce:	00 d0       	rcall	.+0      	; 0xcd0 <TIMER1_VoidSetOCRValue+0x6>
 cd0:	cd b7       	in	r28, 0x3d	; 61
 cd2:	de b7       	in	r29, 0x3e	; 62
 cd4:	9a 83       	std	Y+2, r25	; 0x02
 cd6:	89 83       	std	Y+1, r24	; 0x01
	/*Set the Compare match value in OCR1 of the Channel A*/
		OCR1A=Copy_u16RegisterValue;
 cd8:	ea e4       	ldi	r30, 0x4A	; 74
 cda:	f0 e0       	ldi	r31, 0x00	; 0
 cdc:	89 81       	ldd	r24, Y+1	; 0x01
 cde:	9a 81       	ldd	r25, Y+2	; 0x02
 ce0:	91 83       	std	Z+1, r25	; 0x01
 ce2:	80 83       	st	Z, r24
}
 ce4:	0f 90       	pop	r0
 ce6:	0f 90       	pop	r0
 ce8:	cf 91       	pop	r28
 cea:	df 91       	pop	r29
 cec:	08 95       	ret

00000cee <S32Map>:
#include <util/delay.h>
#include "TIMER_interface.h"
#include "ADC_interface.h"
void ADC_vNotification();
s32 S32Map (s32 S32_X1,s32 S32_X2,s32 S32_Y2,s32 S32_Y1,s32 S32_X)
{
 cee:	af 92       	push	r10
 cf0:	bf 92       	push	r11
 cf2:	cf 92       	push	r12
 cf4:	df 92       	push	r13
 cf6:	ef 92       	push	r14
 cf8:	ff 92       	push	r15
 cfa:	0f 93       	push	r16
 cfc:	1f 93       	push	r17
 cfe:	df 93       	push	r29
 d00:	cf 93       	push	r28
 d02:	cd b7       	in	r28, 0x3d	; 61
 d04:	de b7       	in	r29, 0x3e	; 62
 d06:	60 97       	sbiw	r28, 0x10	; 16
 d08:	0f b6       	in	r0, 0x3f	; 63
 d0a:	f8 94       	cli
 d0c:	de bf       	out	0x3e, r29	; 62
 d0e:	0f be       	out	0x3f, r0	; 63
 d10:	cd bf       	out	0x3d, r28	; 61
 d12:	69 83       	std	Y+1, r22	; 0x01
 d14:	7a 83       	std	Y+2, r23	; 0x02
 d16:	8b 83       	std	Y+3, r24	; 0x03
 d18:	9c 83       	std	Y+4, r25	; 0x04
 d1a:	2d 83       	std	Y+5, r18	; 0x05
 d1c:	3e 83       	std	Y+6, r19	; 0x06
 d1e:	4f 83       	std	Y+7, r20	; 0x07
 d20:	58 87       	std	Y+8, r21	; 0x08
 d22:	e9 86       	std	Y+9, r14	; 0x09
 d24:	fa 86       	std	Y+10, r15	; 0x0a
 d26:	0b 87       	std	Y+11, r16	; 0x0b
 d28:	1c 87       	std	Y+12, r17	; 0x0c
 d2a:	ad 86       	std	Y+13, r10	; 0x0d
 d2c:	be 86       	std	Y+14, r11	; 0x0e
 d2e:	cf 86       	std	Y+15, r12	; 0x0f
 d30:	d8 8a       	std	Y+16, r13	; 0x10
	return (S32_Y1+((S32_X-S32_X1)*(S32_Y2-S32_Y1)/(S32_X2-S32_X1)));
 d32:	2d 8d       	ldd	r18, Y+29	; 0x1d
 d34:	3e 8d       	ldd	r19, Y+30	; 0x1e
 d36:	4f 8d       	ldd	r20, Y+31	; 0x1f
 d38:	58 a1       	ldd	r21, Y+32	; 0x20
 d3a:	89 81       	ldd	r24, Y+1	; 0x01
 d3c:	9a 81       	ldd	r25, Y+2	; 0x02
 d3e:	ab 81       	ldd	r26, Y+3	; 0x03
 d40:	bc 81       	ldd	r27, Y+4	; 0x04
 d42:	79 01       	movw	r14, r18
 d44:	8a 01       	movw	r16, r20
 d46:	e8 1a       	sub	r14, r24
 d48:	f9 0a       	sbc	r15, r25
 d4a:	0a 0b       	sbc	r16, r26
 d4c:	1b 0b       	sbc	r17, r27
 d4e:	29 85       	ldd	r18, Y+9	; 0x09
 d50:	3a 85       	ldd	r19, Y+10	; 0x0a
 d52:	4b 85       	ldd	r20, Y+11	; 0x0b
 d54:	5c 85       	ldd	r21, Y+12	; 0x0c
 d56:	8d 85       	ldd	r24, Y+13	; 0x0d
 d58:	9e 85       	ldd	r25, Y+14	; 0x0e
 d5a:	af 85       	ldd	r26, Y+15	; 0x0f
 d5c:	b8 89       	ldd	r27, Y+16	; 0x10
 d5e:	28 1b       	sub	r18, r24
 d60:	39 0b       	sbc	r19, r25
 d62:	4a 0b       	sbc	r20, r26
 d64:	5b 0b       	sbc	r21, r27
 d66:	c8 01       	movw	r24, r16
 d68:	b7 01       	movw	r22, r14
 d6a:	0e 94 57 07 	call	0xeae	; 0xeae <__mulsi3>
 d6e:	7b 01       	movw	r14, r22
 d70:	8c 01       	movw	r16, r24
 d72:	2d 81       	ldd	r18, Y+5	; 0x05
 d74:	3e 81       	ldd	r19, Y+6	; 0x06
 d76:	4f 81       	ldd	r20, Y+7	; 0x07
 d78:	58 85       	ldd	r21, Y+8	; 0x08
 d7a:	89 81       	ldd	r24, Y+1	; 0x01
 d7c:	9a 81       	ldd	r25, Y+2	; 0x02
 d7e:	ab 81       	ldd	r26, Y+3	; 0x03
 d80:	bc 81       	ldd	r27, Y+4	; 0x04
 d82:	28 1b       	sub	r18, r24
 d84:	39 0b       	sbc	r19, r25
 d86:	4a 0b       	sbc	r20, r26
 d88:	5b 0b       	sbc	r21, r27
 d8a:	c8 01       	movw	r24, r16
 d8c:	b7 01       	movw	r22, r14
 d8e:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodsi4>
 d92:	da 01       	movw	r26, r20
 d94:	c9 01       	movw	r24, r18
 d96:	9c 01       	movw	r18, r24
 d98:	ad 01       	movw	r20, r26
 d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
 d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
 d9e:	af 85       	ldd	r26, Y+15	; 0x0f
 da0:	b8 89       	ldd	r27, Y+16	; 0x10
 da2:	82 0f       	add	r24, r18
 da4:	93 1f       	adc	r25, r19
 da6:	a4 1f       	adc	r26, r20
 da8:	b5 1f       	adc	r27, r21
}
 daa:	bc 01       	movw	r22, r24
 dac:	cd 01       	movw	r24, r26
 dae:	60 96       	adiw	r28, 0x10	; 16
 db0:	0f b6       	in	r0, 0x3f	; 63
 db2:	f8 94       	cli
 db4:	de bf       	out	0x3e, r29	; 62
 db6:	0f be       	out	0x3f, r0	; 63
 db8:	cd bf       	out	0x3d, r28	; 61
 dba:	cf 91       	pop	r28
 dbc:	df 91       	pop	r29
 dbe:	1f 91       	pop	r17
 dc0:	0f 91       	pop	r16
 dc2:	ff 90       	pop	r15
 dc4:	ef 90       	pop	r14
 dc6:	df 90       	pop	r13
 dc8:	cf 90       	pop	r12
 dca:	bf 90       	pop	r11
 dcc:	af 90       	pop	r10
 dce:	08 95       	ret

00000dd0 <main>:
u8 ADC_reading;
void main()
{
 dd0:	df 93       	push	r29
 dd2:	cf 93       	push	r28
 dd4:	cd b7       	in	r28, 0x3d	; 61
 dd6:	de b7       	in	r29, 0x3e	; 62
		PORT_VoidInit();
 dd8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <PORT_VoidInit>
		GIE_VoidEnable();
 ddc:	0e 94 cb 04 	call	0x996	; 0x996 <GIE_VoidEnable>
		ADC_VoidInit();
 de0:	0e 94 49 00 	call	0x92	; 0x92 <ADC_VoidInit>
		TIMER1_VoidInit(3750);
 de4:	86 ea       	ldi	r24, 0xA6	; 166
 de6:	9e e0       	ldi	r25, 0x0E	; 14
 de8:	0e 94 1b 06 	call	0xc36	; 0xc36 <TIMER1_VoidInit>

		while(1)
		{

			ADC_u8GetChannelReadingAsync(0,&ADC_reading,&ADC_vNotification);
 dec:	20 e7       	ldi	r18, 0x70	; 112
 dee:	30 e0       	ldi	r19, 0x00	; 0
 df0:	4f ef       	ldi	r20, 0xFF	; 255
 df2:	56 e0       	ldi	r21, 0x06	; 6
 df4:	80 e0       	ldi	r24, 0x00	; 0
 df6:	b9 01       	movw	r22, r18
 df8:	0e 94 0a 01 	call	0x214	; 0x214 <ADC_u8GetChannelReadingAsync>
 dfc:	f7 cf       	rjmp	.-18     	; 0xdec <main+0x1c>

00000dfe <ADC_vNotification>:
			}*/
		}

}
void ADC_vNotification()
{
 dfe:	af 92       	push	r10
 e00:	bf 92       	push	r11
 e02:	cf 92       	push	r12
 e04:	df 92       	push	r13
 e06:	ef 92       	push	r14
 e08:	ff 92       	push	r15
 e0a:	0f 93       	push	r16
 e0c:	1f 93       	push	r17
 e0e:	df 93       	push	r29
 e10:	cf 93       	push	r28
 e12:	00 d0       	rcall	.+0      	; 0xe14 <ADC_vNotification+0x16>
 e14:	00 d0       	rcall	.+0      	; 0xe16 <ADC_vNotification+0x18>
 e16:	cd b7       	in	r28, 0x3d	; 61
 e18:	de b7       	in	r29, 0x3e	; 62
	s32 map=S32Map (0,255,469,94,ADC_reading);
 e1a:	80 91 70 00 	lds	r24, 0x0070
 e1e:	88 2f       	mov	r24, r24
 e20:	90 e0       	ldi	r25, 0x00	; 0
 e22:	a0 e0       	ldi	r26, 0x00	; 0
 e24:	b0 e0       	ldi	r27, 0x00	; 0
 e26:	00 d0       	rcall	.+0      	; 0xe28 <ADC_vNotification+0x2a>
 e28:	00 d0       	rcall	.+0      	; 0xe2a <ADC_vNotification+0x2c>
 e2a:	ed b7       	in	r30, 0x3d	; 61
 e2c:	fe b7       	in	r31, 0x3e	; 62
 e2e:	31 96       	adiw	r30, 0x01	; 1
 e30:	80 83       	st	Z, r24
 e32:	91 83       	std	Z+1, r25	; 0x01
 e34:	a2 83       	std	Z+2, r26	; 0x02
 e36:	b3 83       	std	Z+3, r27	; 0x03
 e38:	60 e0       	ldi	r22, 0x00	; 0
 e3a:	70 e0       	ldi	r23, 0x00	; 0
 e3c:	80 e0       	ldi	r24, 0x00	; 0
 e3e:	90 e0       	ldi	r25, 0x00	; 0
 e40:	2f ef       	ldi	r18, 0xFF	; 255
 e42:	30 e0       	ldi	r19, 0x00	; 0
 e44:	40 e0       	ldi	r20, 0x00	; 0
 e46:	50 e0       	ldi	r21, 0x00	; 0
 e48:	0f 2e       	mov	r0, r31
 e4a:	f5 ed       	ldi	r31, 0xD5	; 213
 e4c:	ef 2e       	mov	r14, r31
 e4e:	f1 e0       	ldi	r31, 0x01	; 1
 e50:	ff 2e       	mov	r15, r31
 e52:	f0 e0       	ldi	r31, 0x00	; 0
 e54:	0f 2f       	mov	r16, r31
 e56:	f0 e0       	ldi	r31, 0x00	; 0
 e58:	1f 2f       	mov	r17, r31
 e5a:	f0 2d       	mov	r31, r0
 e5c:	0f 2e       	mov	r0, r31
 e5e:	fe e5       	ldi	r31, 0x5E	; 94
 e60:	af 2e       	mov	r10, r31
 e62:	f0 e0       	ldi	r31, 0x00	; 0
 e64:	bf 2e       	mov	r11, r31
 e66:	f0 e0       	ldi	r31, 0x00	; 0
 e68:	cf 2e       	mov	r12, r31
 e6a:	f0 e0       	ldi	r31, 0x00	; 0
 e6c:	df 2e       	mov	r13, r31
 e6e:	f0 2d       	mov	r31, r0
 e70:	0e 94 77 06 	call	0xcee	; 0xcee <S32Map>
 e74:	0f 90       	pop	r0
 e76:	0f 90       	pop	r0
 e78:	0f 90       	pop	r0
 e7a:	0f 90       	pop	r0
 e7c:	dc 01       	movw	r26, r24
 e7e:	cb 01       	movw	r24, r22
 e80:	89 83       	std	Y+1, r24	; 0x01
 e82:	9a 83       	std	Y+2, r25	; 0x02
 e84:	ab 83       	std	Y+3, r26	; 0x03
 e86:	bc 83       	std	Y+4, r27	; 0x04
	TIMER1_VoidSetOCRValue(map);
 e88:	89 81       	ldd	r24, Y+1	; 0x01
 e8a:	9a 81       	ldd	r25, Y+2	; 0x02
 e8c:	0e 94 65 06 	call	0xcca	; 0xcca <TIMER1_VoidSetOCRValue>
}
 e90:	0f 90       	pop	r0
 e92:	0f 90       	pop	r0
 e94:	0f 90       	pop	r0
 e96:	0f 90       	pop	r0
 e98:	cf 91       	pop	r28
 e9a:	df 91       	pop	r29
 e9c:	1f 91       	pop	r17
 e9e:	0f 91       	pop	r16
 ea0:	ff 90       	pop	r15
 ea2:	ef 90       	pop	r14
 ea4:	df 90       	pop	r13
 ea6:	cf 90       	pop	r12
 ea8:	bf 90       	pop	r11
 eaa:	af 90       	pop	r10
 eac:	08 95       	ret

00000eae <__mulsi3>:
 eae:	62 9f       	mul	r22, r18
 eb0:	d0 01       	movw	r26, r0
 eb2:	73 9f       	mul	r23, r19
 eb4:	f0 01       	movw	r30, r0
 eb6:	82 9f       	mul	r24, r18
 eb8:	e0 0d       	add	r30, r0
 eba:	f1 1d       	adc	r31, r1
 ebc:	64 9f       	mul	r22, r20
 ebe:	e0 0d       	add	r30, r0
 ec0:	f1 1d       	adc	r31, r1
 ec2:	92 9f       	mul	r25, r18
 ec4:	f0 0d       	add	r31, r0
 ec6:	83 9f       	mul	r24, r19
 ec8:	f0 0d       	add	r31, r0
 eca:	74 9f       	mul	r23, r20
 ecc:	f0 0d       	add	r31, r0
 ece:	65 9f       	mul	r22, r21
 ed0:	f0 0d       	add	r31, r0
 ed2:	99 27       	eor	r25, r25
 ed4:	72 9f       	mul	r23, r18
 ed6:	b0 0d       	add	r27, r0
 ed8:	e1 1d       	adc	r30, r1
 eda:	f9 1f       	adc	r31, r25
 edc:	63 9f       	mul	r22, r19
 ede:	b0 0d       	add	r27, r0
 ee0:	e1 1d       	adc	r30, r1
 ee2:	f9 1f       	adc	r31, r25
 ee4:	bd 01       	movw	r22, r26
 ee6:	cf 01       	movw	r24, r30
 ee8:	11 24       	eor	r1, r1
 eea:	08 95       	ret

00000eec <__divmodsi4>:
 eec:	97 fb       	bst	r25, 7
 eee:	09 2e       	mov	r0, r25
 ef0:	05 26       	eor	r0, r21
 ef2:	0e d0       	rcall	.+28     	; 0xf10 <__divmodsi4_neg1>
 ef4:	57 fd       	sbrc	r21, 7
 ef6:	04 d0       	rcall	.+8      	; 0xf00 <__divmodsi4_neg2>
 ef8:	14 d0       	rcall	.+40     	; 0xf22 <__udivmodsi4>
 efa:	0a d0       	rcall	.+20     	; 0xf10 <__divmodsi4_neg1>
 efc:	00 1c       	adc	r0, r0
 efe:	38 f4       	brcc	.+14     	; 0xf0e <__divmodsi4_exit>

00000f00 <__divmodsi4_neg2>:
 f00:	50 95       	com	r21
 f02:	40 95       	com	r20
 f04:	30 95       	com	r19
 f06:	21 95       	neg	r18
 f08:	3f 4f       	sbci	r19, 0xFF	; 255
 f0a:	4f 4f       	sbci	r20, 0xFF	; 255
 f0c:	5f 4f       	sbci	r21, 0xFF	; 255

00000f0e <__divmodsi4_exit>:
 f0e:	08 95       	ret

00000f10 <__divmodsi4_neg1>:
 f10:	f6 f7       	brtc	.-4      	; 0xf0e <__divmodsi4_exit>
 f12:	90 95       	com	r25
 f14:	80 95       	com	r24
 f16:	70 95       	com	r23
 f18:	61 95       	neg	r22
 f1a:	7f 4f       	sbci	r23, 0xFF	; 255
 f1c:	8f 4f       	sbci	r24, 0xFF	; 255
 f1e:	9f 4f       	sbci	r25, 0xFF	; 255
 f20:	08 95       	ret

00000f22 <__udivmodsi4>:
 f22:	a1 e2       	ldi	r26, 0x21	; 33
 f24:	1a 2e       	mov	r1, r26
 f26:	aa 1b       	sub	r26, r26
 f28:	bb 1b       	sub	r27, r27
 f2a:	fd 01       	movw	r30, r26
 f2c:	0d c0       	rjmp	.+26     	; 0xf48 <__udivmodsi4_ep>

00000f2e <__udivmodsi4_loop>:
 f2e:	aa 1f       	adc	r26, r26
 f30:	bb 1f       	adc	r27, r27
 f32:	ee 1f       	adc	r30, r30
 f34:	ff 1f       	adc	r31, r31
 f36:	a2 17       	cp	r26, r18
 f38:	b3 07       	cpc	r27, r19
 f3a:	e4 07       	cpc	r30, r20
 f3c:	f5 07       	cpc	r31, r21
 f3e:	20 f0       	brcs	.+8      	; 0xf48 <__udivmodsi4_ep>
 f40:	a2 1b       	sub	r26, r18
 f42:	b3 0b       	sbc	r27, r19
 f44:	e4 0b       	sbc	r30, r20
 f46:	f5 0b       	sbc	r31, r21

00000f48 <__udivmodsi4_ep>:
 f48:	66 1f       	adc	r22, r22
 f4a:	77 1f       	adc	r23, r23
 f4c:	88 1f       	adc	r24, r24
 f4e:	99 1f       	adc	r25, r25
 f50:	1a 94       	dec	r1
 f52:	69 f7       	brne	.-38     	; 0xf2e <__udivmodsi4_loop>
 f54:	60 95       	com	r22
 f56:	70 95       	com	r23
 f58:	80 95       	com	r24
 f5a:	90 95       	com	r25
 f5c:	9b 01       	movw	r18, r22
 f5e:	ac 01       	movw	r20, r24
 f60:	bd 01       	movw	r22, r26
 f62:	cf 01       	movw	r24, r30
 f64:	08 95       	ret

00000f66 <_exit>:
 f66:	f8 94       	cli

00000f68 <__stop_program>:
 f68:	ff cf       	rjmp	.-2      	; 0xf68 <__stop_program>
