
project16_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b70  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000be4  2**0
                  ALLOC
  2 .stab         000012a8  00000000  00000000  00000be4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a80  00000000  00000000  00001e8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__vector_1>
   8:	0c 94 cc 04 	jmp	0x998	; 0x998 <__vector_2>
   c:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 68 05 	call	0xad0	; 0xad0 <main>
  74:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8SetPinValue>:
/******************************************************************************/
/***********************Setting pin value**************************************/
/******************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin,u8 Copy_u8Value)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	28 97       	sbiw	r28, 0x08	; 8
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	6b 83       	std	Y+3, r22	; 0x03
  94:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially zero
  96:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN_7)
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_u8SetPinValue+0x24>
  9e:	ed c0       	rjmp	.+474    	; 0x27a <DIO_u8SetPinValue+0x1fe>
	{
		if (Copy_u8Value)//if value is 1 SET the required PIN
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	88 23       	and	r24, r24
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_u8SetPinValue+0x2c>
  a6:	72 c0       	rjmp	.+228    	; 0x18c <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	38 87       	std	Y+8, r19	; 0x08
  b0:	2f 83       	std	Y+7, r18	; 0x07
  b2:	8f 81       	ldd	r24, Y+7	; 0x07
  b4:	98 85       	ldd	r25, Y+8	; 0x08
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	91 05       	cpc	r25, r1
  ba:	49 f1       	breq	.+82     	; 0x10e <DIO_u8SetPinValue+0x92>
  bc:	2f 81       	ldd	r18, Y+7	; 0x07
  be:	38 85       	ldd	r19, Y+8	; 0x08
  c0:	22 30       	cpi	r18, 0x02	; 2
  c2:	31 05       	cpc	r19, r1
  c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_u8SetPinValue+0x54>
  c6:	8f 81       	ldd	r24, Y+7	; 0x07
  c8:	98 85       	ldd	r25, Y+8	; 0x08
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	61 f0       	breq	.+24     	; 0xe6 <DIO_u8SetPinValue+0x6a>
  ce:	5b c0       	rjmp	.+182    	; 0x186 <DIO_u8SetPinValue+0x10a>
  d0:	2f 81       	ldd	r18, Y+7	; 0x07
  d2:	38 85       	ldd	r19, Y+8	; 0x08
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	71 f1       	breq	.+92     	; 0x136 <DIO_u8SetPinValue+0xba>
  da:	8f 81       	ldd	r24, Y+7	; 0x07
  dc:	98 85       	ldd	r25, Y+8	; 0x08
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	e9 f1       	breq	.+122    	; 0x15e <DIO_u8SetPinValue+0xe2>
  e4:	50 c0       	rjmp	.+160    	; 0x186 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA:
				SET_BIT(PORTA_reg,Copy_u8Pin);
  e6:	ab e3       	ldi	r26, 0x3B	; 59
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	eb e3       	ldi	r30, 0x3B	; 59
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	48 2f       	mov	r20, r24
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 2e       	mov	r0, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_u8SetPinValue+0x88>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_u8SetPinValue+0x84>
 108:	84 2b       	or	r24, r20
 10a:	8c 93       	st	X, r24
 10c:	b8 c0       	rjmp	.+368    	; 0x27e <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTB:
				SET_BIT(PORTB_reg,Copy_u8Pin);
 10e:	a8 e3       	ldi	r26, 0x38	; 56
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	e8 e3       	ldi	r30, 0x38	; 56
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	48 2f       	mov	r20, r24
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	28 2f       	mov	r18, r24
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 2e       	mov	r0, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_u8SetPinValue+0xb0>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_u8SetPinValue+0xac>
 130:	84 2b       	or	r24, r20
 132:	8c 93       	st	X, r24
 134:	a4 c0       	rjmp	.+328    	; 0x27e <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTC:
				SET_BIT(PORTC_reg,Copy_u8Pin);
 136:	a5 e3       	ldi	r26, 0x35	; 53
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	e5 e3       	ldi	r30, 0x35	; 53
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	48 2f       	mov	r20, r24
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	28 2f       	mov	r18, r24
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 2e       	mov	r0, r18
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_u8SetPinValue+0xd8>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	0a 94       	dec	r0
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_u8SetPinValue+0xd4>
 158:	84 2b       	or	r24, r20
 15a:	8c 93       	st	X, r24
 15c:	90 c0       	rjmp	.+288    	; 0x27e <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTD:
				SET_BIT(PORTD_reg,Copy_u8Pin);
 15e:	a2 e3       	ldi	r26, 0x32	; 50
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	e2 e3       	ldi	r30, 0x32	; 50
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	48 2f       	mov	r20, r24
 16a:	8b 81       	ldd	r24, Y+3	; 0x03
 16c:	28 2f       	mov	r18, r24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 2e       	mov	r0, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_u8SetPinValue+0x100>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_u8SetPinValue+0xfc>
 180:	84 2b       	or	r24, r20
 182:	8c 93       	st	X, r24
 184:	7c c0       	rjmp	.+248    	; 0x27e <DIO_u8SetPinValue+0x202>
				break;
			
				default:
				Local_u8ErrorState=1;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	89 83       	std	Y+1, r24	; 0x01
 18a:	79 c0       	rjmp	.+242    	; 0x27e <DIO_u8SetPinValue+0x202>
				break;
			}
		}
		else//value is 0 so we clear the bits
		{
			switch(Copy_u8Port)
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	28 2f       	mov	r18, r24
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	3e 83       	std	Y+6, r19	; 0x06
 194:	2d 83       	std	Y+5, r18	; 0x05
 196:	8d 81       	ldd	r24, Y+5	; 0x05
 198:	9e 81       	ldd	r25, Y+6	; 0x06
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	91 05       	cpc	r25, r1
 19e:	59 f1       	breq	.+86     	; 0x1f6 <DIO_u8SetPinValue+0x17a>
 1a0:	2d 81       	ldd	r18, Y+5	; 0x05
 1a2:	3e 81       	ldd	r19, Y+6	; 0x06
 1a4:	22 30       	cpi	r18, 0x02	; 2
 1a6:	31 05       	cpc	r19, r1
 1a8:	2c f4       	brge	.+10     	; 0x1b4 <DIO_u8SetPinValue+0x138>
 1aa:	8d 81       	ldd	r24, Y+5	; 0x05
 1ac:	9e 81       	ldd	r25, Y+6	; 0x06
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	69 f0       	breq	.+26     	; 0x1cc <DIO_u8SetPinValue+0x150>
 1b2:	60 c0       	rjmp	.+192    	; 0x274 <DIO_u8SetPinValue+0x1f8>
 1b4:	2d 81       	ldd	r18, Y+5	; 0x05
 1b6:	3e 81       	ldd	r19, Y+6	; 0x06
 1b8:	22 30       	cpi	r18, 0x02	; 2
 1ba:	31 05       	cpc	r19, r1
 1bc:	89 f1       	breq	.+98     	; 0x220 <DIO_u8SetPinValue+0x1a4>
 1be:	8d 81       	ldd	r24, Y+5	; 0x05
 1c0:	9e 81       	ldd	r25, Y+6	; 0x06
 1c2:	83 30       	cpi	r24, 0x03	; 3
 1c4:	91 05       	cpc	r25, r1
 1c6:	09 f4       	brne	.+2      	; 0x1ca <DIO_u8SetPinValue+0x14e>
 1c8:	40 c0       	rjmp	.+128    	; 0x24a <DIO_u8SetPinValue+0x1ce>
 1ca:	54 c0       	rjmp	.+168    	; 0x274 <DIO_u8SetPinValue+0x1f8>
			{
				case DIO_u8PORTA:
				CLR_BIT(PORTA_reg,Copy_u8Pin);
 1cc:	ab e3       	ldi	r26, 0x3B	; 59
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	eb e3       	ldi	r30, 0x3B	; 59
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	48 2f       	mov	r20, r24
 1d8:	8b 81       	ldd	r24, Y+3	; 0x03
 1da:	28 2f       	mov	r18, r24
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 2e       	mov	r0, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_u8SetPinValue+0x16e>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_u8SetPinValue+0x16a>
 1ee:	80 95       	com	r24
 1f0:	84 23       	and	r24, r20
 1f2:	8c 93       	st	X, r24
 1f4:	44 c0       	rjmp	.+136    	; 0x27e <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTB:
				CLR_BIT(PORTB_reg,Copy_u8Pin);
 1f6:	a8 e3       	ldi	r26, 0x38	; 56
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	e8 e3       	ldi	r30, 0x38	; 56
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	48 2f       	mov	r20, r24
 202:	8b 81       	ldd	r24, Y+3	; 0x03
 204:	28 2f       	mov	r18, r24
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 2e       	mov	r0, r18
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_u8SetPinValue+0x198>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	0a 94       	dec	r0
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_u8SetPinValue+0x194>
 218:	80 95       	com	r24
 21a:	84 23       	and	r24, r20
 21c:	8c 93       	st	X, r24
 21e:	2f c0       	rjmp	.+94     	; 0x27e <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTC:
				CLR_BIT(PORTC_reg,Copy_u8Pin);
 220:	a5 e3       	ldi	r26, 0x35	; 53
 222:	b0 e0       	ldi	r27, 0x00	; 0
 224:	e5 e3       	ldi	r30, 0x35	; 53
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	48 2f       	mov	r20, r24
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	28 2f       	mov	r18, r24
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 2e       	mov	r0, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_u8SetPinValue+0x1c2>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_u8SetPinValue+0x1be>
 242:	80 95       	com	r24
 244:	84 23       	and	r24, r20
 246:	8c 93       	st	X, r24
 248:	1a c0       	rjmp	.+52     	; 0x27e <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTD:
				CLR_BIT(PORTD_reg,Copy_u8Pin);
 24a:	a2 e3       	ldi	r26, 0x32	; 50
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	e2 e3       	ldi	r30, 0x32	; 50
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	48 2f       	mov	r20, r24
 256:	8b 81       	ldd	r24, Y+3	; 0x03
 258:	28 2f       	mov	r18, r24
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 2e       	mov	r0, r18
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_u8SetPinValue+0x1ec>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	0a 94       	dec	r0
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_u8SetPinValue+0x1e8>
 26c:	80 95       	com	r24
 26e:	84 23       	and	r24, r20
 270:	8c 93       	st	X, r24
 272:	05 c0       	rjmp	.+10     	; 0x27e <DIO_u8SetPinValue+0x202>
				break;
				
				default:
				Local_u8ErrorState=1;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	89 83       	std	Y+1, r24	; 0x01
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_u8SetPinValue+0x202>
			}
		}
	}
	else //incorrect input
	{
		Local_u8ErrorState=1;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	89 83       	std	Y+1, r24	; 0x01
	}	
	return Local_u8ErrorState;
 27e:	89 81       	ldd	r24, Y+1	; 0x01
}
 280:	28 96       	adiw	r28, 0x08	; 8
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	cf 91       	pop	r28
 28e:	df 91       	pop	r29
 290:	08 95       	ret

00000292 <DIO_u8SetPortValue>:
/******************************************************************************/
/***********************Setting port value*************************************/
/******************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port ,u8 Copy_u8Value)
{
 292:	df 93       	push	r29
 294:	cf 93       	push	r28
 296:	00 d0       	rcall	.+0      	; 0x298 <DIO_u8SetPortValue+0x6>
 298:	00 d0       	rcall	.+0      	; 0x29a <DIO_u8SetPortValue+0x8>
 29a:	0f 92       	push	r0
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	8a 83       	std	Y+2, r24	; 0x02
 2a2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;//error state initially zero
 2a4:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
 2a6:	8a 81       	ldd	r24, Y+2	; 0x02
 2a8:	28 2f       	mov	r18, r24
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	3d 83       	std	Y+5, r19	; 0x05
 2ae:	2c 83       	std	Y+4, r18	; 0x04
 2b0:	8c 81       	ldd	r24, Y+4	; 0x04
 2b2:	9d 81       	ldd	r25, Y+5	; 0x05
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	91 05       	cpc	r25, r1
 2b8:	d1 f0       	breq	.+52     	; 0x2ee <DIO_u8SetPortValue+0x5c>
 2ba:	2c 81       	ldd	r18, Y+4	; 0x04
 2bc:	3d 81       	ldd	r19, Y+5	; 0x05
 2be:	22 30       	cpi	r18, 0x02	; 2
 2c0:	31 05       	cpc	r19, r1
 2c2:	2c f4       	brge	.+10     	; 0x2ce <DIO_u8SetPortValue+0x3c>
 2c4:	8c 81       	ldd	r24, Y+4	; 0x04
 2c6:	9d 81       	ldd	r25, Y+5	; 0x05
 2c8:	00 97       	sbiw	r24, 0x00	; 0
 2ca:	61 f0       	breq	.+24     	; 0x2e4 <DIO_u8SetPortValue+0x52>
 2cc:	1f c0       	rjmp	.+62     	; 0x30c <DIO_u8SetPortValue+0x7a>
 2ce:	2c 81       	ldd	r18, Y+4	; 0x04
 2d0:	3d 81       	ldd	r19, Y+5	; 0x05
 2d2:	22 30       	cpi	r18, 0x02	; 2
 2d4:	31 05       	cpc	r19, r1
 2d6:	81 f0       	breq	.+32     	; 0x2f8 <DIO_u8SetPortValue+0x66>
 2d8:	8c 81       	ldd	r24, Y+4	; 0x04
 2da:	9d 81       	ldd	r25, Y+5	; 0x05
 2dc:	83 30       	cpi	r24, 0x03	; 3
 2de:	91 05       	cpc	r25, r1
 2e0:	81 f0       	breq	.+32     	; 0x302 <DIO_u8SetPortValue+0x70>
 2e2:	14 c0       	rjmp	.+40     	; 0x30c <DIO_u8SetPortValue+0x7a>
		{
			case DIO_u8PORTA:
			PORTA_reg=Copy_u8Value;
 2e4:	eb e3       	ldi	r30, 0x3B	; 59
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ea:	80 83       	st	Z, r24
 2ec:	11 c0       	rjmp	.+34     	; 0x310 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTB:
			PORTB_reg=Copy_u8Value;
 2ee:	e8 e3       	ldi	r30, 0x38	; 56
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	8b 81       	ldd	r24, Y+3	; 0x03
 2f4:	80 83       	st	Z, r24
 2f6:	0c c0       	rjmp	.+24     	; 0x310 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTC:
			PORTC_reg=Copy_u8Value;
 2f8:	e5 e3       	ldi	r30, 0x35	; 53
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	8b 81       	ldd	r24, Y+3	; 0x03
 2fe:	80 83       	st	Z, r24
 300:	07 c0       	rjmp	.+14     	; 0x310 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTD:
			PORTD_reg=Copy_u8Value;
 302:	e2 e3       	ldi	r30, 0x32	; 50
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	8b 81       	ldd	r24, Y+3	; 0x03
 308:	80 83       	st	Z, r24
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_u8SetPortValue+0x7e>
			break;
			
			default:
			Local_u8ErrorState=1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_u8ErrorState;//incorrect input
 310:	89 81       	ldd	r24, Y+1	; 0x01
}
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	cf 91       	pop	r28
 31e:	df 91       	pop	r29
 320:	08 95       	ret

00000322 <DIO_u8GetPinValue>:
/******************************************************************************/
/***********************Getting PIN value**************************************/
/******************************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 322:	df 93       	push	r29
 324:	cf 93       	push	r28
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	27 97       	sbiw	r28, 0x07	; 7
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
 336:	8a 83       	std	Y+2, r24	; 0x02
 338:	6b 83       	std	Y+3, r22	; 0x03
 33a:	5d 83       	std	Y+5, r21	; 0x05
 33c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially zero
 33e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL)&&Copy_u8Pin<=DIO_u8PIN_7)//check if ptr not null and correct input pin
 340:	8c 81       	ldd	r24, Y+4	; 0x04
 342:	9d 81       	ldd	r25, Y+5	; 0x05
 344:	00 97       	sbiw	r24, 0x00	; 0
 346:	09 f4       	brne	.+2      	; 0x34a <DIO_u8GetPinValue+0x28>
 348:	78 c0       	rjmp	.+240    	; 0x43a <DIO_u8GetPinValue+0x118>
 34a:	8b 81       	ldd	r24, Y+3	; 0x03
 34c:	88 30       	cpi	r24, 0x08	; 8
 34e:	08 f0       	brcs	.+2      	; 0x352 <DIO_u8GetPinValue+0x30>
 350:	74 c0       	rjmp	.+232    	; 0x43a <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
 352:	8a 81       	ldd	r24, Y+2	; 0x02
 354:	28 2f       	mov	r18, r24
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	3f 83       	std	Y+7, r19	; 0x07
 35a:	2e 83       	std	Y+6, r18	; 0x06
 35c:	4e 81       	ldd	r20, Y+6	; 0x06
 35e:	5f 81       	ldd	r21, Y+7	; 0x07
 360:	41 30       	cpi	r20, 0x01	; 1
 362:	51 05       	cpc	r21, r1
 364:	59 f1       	breq	.+86     	; 0x3bc <DIO_u8GetPinValue+0x9a>
 366:	8e 81       	ldd	r24, Y+6	; 0x06
 368:	9f 81       	ldd	r25, Y+7	; 0x07
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	91 05       	cpc	r25, r1
 36e:	34 f4       	brge	.+12     	; 0x37c <DIO_u8GetPinValue+0x5a>
 370:	2e 81       	ldd	r18, Y+6	; 0x06
 372:	3f 81       	ldd	r19, Y+7	; 0x07
 374:	21 15       	cp	r18, r1
 376:	31 05       	cpc	r19, r1
 378:	69 f0       	breq	.+26     	; 0x394 <DIO_u8GetPinValue+0x72>
 37a:	5c c0       	rjmp	.+184    	; 0x434 <DIO_u8GetPinValue+0x112>
 37c:	4e 81       	ldd	r20, Y+6	; 0x06
 37e:	5f 81       	ldd	r21, Y+7	; 0x07
 380:	42 30       	cpi	r20, 0x02	; 2
 382:	51 05       	cpc	r21, r1
 384:	79 f1       	breq	.+94     	; 0x3e4 <DIO_u8GetPinValue+0xc2>
 386:	8e 81       	ldd	r24, Y+6	; 0x06
 388:	9f 81       	ldd	r25, Y+7	; 0x07
 38a:	83 30       	cpi	r24, 0x03	; 3
 38c:	91 05       	cpc	r25, r1
 38e:	09 f4       	brne	.+2      	; 0x392 <DIO_u8GetPinValue+0x70>
 390:	3d c0       	rjmp	.+122    	; 0x40c <DIO_u8GetPinValue+0xea>
 392:	50 c0       	rjmp	.+160    	; 0x434 <DIO_u8GetPinValue+0x112>
		{
			case DIO_u8PORTA:
			*Copy_pu8Value=GET_BIT(PINA_reg,Copy_u8Pin);
 394:	e9 e3       	ldi	r30, 0x39	; 57
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	8b 81       	ldd	r24, Y+3	; 0x03
 3a0:	88 2f       	mov	r24, r24
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	a9 01       	movw	r20, r18
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_u8GetPinValue+0x8a>
 3a8:	55 95       	asr	r21
 3aa:	47 95       	ror	r20
 3ac:	8a 95       	dec	r24
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_u8GetPinValue+0x86>
 3b0:	ca 01       	movw	r24, r20
 3b2:	81 70       	andi	r24, 0x01	; 1
 3b4:	ec 81       	ldd	r30, Y+4	; 0x04
 3b6:	fd 81       	ldd	r31, Y+5	; 0x05
 3b8:	80 83       	st	Z, r24
 3ba:	41 c0       	rjmp	.+130    	; 0x43e <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTB:
			*Copy_pu8Value=GET_BIT(PINB_reg,Copy_u8Pin);
 3bc:	e6 e3       	ldi	r30, 0x36	; 54
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	28 2f       	mov	r18, r24
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	8b 81       	ldd	r24, Y+3	; 0x03
 3c8:	88 2f       	mov	r24, r24
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	a9 01       	movw	r20, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_u8GetPinValue+0xb2>
 3d0:	55 95       	asr	r21
 3d2:	47 95       	ror	r20
 3d4:	8a 95       	dec	r24
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_u8GetPinValue+0xae>
 3d8:	ca 01       	movw	r24, r20
 3da:	81 70       	andi	r24, 0x01	; 1
 3dc:	ec 81       	ldd	r30, Y+4	; 0x04
 3de:	fd 81       	ldd	r31, Y+5	; 0x05
 3e0:	80 83       	st	Z, r24
 3e2:	2d c0       	rjmp	.+90     	; 0x43e <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTC:
			*Copy_pu8Value=GET_BIT(PINC_reg,Copy_u8Pin);
 3e4:	e3 e3       	ldi	r30, 0x33	; 51
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	28 2f       	mov	r18, r24
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	8b 81       	ldd	r24, Y+3	; 0x03
 3f0:	88 2f       	mov	r24, r24
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	a9 01       	movw	r20, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_u8GetPinValue+0xda>
 3f8:	55 95       	asr	r21
 3fa:	47 95       	ror	r20
 3fc:	8a 95       	dec	r24
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_u8GetPinValue+0xd6>
 400:	ca 01       	movw	r24, r20
 402:	81 70       	andi	r24, 0x01	; 1
 404:	ec 81       	ldd	r30, Y+4	; 0x04
 406:	fd 81       	ldd	r31, Y+5	; 0x05
 408:	80 83       	st	Z, r24
 40a:	19 c0       	rjmp	.+50     	; 0x43e <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTD:
			*Copy_pu8Value=GET_BIT(PIND_reg,Copy_u8Pin);
 40c:	e0 e3       	ldi	r30, 0x30	; 48
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	8b 81       	ldd	r24, Y+3	; 0x03
 418:	88 2f       	mov	r24, r24
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	a9 01       	movw	r20, r18
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_u8GetPinValue+0x102>
 420:	55 95       	asr	r21
 422:	47 95       	ror	r20
 424:	8a 95       	dec	r24
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_u8GetPinValue+0xfe>
 428:	ca 01       	movw	r24, r20
 42a:	81 70       	andi	r24, 0x01	; 1
 42c:	ec 81       	ldd	r30, Y+4	; 0x04
 42e:	fd 81       	ldd	r31, Y+5	; 0x05
 430:	80 83       	st	Z, r24
 432:	05 c0       	rjmp	.+10     	; 0x43e <DIO_u8GetPinValue+0x11c>
			break;
			
			default:
			Local_u8ErrorState=1;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	89 83       	std	Y+1, r24	; 0x01
 438:	02 c0       	rjmp	.+4      	; 0x43e <DIO_u8GetPinValue+0x11c>
			break;
		}
	}
	else
	{
		Local_u8ErrorState=1;
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 43e:	89 81       	ldd	r24, Y+1	; 0x01
}
 440:	27 96       	adiw	r28, 0x07	; 7
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	f8 94       	cli
 446:	de bf       	out	0x3e, r29	; 62
 448:	0f be       	out	0x3f, r0	; 63
 44a:	cd bf       	out	0x3d, r28	; 61
 44c:	cf 91       	pop	r28
 44e:	df 91       	pop	r29
 450:	08 95       	ret

00000452 <DIO_u8GetPortValue>:
/*not tested*/
u8 DIO_u8GetPortValue(u8 Copy_u8Port ,u8* Copy_pu8Value)//get value of entire port
{
 452:	df 93       	push	r29
 454:	cf 93       	push	r28
 456:	00 d0       	rcall	.+0      	; 0x458 <DIO_u8GetPortValue+0x6>
 458:	00 d0       	rcall	.+0      	; 0x45a <DIO_u8GetPortValue+0x8>
 45a:	00 d0       	rcall	.+0      	; 0x45c <DIO_u8GetPortValue+0xa>
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
 460:	8a 83       	std	Y+2, r24	; 0x02
 462:	7c 83       	std	Y+4, r23	; 0x04
 464:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 466:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 468:	8a 81       	ldd	r24, Y+2	; 0x02
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	3e 83       	std	Y+6, r19	; 0x06
 470:	2d 83       	std	Y+5, r18	; 0x05
 472:	8d 81       	ldd	r24, Y+5	; 0x05
 474:	9e 81       	ldd	r25, Y+6	; 0x06
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	91 05       	cpc	r25, r1
 47a:	e1 f0       	breq	.+56     	; 0x4b4 <DIO_u8GetPortValue+0x62>
 47c:	2d 81       	ldd	r18, Y+5	; 0x05
 47e:	3e 81       	ldd	r19, Y+6	; 0x06
 480:	22 30       	cpi	r18, 0x02	; 2
 482:	31 05       	cpc	r19, r1
 484:	2c f4       	brge	.+10     	; 0x490 <DIO_u8GetPortValue+0x3e>
 486:	8d 81       	ldd	r24, Y+5	; 0x05
 488:	9e 81       	ldd	r25, Y+6	; 0x06
 48a:	00 97       	sbiw	r24, 0x00	; 0
 48c:	61 f0       	breq	.+24     	; 0x4a6 <DIO_u8GetPortValue+0x54>
 48e:	27 c0       	rjmp	.+78     	; 0x4de <DIO_u8GetPortValue+0x8c>
 490:	2d 81       	ldd	r18, Y+5	; 0x05
 492:	3e 81       	ldd	r19, Y+6	; 0x06
 494:	22 30       	cpi	r18, 0x02	; 2
 496:	31 05       	cpc	r19, r1
 498:	a1 f0       	breq	.+40     	; 0x4c2 <DIO_u8GetPortValue+0x70>
 49a:	8d 81       	ldd	r24, Y+5	; 0x05
 49c:	9e 81       	ldd	r25, Y+6	; 0x06
 49e:	83 30       	cpi	r24, 0x03	; 3
 4a0:	91 05       	cpc	r25, r1
 4a2:	b1 f0       	breq	.+44     	; 0x4d0 <DIO_u8GetPortValue+0x7e>
 4a4:	1c c0       	rjmp	.+56     	; 0x4de <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA:
		*Copy_pu8Value=PINA_reg;
 4a6:	e9 e3       	ldi	r30, 0x39	; 57
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	eb 81       	ldd	r30, Y+3	; 0x03
 4ae:	fc 81       	ldd	r31, Y+4	; 0x04
 4b0:	80 83       	st	Z, r24
 4b2:	17 c0       	rjmp	.+46     	; 0x4e2 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTB:
		*Copy_pu8Value=PINB_reg;
 4b4:	e6 e3       	ldi	r30, 0x36	; 54
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	eb 81       	ldd	r30, Y+3	; 0x03
 4bc:	fc 81       	ldd	r31, Y+4	; 0x04
 4be:	80 83       	st	Z, r24
 4c0:	10 c0       	rjmp	.+32     	; 0x4e2 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTC:
		*Copy_pu8Value=PINC_reg;
 4c2:	e3 e3       	ldi	r30, 0x33	; 51
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	eb 81       	ldd	r30, Y+3	; 0x03
 4ca:	fc 81       	ldd	r31, Y+4	; 0x04
 4cc:	80 83       	st	Z, r24
 4ce:	09 c0       	rjmp	.+18     	; 0x4e2 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTD:
		*Copy_pu8Value=PIND_reg;
 4d0:	e0 e3       	ldi	r30, 0x30	; 48
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	eb 81       	ldd	r30, Y+3	; 0x03
 4d8:	fc 81       	ldd	r31, Y+4	; 0x04
 4da:	80 83       	st	Z, r24
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_u8GetPortValue+0x90>
		break;
	default:
		Local_u8ErrorState=1;
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 4e2:	89 81       	ldd	r24, Y+1	; 0x01
}
 4e4:	26 96       	adiw	r28, 0x06	; 6
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	de bf       	out	0x3e, r29	; 62
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	cd bf       	out	0x3d, r28	; 61
 4f0:	cf 91       	pop	r28
 4f2:	df 91       	pop	r29
 4f4:	08 95       	ret

000004f6 <EXTI_voidInt0Init>:
void (* EXTI_pvInt0Func)(void)=NULL;
void (* EXTI_pvInt1Func)(void)=NULL;
void (* EXTI_pvInt2Func)(void)=NULL;

void EXTI_voidInt0Init(void)
{
 4f6:	df 93       	push	r29
 4f8:	cf 93       	push	r28
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
	// Setting state for INT0
	#if INT0_STATE==ENABLED
	SET_BIT(GICR,GICR_INT_0_BIT);
 4fe:	ab e5       	ldi	r26, 0x5B	; 91
 500:	b0 e0       	ldi	r27, 0x00	; 0
 502:	eb e5       	ldi	r30, 0x5B	; 91
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	80 64       	ori	r24, 0x40	; 64
 50a:	8c 93       	st	X, r24
	#error "Error in INT0 State"
	#endif

	//setting sensor control
	#if INT0_SensorControl==EXTI_FALLING
	SET_BIT(MCUCR,MCUCR_ISC01_BIT);
 50c:	a5 e5       	ldi	r26, 0x55	; 85
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	e5 e5       	ldi	r30, 0x55	; 85
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	82 60       	ori	r24, 0x02	; 2
 518:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC00_BIT);
 51a:	a5 e5       	ldi	r26, 0x55	; 85
 51c:	b0 e0       	ldi	r27, 0x00	; 0
 51e:	e5 e5       	ldi	r30, 0x55	; 85
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	8e 7f       	andi	r24, 0xFE	; 254
 526:	8c 93       	st	X, r24
	#else
		#error "Error in sense control"
	
	#endif
	
}
 528:	cf 91       	pop	r28
 52a:	df 91       	pop	r29
 52c:	08 95       	ret

0000052e <EXTI_voidInt1Init>:
void EXTI_voidInt1Init(void)
{
 52e:	df 93       	push	r29
 530:	cf 93       	push	r28
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
		// Setting INT1 State
	#if INT1_STATE==ENABLED
	SET_BIT(GICR,GICR_INT_1_BIT);
 536:	ab e5       	ldi	r26, 0x5B	; 91
 538:	b0 e0       	ldi	r27, 0x00	; 0
 53a:	eb e5       	ldi	r30, 0x5B	; 91
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	80 68       	ori	r24, 0x80	; 128
 542:	8c 93       	st	X, r24
	#error "Error in INT1 State"
	#endif

	//setting sensor control
	#if INT1_SensorControl==EXTI_FALLING
	SET_BIT(MCUCR,MCUCR_ISC11_BIT);
 544:	a5 e5       	ldi	r26, 0x55	; 85
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	e5 e5       	ldi	r30, 0x55	; 85
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	88 60       	ori	r24, 0x08	; 8
 550:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC10_BIT);
 552:	a5 e5       	ldi	r26, 0x55	; 85
 554:	b0 e0       	ldi	r27, 0x00	; 0
 556:	e5 e5       	ldi	r30, 0x55	; 85
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	8b 7f       	andi	r24, 0xFB	; 251
 55e:	8c 93       	st	X, r24
	#elif INT1_SensorControl==EXTI_LOW_LEVEL
	CLR_BIT(MCUCR,MCUCR_ISC11_BIT);
	CLR_BIT(MCUCR,MCUCR_ISC10_BIT);
	
	#endif
}
 560:	cf 91       	pop	r28
 562:	df 91       	pop	r29
 564:	08 95       	ret

00000566 <EXTI_voidInt2Init>:
void EXTI_voidInt2Init(void)
{
 566:	df 93       	push	r29
 568:	cf 93       	push	r28
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
	// Setting state of INT2
	#if INT2_STATE==ENABLED
	SET_BIT(GICR,GICR_INT_2_BIT);
 56e:	ab e5       	ldi	r26, 0x5B	; 91
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	eb e5       	ldi	r30, 0x5B	; 91
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	80 62       	ori	r24, 0x20	; 32
 57a:	8c 93       	st	X, r24
	#error "Error in INT2 State"
	#endif
	
	//setting sensor control
	#if INT2_SensorControl==EXTI_FALLING
	CLR_BIT(MCUCSR,MCUCSR_ISC2_BIT);
 57c:	a4 e5       	ldi	r26, 0x54	; 84
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	e4 e5       	ldi	r30, 0x54	; 84
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	8f 7b       	andi	r24, 0xBF	; 191
 588:	8c 93       	st	X, r24
	
	#elif INT2_SensorControl==EXTI_RISING
	SET_BIT(MCUCSR,MCUCSR_ISC2_BIT);
	
	#endif
}
 58a:	cf 91       	pop	r28
 58c:	df 91       	pop	r29
 58e:	08 95       	ret

00000590 <EXTI_u8SetControlSense>:
/*POSTBUILD functions*/

u8 EXTI_u8SetControlSense(u8 Copy_u8ControlSense,u8 Copy_u8Int)
{
 590:	df 93       	push	r29
 592:	cf 93       	push	r28
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	29 97       	sbiw	r28, 0x09	; 9
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	de bf       	out	0x3e, r29	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	cd bf       	out	0x3d, r28	; 61
 5a4:	8a 83       	std	Y+2, r24	; 0x02
 5a6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
 5a8:	19 82       	std	Y+1, r1	; 0x01


		switch(Copy_u8ControlSense)
 5aa:	8a 81       	ldd	r24, Y+2	; 0x02
 5ac:	28 2f       	mov	r18, r24
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	39 87       	std	Y+9, r19	; 0x09
 5b2:	28 87       	std	Y+8, r18	; 0x08
 5b4:	88 85       	ldd	r24, Y+8	; 0x08
 5b6:	99 85       	ldd	r25, Y+9	; 0x09
 5b8:	82 30       	cpi	r24, 0x02	; 2
 5ba:	91 05       	cpc	r25, r1
 5bc:	c9 f0       	breq	.+50     	; 0x5f0 <EXTI_u8SetControlSense+0x60>
 5be:	28 85       	ldd	r18, Y+8	; 0x08
 5c0:	39 85       	ldd	r19, Y+9	; 0x09
 5c2:	23 30       	cpi	r18, 0x03	; 3
 5c4:	31 05       	cpc	r19, r1
 5c6:	3c f4       	brge	.+14     	; 0x5d6 <EXTI_u8SetControlSense+0x46>
 5c8:	88 85       	ldd	r24, Y+8	; 0x08
 5ca:	99 85       	ldd	r25, Y+9	; 0x09
 5cc:	81 30       	cpi	r24, 0x01	; 1
 5ce:	91 05       	cpc	r25, r1
 5d0:	09 f4       	brne	.+2      	; 0x5d4 <EXTI_u8SetControlSense+0x44>
 5d2:	4b c0       	rjmp	.+150    	; 0x66a <EXTI_u8SetControlSense+0xda>
 5d4:	d5 c0       	rjmp	.+426    	; 0x780 <EXTI_u8SetControlSense+0x1f0>
 5d6:	28 85       	ldd	r18, Y+8	; 0x08
 5d8:	39 85       	ldd	r19, Y+9	; 0x09
 5da:	23 30       	cpi	r18, 0x03	; 3
 5dc:	31 05       	cpc	r19, r1
 5de:	09 f4       	brne	.+2      	; 0x5e2 <EXTI_u8SetControlSense+0x52>
 5e0:	81 c0       	rjmp	.+258    	; 0x6e4 <EXTI_u8SetControlSense+0x154>
 5e2:	88 85       	ldd	r24, Y+8	; 0x08
 5e4:	99 85       	ldd	r25, Y+9	; 0x09
 5e6:	84 30       	cpi	r24, 0x04	; 4
 5e8:	91 05       	cpc	r25, r1
 5ea:	09 f4       	brne	.+2      	; 0x5ee <EXTI_u8SetControlSense+0x5e>
 5ec:	a2 c0       	rjmp	.+324    	; 0x732 <EXTI_u8SetControlSense+0x1a2>
 5ee:	c8 c0       	rjmp	.+400    	; 0x780 <EXTI_u8SetControlSense+0x1f0>
		{
		//rising
		case EXTI_RISING:
			switch(Copy_u8Int)
 5f0:	8b 81       	ldd	r24, Y+3	; 0x03
 5f2:	28 2f       	mov	r18, r24
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	3f 83       	std	Y+7, r19	; 0x07
 5f8:	2e 83       	std	Y+6, r18	; 0x06
 5fa:	8e 81       	ldd	r24, Y+6	; 0x06
 5fc:	9f 81       	ldd	r25, Y+7	; 0x07
 5fe:	82 30       	cpi	r24, 0x02	; 2
 600:	91 05       	cpc	r25, r1
 602:	c9 f0       	breq	.+50     	; 0x636 <EXTI_u8SetControlSense+0xa6>
 604:	2e 81       	ldd	r18, Y+6	; 0x06
 606:	3f 81       	ldd	r19, Y+7	; 0x07
 608:	23 30       	cpi	r18, 0x03	; 3
 60a:	31 05       	cpc	r19, r1
 60c:	19 f1       	breq	.+70     	; 0x654 <EXTI_u8SetControlSense+0xc4>
 60e:	8e 81       	ldd	r24, Y+6	; 0x06
 610:	9f 81       	ldd	r25, Y+7	; 0x07
 612:	81 30       	cpi	r24, 0x01	; 1
 614:	91 05       	cpc	r25, r1
 616:	31 f5       	brne	.+76     	; 0x664 <EXTI_u8SetControlSense+0xd4>
			{
			case EXTI_INT0:
				SET_BIT(MCUCR,MCUCR_ISC01_BIT);
 618:	a5 e5       	ldi	r26, 0x55	; 85
 61a:	b0 e0       	ldi	r27, 0x00	; 0
 61c:	e5 e5       	ldi	r30, 0x55	; 85
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	82 60       	ori	r24, 0x02	; 2
 624:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC00_BIT);
 626:	a5 e5       	ldi	r26, 0x55	; 85
 628:	b0 e0       	ldi	r27, 0x00	; 0
 62a:	e5 e5       	ldi	r30, 0x55	; 85
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 81       	ld	r24, Z
 630:	81 60       	ori	r24, 0x01	; 1
 632:	8c 93       	st	X, r24
 634:	a7 c0       	rjmp	.+334    	; 0x784 <EXTI_u8SetControlSense+0x1f4>
				break;
			case EXTI_INT1:
				SET_BIT(MCUCR,MCUCR_ISC11_BIT);
 636:	a5 e5       	ldi	r26, 0x55	; 85
 638:	b0 e0       	ldi	r27, 0x00	; 0
 63a:	e5 e5       	ldi	r30, 0x55	; 85
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	88 60       	ori	r24, 0x08	; 8
 642:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC10_BIT);
 644:	a5 e5       	ldi	r26, 0x55	; 85
 646:	b0 e0       	ldi	r27, 0x00	; 0
 648:	e5 e5       	ldi	r30, 0x55	; 85
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	80 81       	ld	r24, Z
 64e:	84 60       	ori	r24, 0x04	; 4
 650:	8c 93       	st	X, r24
 652:	98 c0       	rjmp	.+304    	; 0x784 <EXTI_u8SetControlSense+0x1f4>
				break;
			case EXTI_INT2:
				SET_BIT(MCUCSR,MCUCSR_ISC2_BIT);
 654:	a4 e5       	ldi	r26, 0x54	; 84
 656:	b0 e0       	ldi	r27, 0x00	; 0
 658:	e4 e5       	ldi	r30, 0x54	; 84
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	80 81       	ld	r24, Z
 65e:	80 64       	ori	r24, 0x40	; 64
 660:	8c 93       	st	X, r24
 662:	90 c0       	rjmp	.+288    	; 0x784 <EXTI_u8SetControlSense+0x1f4>
				break;
			default :
				Local_u8ErrorState=NOK;
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	89 83       	std	Y+1, r24	; 0x01
 668:	8d c0       	rjmp	.+282    	; 0x784 <EXTI_u8SetControlSense+0x1f4>
			}
			break;

			//falling
		case EXTI_FALLING:
			switch(Copy_u8Int)
 66a:	8b 81       	ldd	r24, Y+3	; 0x03
 66c:	28 2f       	mov	r18, r24
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	3d 83       	std	Y+5, r19	; 0x05
 672:	2c 83       	std	Y+4, r18	; 0x04
 674:	8c 81       	ldd	r24, Y+4	; 0x04
 676:	9d 81       	ldd	r25, Y+5	; 0x05
 678:	82 30       	cpi	r24, 0x02	; 2
 67a:	91 05       	cpc	r25, r1
 67c:	c9 f0       	breq	.+50     	; 0x6b0 <EXTI_u8SetControlSense+0x120>
 67e:	2c 81       	ldd	r18, Y+4	; 0x04
 680:	3d 81       	ldd	r19, Y+5	; 0x05
 682:	23 30       	cpi	r18, 0x03	; 3
 684:	31 05       	cpc	r19, r1
 686:	19 f1       	breq	.+70     	; 0x6ce <EXTI_u8SetControlSense+0x13e>
 688:	8c 81       	ldd	r24, Y+4	; 0x04
 68a:	9d 81       	ldd	r25, Y+5	; 0x05
 68c:	81 30       	cpi	r24, 0x01	; 1
 68e:	91 05       	cpc	r25, r1
 690:	31 f5       	brne	.+76     	; 0x6de <EXTI_u8SetControlSense+0x14e>
			{
			case EXTI_INT0:
				SET_BIT(MCUCR,MCUCR_ISC01_BIT);
 692:	a5 e5       	ldi	r26, 0x55	; 85
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	e5 e5       	ldi	r30, 0x55	; 85
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	82 60       	ori	r24, 0x02	; 2
 69e:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC00_BIT);
 6a0:	a5 e5       	ldi	r26, 0x55	; 85
 6a2:	b0 e0       	ldi	r27, 0x00	; 0
 6a4:	e5 e5       	ldi	r30, 0x55	; 85
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	8e 7f       	andi	r24, 0xFE	; 254
 6ac:	8c 93       	st	X, r24
 6ae:	6a c0       	rjmp	.+212    	; 0x784 <EXTI_u8SetControlSense+0x1f4>
				break;
			case EXTI_INT1:
				SET_BIT(MCUCR,MCUCR_ISC11_BIT);
 6b0:	a5 e5       	ldi	r26, 0x55	; 85
 6b2:	b0 e0       	ldi	r27, 0x00	; 0
 6b4:	e5 e5       	ldi	r30, 0x55	; 85
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 81       	ld	r24, Z
 6ba:	88 60       	ori	r24, 0x08	; 8
 6bc:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC10_BIT);
 6be:	a5 e5       	ldi	r26, 0x55	; 85
 6c0:	b0 e0       	ldi	r27, 0x00	; 0
 6c2:	e5 e5       	ldi	r30, 0x55	; 85
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	8b 7f       	andi	r24, 0xFB	; 251
 6ca:	8c 93       	st	X, r24
 6cc:	5b c0       	rjmp	.+182    	; 0x784 <EXTI_u8SetControlSense+0x1f4>
				break;
			case EXTI_INT2:
				CLR_BIT(MCUCSR,MCUCSR_ISC2_BIT);
 6ce:	a4 e5       	ldi	r26, 0x54	; 84
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	e4 e5       	ldi	r30, 0x54	; 84
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	8f 7b       	andi	r24, 0xBF	; 191
 6da:	8c 93       	st	X, r24
 6dc:	53 c0       	rjmp	.+166    	; 0x784 <EXTI_u8SetControlSense+0x1f4>
				break;
			default:
				Local_u8ErrorState=NOK;
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	89 83       	std	Y+1, r24	; 0x01
 6e2:	50 c0       	rjmp	.+160    	; 0x784 <EXTI_u8SetControlSense+0x1f4>
			}
			break;

			//any change
		case EXTI_ANYCHANGE:
			if(Copy_u8Int==EXTI_INT0)
 6e4:	8b 81       	ldd	r24, Y+3	; 0x03
 6e6:	81 30       	cpi	r24, 0x01	; 1
 6e8:	79 f4       	brne	.+30     	; 0x708 <EXTI_u8SetControlSense+0x178>
			{
				CLR_BIT(MCUCR,MCUCR_ISC01_BIT);
 6ea:	a5 e5       	ldi	r26, 0x55	; 85
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	e5 e5       	ldi	r30, 0x55	; 85
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	8d 7f       	andi	r24, 0xFD	; 253
 6f6:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC00_BIT);
 6f8:	a5 e5       	ldi	r26, 0x55	; 85
 6fa:	b0 e0       	ldi	r27, 0x00	; 0
 6fc:	e5 e5       	ldi	r30, 0x55	; 85
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	81 60       	ori	r24, 0x01	; 1
 704:	8c 93       	st	X, r24
 706:	3e c0       	rjmp	.+124    	; 0x784 <EXTI_u8SetControlSense+0x1f4>
			}
			else if(Copy_u8Int==EXTI_INT1)
 708:	8b 81       	ldd	r24, Y+3	; 0x03
 70a:	82 30       	cpi	r24, 0x02	; 2
 70c:	79 f4       	brne	.+30     	; 0x72c <EXTI_u8SetControlSense+0x19c>
			{
				CLR_BIT(MCUCR,MCUCR_ISC11_BIT);
 70e:	a5 e5       	ldi	r26, 0x55	; 85
 710:	b0 e0       	ldi	r27, 0x00	; 0
 712:	e5 e5       	ldi	r30, 0x55	; 85
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	87 7f       	andi	r24, 0xF7	; 247
 71a:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC10_BIT);
 71c:	a5 e5       	ldi	r26, 0x55	; 85
 71e:	b0 e0       	ldi	r27, 0x00	; 0
 720:	e5 e5       	ldi	r30, 0x55	; 85
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	84 60       	ori	r24, 0x04	; 4
 728:	8c 93       	st	X, r24
 72a:	2c c0       	rjmp	.+88     	; 0x784 <EXTI_u8SetControlSense+0x1f4>
			}
			else
			{
				Local_u8ErrorState=NOK;
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	89 83       	std	Y+1, r24	; 0x01
 730:	29 c0       	rjmp	.+82     	; 0x784 <EXTI_u8SetControlSense+0x1f4>
			}
			break;

			//low level
		case EXTI_LOW_LEVEL:
			if(Copy_u8Int==EXTI_INT0)
 732:	8b 81       	ldd	r24, Y+3	; 0x03
 734:	81 30       	cpi	r24, 0x01	; 1
 736:	79 f4       	brne	.+30     	; 0x756 <EXTI_u8SetControlSense+0x1c6>
			{
				CLR_BIT(MCUCR,MCUCR_ISC01_BIT);
 738:	a5 e5       	ldi	r26, 0x55	; 85
 73a:	b0 e0       	ldi	r27, 0x00	; 0
 73c:	e5 e5       	ldi	r30, 0x55	; 85
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	8d 7f       	andi	r24, 0xFD	; 253
 744:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC00_BIT);
 746:	a5 e5       	ldi	r26, 0x55	; 85
 748:	b0 e0       	ldi	r27, 0x00	; 0
 74a:	e5 e5       	ldi	r30, 0x55	; 85
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	8e 7f       	andi	r24, 0xFE	; 254
 752:	8c 93       	st	X, r24
 754:	17 c0       	rjmp	.+46     	; 0x784 <EXTI_u8SetControlSense+0x1f4>
			}
			else if(Copy_u8Int==EXTI_INT1)
 756:	8b 81       	ldd	r24, Y+3	; 0x03
 758:	82 30       	cpi	r24, 0x02	; 2
 75a:	79 f4       	brne	.+30     	; 0x77a <EXTI_u8SetControlSense+0x1ea>
			{
				CLR_BIT(MCUCR,MCUCR_ISC11_BIT);
 75c:	a5 e5       	ldi	r26, 0x55	; 85
 75e:	b0 e0       	ldi	r27, 0x00	; 0
 760:	e5 e5       	ldi	r30, 0x55	; 85
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	80 81       	ld	r24, Z
 766:	87 7f       	andi	r24, 0xF7	; 247
 768:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC10_BIT);
 76a:	a5 e5       	ldi	r26, 0x55	; 85
 76c:	b0 e0       	ldi	r27, 0x00	; 0
 76e:	e5 e5       	ldi	r30, 0x55	; 85
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	80 81       	ld	r24, Z
 774:	8b 7f       	andi	r24, 0xFB	; 251
 776:	8c 93       	st	X, r24
 778:	05 c0       	rjmp	.+10     	; 0x784 <EXTI_u8SetControlSense+0x1f4>
			}
			else
			{
				Local_u8ErrorState=NOK;
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	89 83       	std	Y+1, r24	; 0x01
 77e:	02 c0       	rjmp	.+4      	; 0x784 <EXTI_u8SetControlSense+0x1f4>
			}
			break;

			//error in control sense
		default:
			Local_u8ErrorState=NOK;
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8ErrorState;
 784:	89 81       	ldd	r24, Y+1	; 0x01
}
 786:	29 96       	adiw	r28, 0x09	; 9
 788:	0f b6       	in	r0, 0x3f	; 63
 78a:	f8 94       	cli
 78c:	de bf       	out	0x3e, r29	; 62
 78e:	0f be       	out	0x3f, r0	; 63
 790:	cd bf       	out	0x3d, r28	; 61
 792:	cf 91       	pop	r28
 794:	df 91       	pop	r29
 796:	08 95       	ret

00000798 <EXTI_u8InterruptEnable>:
u8 EXTI_u8InterruptEnable(u8 Copy_u8Int)
{
 798:	df 93       	push	r29
 79a:	cf 93       	push	r28
 79c:	00 d0       	rcall	.+0      	; 0x79e <EXTI_u8InterruptEnable+0x6>
 79e:	00 d0       	rcall	.+0      	; 0x7a0 <EXTI_u8InterruptEnable+0x8>
 7a0:	cd b7       	in	r28, 0x3d	; 61
 7a2:	de b7       	in	r29, 0x3e	; 62
 7a4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
 7a6:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Int)
 7a8:	8a 81       	ldd	r24, Y+2	; 0x02
 7aa:	28 2f       	mov	r18, r24
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	3c 83       	std	Y+4, r19	; 0x04
 7b0:	2b 83       	std	Y+3, r18	; 0x03
 7b2:	8b 81       	ldd	r24, Y+3	; 0x03
 7b4:	9c 81       	ldd	r25, Y+4	; 0x04
 7b6:	82 30       	cpi	r24, 0x02	; 2
 7b8:	91 05       	cpc	r25, r1
 7ba:	91 f0       	breq	.+36     	; 0x7e0 <EXTI_u8InterruptEnable+0x48>
 7bc:	2b 81       	ldd	r18, Y+3	; 0x03
 7be:	3c 81       	ldd	r19, Y+4	; 0x04
 7c0:	23 30       	cpi	r18, 0x03	; 3
 7c2:	31 05       	cpc	r19, r1
 7c4:	a9 f0       	breq	.+42     	; 0x7f0 <EXTI_u8InterruptEnable+0x58>
 7c6:	8b 81       	ldd	r24, Y+3	; 0x03
 7c8:	9c 81       	ldd	r25, Y+4	; 0x04
 7ca:	81 30       	cpi	r24, 0x01	; 1
 7cc:	91 05       	cpc	r25, r1
 7ce:	c1 f4       	brne	.+48     	; 0x800 <EXTI_u8InterruptEnable+0x68>
	{
	case EXTI_INT0:
		SET_BIT(GICR,GICR_INT_0_BIT);
 7d0:	ab e5       	ldi	r26, 0x5B	; 91
 7d2:	b0 e0       	ldi	r27, 0x00	; 0
 7d4:	eb e5       	ldi	r30, 0x5B	; 91
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	80 81       	ld	r24, Z
 7da:	80 64       	ori	r24, 0x40	; 64
 7dc:	8c 93       	st	X, r24
 7de:	12 c0       	rjmp	.+36     	; 0x804 <EXTI_u8InterruptEnable+0x6c>
		break;
	case EXTI_INT1:
		SET_BIT(GICR,GICR_INT_1_BIT);
 7e0:	ab e5       	ldi	r26, 0x5B	; 91
 7e2:	b0 e0       	ldi	r27, 0x00	; 0
 7e4:	eb e5       	ldi	r30, 0x5B	; 91
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	80 68       	ori	r24, 0x80	; 128
 7ec:	8c 93       	st	X, r24
 7ee:	0a c0       	rjmp	.+20     	; 0x804 <EXTI_u8InterruptEnable+0x6c>
		break;
	case EXTI_INT2:
		SET_BIT(GICR,GICR_INT_2_BIT);
 7f0:	ab e5       	ldi	r26, 0x5B	; 91
 7f2:	b0 e0       	ldi	r27, 0x00	; 0
 7f4:	eb e5       	ldi	r30, 0x5B	; 91
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	80 81       	ld	r24, Z
 7fa:	80 62       	ori	r24, 0x20	; 32
 7fc:	8c 93       	st	X, r24
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <EXTI_u8InterruptEnable+0x6c>
		break;
	default:
		Local_u8ErrorState=NOK;
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 804:	89 81       	ldd	r24, Y+1	; 0x01
}
 806:	0f 90       	pop	r0
 808:	0f 90       	pop	r0
 80a:	0f 90       	pop	r0
 80c:	0f 90       	pop	r0
 80e:	cf 91       	pop	r28
 810:	df 91       	pop	r29
 812:	08 95       	ret

00000814 <EXTI_u8InterruptDisable>:
u8 EXTI_u8InterruptDisable(u8 Copy_u8Int)
{
 814:	df 93       	push	r29
 816:	cf 93       	push	r28
 818:	00 d0       	rcall	.+0      	; 0x81a <EXTI_u8InterruptDisable+0x6>
 81a:	00 d0       	rcall	.+0      	; 0x81c <EXTI_u8InterruptDisable+0x8>
 81c:	cd b7       	in	r28, 0x3d	; 61
 81e:	de b7       	in	r29, 0x3e	; 62
 820:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
 822:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Int)
 824:	8a 81       	ldd	r24, Y+2	; 0x02
 826:	28 2f       	mov	r18, r24
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	3c 83       	std	Y+4, r19	; 0x04
 82c:	2b 83       	std	Y+3, r18	; 0x03
 82e:	8b 81       	ldd	r24, Y+3	; 0x03
 830:	9c 81       	ldd	r25, Y+4	; 0x04
 832:	82 30       	cpi	r24, 0x02	; 2
 834:	91 05       	cpc	r25, r1
 836:	91 f0       	breq	.+36     	; 0x85c <EXTI_u8InterruptDisable+0x48>
 838:	2b 81       	ldd	r18, Y+3	; 0x03
 83a:	3c 81       	ldd	r19, Y+4	; 0x04
 83c:	23 30       	cpi	r18, 0x03	; 3
 83e:	31 05       	cpc	r19, r1
 840:	a9 f0       	breq	.+42     	; 0x86c <__stack+0xd>
 842:	8b 81       	ldd	r24, Y+3	; 0x03
 844:	9c 81       	ldd	r25, Y+4	; 0x04
 846:	81 30       	cpi	r24, 0x01	; 1
 848:	91 05       	cpc	r25, r1
 84a:	c1 f4       	brne	.+48     	; 0x87c <__stack+0x1d>
		{
		case EXTI_INT0:
			CLR_BIT(GICR,GICR_INT_0_BIT);
 84c:	ab e5       	ldi	r26, 0x5B	; 91
 84e:	b0 e0       	ldi	r27, 0x00	; 0
 850:	eb e5       	ldi	r30, 0x5B	; 91
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	80 81       	ld	r24, Z
 856:	8f 7b       	andi	r24, 0xBF	; 191
 858:	8c 93       	st	X, r24
 85a:	12 c0       	rjmp	.+36     	; 0x880 <__stack+0x21>
			break;
		case EXTI_INT1:
			CLR_BIT(GICR,GICR_INT_1_BIT);
 85c:	ab e5       	ldi	r26, 0x5B	; 91
 85e:	b0 e0       	ldi	r27, 0x00	; 0
 860:	eb e5       	ldi	r30, 0x5B	; 91
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	80 81       	ld	r24, Z
 866:	8f 77       	andi	r24, 0x7F	; 127
 868:	8c 93       	st	X, r24
 86a:	0a c0       	rjmp	.+20     	; 0x880 <__stack+0x21>
			break;
		case EXTI_INT2:
			CLR_BIT(GICR,GICR_INT_2_BIT);
 86c:	ab e5       	ldi	r26, 0x5B	; 91
 86e:	b0 e0       	ldi	r27, 0x00	; 0
 870:	eb e5       	ldi	r30, 0x5B	; 91
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	80 81       	ld	r24, Z
 876:	8f 7d       	andi	r24, 0xDF	; 223
 878:	8c 93       	st	X, r24
 87a:	02 c0       	rjmp	.+4      	; 0x880 <__stack+0x21>
			break;
		default:
			Local_u8ErrorState=NOK;
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8ErrorState;
 880:	89 81       	ldd	r24, Y+1	; 0x01
}
 882:	0f 90       	pop	r0
 884:	0f 90       	pop	r0
 886:	0f 90       	pop	r0
 888:	0f 90       	pop	r0
 88a:	cf 91       	pop	r28
 88c:	df 91       	pop	r29
 88e:	08 95       	ret

00000890 <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack(void(*Copy_pvInt0Func)(void))
{
 890:	df 93       	push	r29
 892:	cf 93       	push	r28
 894:	00 d0       	rcall	.+0      	; 0x896 <EXTI_u8Int0SetCallBack+0x6>
 896:	0f 92       	push	r0
 898:	cd b7       	in	r28, 0x3d	; 61
 89a:	de b7       	in	r29, 0x3e	; 62
 89c:	9b 83       	std	Y+3, r25	; 0x03
 89e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
 8a0:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pvInt0Func==NULL)
 8a2:	8a 81       	ldd	r24, Y+2	; 0x02
 8a4:	9b 81       	ldd	r25, Y+3	; 0x03
 8a6:	00 97       	sbiw	r24, 0x00	; 0
 8a8:	19 f4       	brne	.+6      	; 0x8b0 <EXTI_u8Int0SetCallBack+0x20>
	{
		Local_u8ErrorState=NULL_POINTER;
 8aa:	82 e0       	ldi	r24, 0x02	; 2
 8ac:	89 83       	std	Y+1, r24	; 0x01
 8ae:	06 c0       	rjmp	.+12     	; 0x8bc <EXTI_u8Int0SetCallBack+0x2c>
	}
	else
	{
		EXTI_pvInt0Func=Copy_pvInt0Func;
 8b0:	8a 81       	ldd	r24, Y+2	; 0x02
 8b2:	9b 81       	ldd	r25, Y+3	; 0x03
 8b4:	90 93 61 00 	sts	0x0061, r25
 8b8:	80 93 60 00 	sts	0x0060, r24
	}
	return Local_u8ErrorState;
 8bc:	89 81       	ldd	r24, Y+1	; 0x01
}
 8be:	0f 90       	pop	r0
 8c0:	0f 90       	pop	r0
 8c2:	0f 90       	pop	r0
 8c4:	cf 91       	pop	r28
 8c6:	df 91       	pop	r29
 8c8:	08 95       	ret

000008ca <EXTI_u8Int1SetCallBack>:
u8 EXTI_u8Int1SetCallBack(void(*Copy_pvInt1Func)(void))
{
 8ca:	df 93       	push	r29
 8cc:	cf 93       	push	r28
 8ce:	00 d0       	rcall	.+0      	; 0x8d0 <EXTI_u8Int1SetCallBack+0x6>
 8d0:	0f 92       	push	r0
 8d2:	cd b7       	in	r28, 0x3d	; 61
 8d4:	de b7       	in	r29, 0x3e	; 62
 8d6:	9b 83       	std	Y+3, r25	; 0x03
 8d8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
 8da:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pvInt1Func==NULL)
 8dc:	8a 81       	ldd	r24, Y+2	; 0x02
 8de:	9b 81       	ldd	r25, Y+3	; 0x03
 8e0:	00 97       	sbiw	r24, 0x00	; 0
 8e2:	19 f4       	brne	.+6      	; 0x8ea <EXTI_u8Int1SetCallBack+0x20>
	{
		Local_u8ErrorState=NULL_POINTER;
 8e4:	82 e0       	ldi	r24, 0x02	; 2
 8e6:	89 83       	std	Y+1, r24	; 0x01
 8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <EXTI_u8Int1SetCallBack+0x2c>
	}
	else
	{
		EXTI_pvInt1Func=Copy_pvInt1Func;
 8ea:	8a 81       	ldd	r24, Y+2	; 0x02
 8ec:	9b 81       	ldd	r25, Y+3	; 0x03
 8ee:	90 93 63 00 	sts	0x0063, r25
 8f2:	80 93 62 00 	sts	0x0062, r24
	}
	return Local_u8ErrorState;
 8f6:	89 81       	ldd	r24, Y+1	; 0x01
}
 8f8:	0f 90       	pop	r0
 8fa:	0f 90       	pop	r0
 8fc:	0f 90       	pop	r0
 8fe:	cf 91       	pop	r28
 900:	df 91       	pop	r29
 902:	08 95       	ret

00000904 <EXTI_u8Int2SetCallBack>:
u8 EXTI_u8Int2SetCallBack(void(*Copy_pvInt2Func)(void))
{
 904:	df 93       	push	r29
 906:	cf 93       	push	r28
 908:	00 d0       	rcall	.+0      	; 0x90a <EXTI_u8Int2SetCallBack+0x6>
 90a:	0f 92       	push	r0
 90c:	cd b7       	in	r28, 0x3d	; 61
 90e:	de b7       	in	r29, 0x3e	; 62
 910:	9b 83       	std	Y+3, r25	; 0x03
 912:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
 914:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pvInt2Func==NULL)
 916:	8a 81       	ldd	r24, Y+2	; 0x02
 918:	9b 81       	ldd	r25, Y+3	; 0x03
 91a:	00 97       	sbiw	r24, 0x00	; 0
 91c:	19 f4       	brne	.+6      	; 0x924 <EXTI_u8Int2SetCallBack+0x20>
	{
		Local_u8ErrorState=NULL_POINTER;
 91e:	82 e0       	ldi	r24, 0x02	; 2
 920:	89 83       	std	Y+1, r24	; 0x01
 922:	06 c0       	rjmp	.+12     	; 0x930 <EXTI_u8Int2SetCallBack+0x2c>
	}
	else
	{
		EXTI_pvInt2Func=Copy_pvInt2Func;
 924:	8a 81       	ldd	r24, Y+2	; 0x02
 926:	9b 81       	ldd	r25, Y+3	; 0x03
 928:	90 93 65 00 	sts	0x0065, r25
 92c:	80 93 64 00 	sts	0x0064, r24
	}
	return Local_u8ErrorState;
 930:	89 81       	ldd	r24, Y+1	; 0x01
}
 932:	0f 90       	pop	r0
 934:	0f 90       	pop	r0
 936:	0f 90       	pop	r0
 938:	cf 91       	pop	r28
 93a:	df 91       	pop	r29
 93c:	08 95       	ret

0000093e <__vector_1>:

/*ISR*/
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 93e:	1f 92       	push	r1
 940:	0f 92       	push	r0
 942:	0f b6       	in	r0, 0x3f	; 63
 944:	0f 92       	push	r0
 946:	11 24       	eor	r1, r1
 948:	2f 93       	push	r18
 94a:	3f 93       	push	r19
 94c:	4f 93       	push	r20
 94e:	5f 93       	push	r21
 950:	6f 93       	push	r22
 952:	7f 93       	push	r23
 954:	8f 93       	push	r24
 956:	9f 93       	push	r25
 958:	af 93       	push	r26
 95a:	bf 93       	push	r27
 95c:	ef 93       	push	r30
 95e:	ff 93       	push	r31
 960:	df 93       	push	r29
 962:	cf 93       	push	r28
 964:	cd b7       	in	r28, 0x3d	; 61
 966:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvInt0Func();
 968:	e0 91 60 00 	lds	r30, 0x0060
 96c:	f0 91 61 00 	lds	r31, 0x0061
 970:	09 95       	icall
}
 972:	cf 91       	pop	r28
 974:	df 91       	pop	r29
 976:	ff 91       	pop	r31
 978:	ef 91       	pop	r30
 97a:	bf 91       	pop	r27
 97c:	af 91       	pop	r26
 97e:	9f 91       	pop	r25
 980:	8f 91       	pop	r24
 982:	7f 91       	pop	r23
 984:	6f 91       	pop	r22
 986:	5f 91       	pop	r21
 988:	4f 91       	pop	r20
 98a:	3f 91       	pop	r19
 98c:	2f 91       	pop	r18
 98e:	0f 90       	pop	r0
 990:	0f be       	out	0x3f, r0	; 63
 992:	0f 90       	pop	r0
 994:	1f 90       	pop	r1
 996:	18 95       	reti

00000998 <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
 998:	1f 92       	push	r1
 99a:	0f 92       	push	r0
 99c:	0f b6       	in	r0, 0x3f	; 63
 99e:	0f 92       	push	r0
 9a0:	11 24       	eor	r1, r1
 9a2:	2f 93       	push	r18
 9a4:	3f 93       	push	r19
 9a6:	4f 93       	push	r20
 9a8:	5f 93       	push	r21
 9aa:	6f 93       	push	r22
 9ac:	7f 93       	push	r23
 9ae:	8f 93       	push	r24
 9b0:	9f 93       	push	r25
 9b2:	af 93       	push	r26
 9b4:	bf 93       	push	r27
 9b6:	ef 93       	push	r30
 9b8:	ff 93       	push	r31
 9ba:	df 93       	push	r29
 9bc:	cf 93       	push	r28
 9be:	cd b7       	in	r28, 0x3d	; 61
 9c0:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvInt1Func();
 9c2:	e0 91 62 00 	lds	r30, 0x0062
 9c6:	f0 91 63 00 	lds	r31, 0x0063
 9ca:	09 95       	icall
}
 9cc:	cf 91       	pop	r28
 9ce:	df 91       	pop	r29
 9d0:	ff 91       	pop	r31
 9d2:	ef 91       	pop	r30
 9d4:	bf 91       	pop	r27
 9d6:	af 91       	pop	r26
 9d8:	9f 91       	pop	r25
 9da:	8f 91       	pop	r24
 9dc:	7f 91       	pop	r23
 9de:	6f 91       	pop	r22
 9e0:	5f 91       	pop	r21
 9e2:	4f 91       	pop	r20
 9e4:	3f 91       	pop	r19
 9e6:	2f 91       	pop	r18
 9e8:	0f 90       	pop	r0
 9ea:	0f be       	out	0x3f, r0	; 63
 9ec:	0f 90       	pop	r0
 9ee:	1f 90       	pop	r1
 9f0:	18 95       	reti

000009f2 <__vector_3>:
void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
 9f2:	1f 92       	push	r1
 9f4:	0f 92       	push	r0
 9f6:	0f b6       	in	r0, 0x3f	; 63
 9f8:	0f 92       	push	r0
 9fa:	11 24       	eor	r1, r1
 9fc:	2f 93       	push	r18
 9fe:	3f 93       	push	r19
 a00:	4f 93       	push	r20
 a02:	5f 93       	push	r21
 a04:	6f 93       	push	r22
 a06:	7f 93       	push	r23
 a08:	8f 93       	push	r24
 a0a:	9f 93       	push	r25
 a0c:	af 93       	push	r26
 a0e:	bf 93       	push	r27
 a10:	ef 93       	push	r30
 a12:	ff 93       	push	r31
 a14:	df 93       	push	r29
 a16:	cf 93       	push	r28
 a18:	cd b7       	in	r28, 0x3d	; 61
 a1a:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvInt2Func();
 a1c:	e0 91 64 00 	lds	r30, 0x0064
 a20:	f0 91 65 00 	lds	r31, 0x0065
 a24:	09 95       	icall
}
 a26:	cf 91       	pop	r28
 a28:	df 91       	pop	r29
 a2a:	ff 91       	pop	r31
 a2c:	ef 91       	pop	r30
 a2e:	bf 91       	pop	r27
 a30:	af 91       	pop	r26
 a32:	9f 91       	pop	r25
 a34:	8f 91       	pop	r24
 a36:	7f 91       	pop	r23
 a38:	6f 91       	pop	r22
 a3a:	5f 91       	pop	r21
 a3c:	4f 91       	pop	r20
 a3e:	3f 91       	pop	r19
 a40:	2f 91       	pop	r18
 a42:	0f 90       	pop	r0
 a44:	0f be       	out	0x3f, r0	; 63
 a46:	0f 90       	pop	r0
 a48:	1f 90       	pop	r1
 a4a:	18 95       	reti

00000a4c <GIE_VoidEnable>:
#include "GIE_config.h"
#include "GIE_private.h"


void GIE_VoidEnable (void)
{
 a4c:	df 93       	push	r29
 a4e:	cf 93       	push	r28
 a50:	cd b7       	in	r28, 0x3d	; 61
 a52:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I_BIT);
 a54:	af e5       	ldi	r26, 0x5F	; 95
 a56:	b0 e0       	ldi	r27, 0x00	; 0
 a58:	ef e5       	ldi	r30, 0x5F	; 95
 a5a:	f0 e0       	ldi	r31, 0x00	; 0
 a5c:	80 81       	ld	r24, Z
 a5e:	80 68       	ori	r24, 0x80	; 128
 a60:	8c 93       	st	X, r24
}
 a62:	cf 91       	pop	r28
 a64:	df 91       	pop	r29
 a66:	08 95       	ret

00000a68 <GIE_VoidDisable>:


void GIE_VoidDisable (void)
{
 a68:	df 93       	push	r29
 a6a:	cf 93       	push	r28
 a6c:	cd b7       	in	r28, 0x3d	; 61
 a6e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I_BIT);
 a70:	af e5       	ldi	r26, 0x5F	; 95
 a72:	b0 e0       	ldi	r27, 0x00	; 0
 a74:	ef e5       	ldi	r30, 0x5F	; 95
 a76:	f0 e0       	ldi	r31, 0x00	; 0
 a78:	80 81       	ld	r24, Z
 a7a:	8f 77       	andi	r24, 0x7F	; 127
 a7c:	8c 93       	st	X, r24
 a7e:	cf 91       	pop	r28
 a80:	df 91       	pop	r29
 a82:	08 95       	ret

00000a84 <PORT_VoidInit>:
#include"PORT_interface.h"
#include"PORT_config.h"
#include"PORT_private.h"
#include"PORT_register.h"
void PORT_VoidInit()
{
 a84:	df 93       	push	r29
 a86:	cf 93       	push	r28
 a88:	cd b7       	in	r28, 0x3d	; 61
 a8a:	de b7       	in	r29, 0x3e	; 62
	DDRA_reg=PORTA_DIR;
 a8c:	ea e3       	ldi	r30, 0x3A	; 58
 a8e:	f0 e0       	ldi	r31, 0x00	; 0
 a90:	80 ef       	ldi	r24, 0xF0	; 240
 a92:	80 83       	st	Z, r24
	DDRB_reg=PORTB_DIR;
 a94:	e7 e3       	ldi	r30, 0x37	; 55
 a96:	f0 e0       	ldi	r31, 0x00	; 0
 a98:	8b e0       	ldi	r24, 0x0B	; 11
 a9a:	80 83       	st	Z, r24
	DDRC_reg=PORTC_DIR;
 a9c:	e4 e3       	ldi	r30, 0x34	; 52
 a9e:	f0 e0       	ldi	r31, 0x00	; 0
 aa0:	87 e0       	ldi	r24, 0x07	; 7
 aa2:	80 83       	st	Z, r24
	DDRD_reg=PORTD_DIR;
 aa4:	e1 e3       	ldi	r30, 0x31	; 49
 aa6:	f0 e0       	ldi	r31, 0x00	; 0
 aa8:	83 ef       	ldi	r24, 0xF3	; 243
 aaa:	80 83       	st	Z, r24
	
	PORTA_reg=PORTA_InitValue;
 aac:	eb e3       	ldi	r30, 0x3B	; 59
 aae:	f0 e0       	ldi	r31, 0x00	; 0
 ab0:	8f ef       	ldi	r24, 0xFF	; 255
 ab2:	80 83       	st	Z, r24
    PORTB_reg=PORTB_InitValue;
 ab4:	e8 e3       	ldi	r30, 0x38	; 56
 ab6:	f0 e0       	ldi	r31, 0x00	; 0
 ab8:	84 e0       	ldi	r24, 0x04	; 4
 aba:	80 83       	st	Z, r24
    PORTC_reg=PORTC_InitValue;
 abc:	e5 e3       	ldi	r30, 0x35	; 53
 abe:	f0 e0       	ldi	r31, 0x00	; 0
 ac0:	10 82       	st	Z, r1
    PORTD_reg=PORTD_InitValue;
 ac2:	e2 e3       	ldi	r30, 0x32	; 50
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	8c e0       	ldi	r24, 0x0C	; 12
 ac8:	80 83       	st	Z, r24
}
 aca:	cf 91       	pop	r28
 acc:	df 91       	pop	r29
 ace:	08 95       	ret

00000ad0 <main>:
//ISR Prototypes
void ISR_voidInt0(void);
void ISR_voidInt1(void);
void ISR_voidInt2(void);
void main()
{
 ad0:	df 93       	push	r29
 ad2:	cf 93       	push	r28
 ad4:	cd b7       	in	r28, 0x3d	; 61
 ad6:	de b7       	in	r29, 0x3e	; 62
	PORT_VoidInit();
 ad8:	0e 94 42 05 	call	0xa84	; 0xa84 <PORT_VoidInit>
	GIE_VoidEnable();
 adc:	0e 94 26 05 	call	0xa4c	; 0xa4c <GIE_VoidEnable>
	//EXTI_voidInt0Init();
	//EXTI_voidInt1Init();
	//EXTI_voidInt2Init();
	EXTI_u8InterruptEnable(EXTI_INT0);
 ae0:	81 e0       	ldi	r24, 0x01	; 1
 ae2:	0e 94 cc 03 	call	0x798	; 0x798 <EXTI_u8InterruptEnable>
	EXTI_u8InterruptEnable(EXTI_INT1);
 ae6:	82 e0       	ldi	r24, 0x02	; 2
 ae8:	0e 94 cc 03 	call	0x798	; 0x798 <EXTI_u8InterruptEnable>
	EXTI_u8InterruptEnable(EXTI_INT2);
 aec:	83 e0       	ldi	r24, 0x03	; 3
 aee:	0e 94 cc 03 	call	0x798	; 0x798 <EXTI_u8InterruptEnable>
	EXTI_u8SetControlSense(EXTI_FALLING,EXTI_INT0);
 af2:	81 e0       	ldi	r24, 0x01	; 1
 af4:	61 e0       	ldi	r22, 0x01	; 1
 af6:	0e 94 c8 02 	call	0x590	; 0x590 <EXTI_u8SetControlSense>
	EXTI_u8SetControlSense(EXTI_FALLING,EXTI_INT1);
 afa:	81 e0       	ldi	r24, 0x01	; 1
 afc:	62 e0       	ldi	r22, 0x02	; 2
 afe:	0e 94 c8 02 	call	0x590	; 0x590 <EXTI_u8SetControlSense>
	EXTI_u8SetControlSense(EXTI_FALLING,EXTI_INT2);
 b02:	81 e0       	ldi	r24, 0x01	; 1
 b04:	63 e0       	ldi	r22, 0x03	; 3
 b06:	0e 94 c8 02 	call	0x590	; 0x590 <EXTI_u8SetControlSense>
	EXTI_u8Int0SetCallBack(&ISR_voidInt0);//"&" for misra rules
 b0a:	82 e9       	ldi	r24, 0x92	; 146
 b0c:	95 e0       	ldi	r25, 0x05	; 5
 b0e:	0e 94 48 04 	call	0x890	; 0x890 <EXTI_u8Int0SetCallBack>
	EXTI_u8Int1SetCallBack(&ISR_voidInt1);//"&" for misra rules
 b12:	8e e9       	ldi	r24, 0x9E	; 158
 b14:	95 e0       	ldi	r25, 0x05	; 5
 b16:	0e 94 65 04 	call	0x8ca	; 0x8ca <EXTI_u8Int1SetCallBack>
	EXTI_u8Int2SetCallBack(&ISR_voidInt2);//"&" for misra rules
 b1a:	8a ea       	ldi	r24, 0xAA	; 170
 b1c:	95 e0       	ldi	r25, 0x05	; 5
 b1e:	0e 94 82 04 	call	0x904	; 0x904 <EXTI_u8Int2SetCallBack>
 b22:	ff cf       	rjmp	.-2      	; 0xb22 <main+0x52>

00000b24 <ISR_voidInt0>:
		//_delay_ms(2000);
		//DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN_0,0);
	}
}
void ISR_voidInt0(void)
{
 b24:	df 93       	push	r29
 b26:	cf 93       	push	r28
 b28:	cd b7       	in	r28, 0x3d	; 61
 b2a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN_0,1);
 b2c:	81 e0       	ldi	r24, 0x01	; 1
 b2e:	60 e0       	ldi	r22, 0x00	; 0
 b30:	41 e0       	ldi	r20, 0x01	; 1
 b32:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
}
 b36:	cf 91       	pop	r28
 b38:	df 91       	pop	r29
 b3a:	08 95       	ret

00000b3c <ISR_voidInt1>:
void ISR_voidInt1(void)
{
 b3c:	df 93       	push	r29
 b3e:	cf 93       	push	r28
 b40:	cd b7       	in	r28, 0x3d	; 61
 b42:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN_1,1);
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	61 e0       	ldi	r22, 0x01	; 1
 b48:	41 e0       	ldi	r20, 0x01	; 1
 b4a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
}
 b4e:	cf 91       	pop	r28
 b50:	df 91       	pop	r29
 b52:	08 95       	ret

00000b54 <ISR_voidInt2>:
void ISR_voidInt2(void)
{
 b54:	df 93       	push	r29
 b56:	cf 93       	push	r28
 b58:	cd b7       	in	r28, 0x3d	; 61
 b5a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN_3,1);
 b5c:	81 e0       	ldi	r24, 0x01	; 1
 b5e:	63 e0       	ldi	r22, 0x03	; 3
 b60:	41 e0       	ldi	r20, 0x01	; 1
 b62:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
}
 b66:	cf 91       	pop	r28
 b68:	df 91       	pop	r29
 b6a:	08 95       	ret

00000b6c <_exit>:
 b6c:	f8 94       	cli

00000b6e <__stop_program>:
 b6e:	ff cf       	rjmp	.-2      	; 0xb6e <__stop_program>
