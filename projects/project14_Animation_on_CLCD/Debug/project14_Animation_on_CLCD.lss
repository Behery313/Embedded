
project14_Animation_on_CLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016c  00800060  00003a38  00003acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008001cc  008001cc  00003c38  2**0
                  ALLOC
  3 .stab         000026e8  00000000  00000000  00003c38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cc1  00000000  00000000  00006320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007121  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007291  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ab74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000acd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000af61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b72f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3c       	cpi	r26, 0xCD	; 205
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 aa 0c 	call	0x1954	; 0x1954 <main>
      8a:	0c 94 1a 1d 	jmp	0x3a34	; 0x3a34 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_VoidSendCommand>:
/*Send data counter is number of times that function send data was called .The number
 *specifies the position of the next character to be written on the first row */

/*send command in 4 bit mode operate on 4 bits only when using it send 4 bits ONLY*/
void CLCD_VoidSendCommand(u8 Copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	/**********SET RS to 0 for command*************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8LOW);
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	
	/**********SET RW to 0 to write****************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8LOW);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>

	/*4 BIT OPERATION*/
#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE

	/*send the 4 bits received*/
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_0,GET_BIT(Copy_u8Command,0));
     b70:	8f 85       	ldd	r24, Y+15	; 0x0f
     b72:	98 2f       	mov	r25, r24
     b74:	91 70       	andi	r25, 0x01	; 1
     b76:	83 e0       	ldi	r24, 0x03	; 3
     b78:	64 e0       	ldi	r22, 0x04	; 4
     b7a:	49 2f       	mov	r20, r25
     b7c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_1,GET_BIT(Copy_u8Command,1));
     b80:	8f 85       	ldd	r24, Y+15	; 0x0f
     b82:	86 95       	lsr	r24
     b84:	98 2f       	mov	r25, r24
     b86:	91 70       	andi	r25, 0x01	; 1
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	65 e0       	ldi	r22, 0x05	; 5
     b8c:	49 2f       	mov	r20, r25
     b8e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_2,GET_BIT(Copy_u8Command,2));
     b92:	8f 85       	ldd	r24, Y+15	; 0x0f
     b94:	86 95       	lsr	r24
     b96:	86 95       	lsr	r24
     b98:	98 2f       	mov	r25, r24
     b9a:	91 70       	andi	r25, 0x01	; 1
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	66 e0       	ldi	r22, 0x06	; 6
     ba0:	49 2f       	mov	r20, r25
     ba2:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_3,GET_BIT(Copy_u8Command,3));
     ba6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ba8:	86 95       	lsr	r24
     baa:	86 95       	lsr	r24
     bac:	86 95       	lsr	r24
     bae:	98 2f       	mov	r25, r24
     bb0:	91 70       	andi	r25, 0x01	; 1
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	67 e0       	ldi	r22, 0x07	; 7
     bb6:	49 2f       	mov	r20, r25
     bb8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
//	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_2,GET_BIT(Copy_u8Command,2));
//	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_3,GET_BIT(Copy_u8Command,3));
#endif
	
	/**********Send enable pulse********************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8HIGH);//set enable pin to high for the microcontroller on the lcd to read the data sent to it
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	62 e0       	ldi	r22, 0x02	; 2
     bc0:	41 e0       	ldi	r20, 0x01	; 1
     bc2:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e4       	ldi	r27, 0x40	; 64
     bce:	8b 87       	std	Y+11, r24	; 0x0b
     bd0:	9c 87       	std	Y+12, r25	; 0x0c
     bd2:	ad 87       	std	Y+13, r26	; 0x0d
     bd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd6:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd8:	7c 85       	ldd	r23, Y+12	; 0x0c
     bda:	8d 85       	ldd	r24, Y+13	; 0x0d
     bdc:	9e 85       	ldd	r25, Y+14	; 0x0e
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e8       	ldi	r19, 0x80	; 128
     be2:	4b e3       	ldi	r20, 0x3B	; 59
     be4:	55 e4       	ldi	r21, 0x45	; 69
     be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bea:	dc 01       	movw	r26, r24
     bec:	cb 01       	movw	r24, r22
     bee:	8f 83       	std	Y+7, r24	; 0x07
     bf0:	98 87       	std	Y+8, r25	; 0x08
     bf2:	a9 87       	std	Y+9, r26	; 0x09
     bf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bf6:	6f 81       	ldd	r22, Y+7	; 0x07
     bf8:	78 85       	ldd	r23, Y+8	; 0x08
     bfa:	89 85       	ldd	r24, Y+9	; 0x09
     bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e8       	ldi	r20, 0x80	; 128
     c04:	5f e3       	ldi	r21, 0x3F	; 63
     c06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c0a:	88 23       	and	r24, r24
     c0c:	2c f4       	brge	.+10     	; 0xc18 <CLCD_VoidSendCommand+0xd2>
		__ticks = 1;
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	9e 83       	std	Y+6, r25	; 0x06
     c14:	8d 83       	std	Y+5, r24	; 0x05
     c16:	3f c0       	rjmp	.+126    	; 0xc96 <CLCD_VoidSendCommand+0x150>
	else if (__tmp > 65535)
     c18:	6f 81       	ldd	r22, Y+7	; 0x07
     c1a:	78 85       	ldd	r23, Y+8	; 0x08
     c1c:	89 85       	ldd	r24, Y+9	; 0x09
     c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	3f ef       	ldi	r19, 0xFF	; 255
     c24:	4f e7       	ldi	r20, 0x7F	; 127
     c26:	57 e4       	ldi	r21, 0x47	; 71
     c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c2c:	18 16       	cp	r1, r24
     c2e:	4c f5       	brge	.+82     	; 0xc82 <CLCD_VoidSendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c30:	6b 85       	ldd	r22, Y+11	; 0x0b
     c32:	7c 85       	ldd	r23, Y+12	; 0x0c
     c34:	8d 85       	ldd	r24, Y+13	; 0x0d
     c36:	9e 85       	ldd	r25, Y+14	; 0x0e
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	40 e2       	ldi	r20, 0x20	; 32
     c3e:	51 e4       	ldi	r21, 0x41	; 65
     c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	bc 01       	movw	r22, r24
     c4a:	cd 01       	movw	r24, r26
     c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	9e 83       	std	Y+6, r25	; 0x06
     c56:	8d 83       	std	Y+5, r24	; 0x05
     c58:	0f c0       	rjmp	.+30     	; 0xc78 <CLCD_VoidSendCommand+0x132>
     c5a:	8c e2       	ldi	r24, 0x2C	; 44
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	9c 83       	std	Y+4, r25	; 0x04
     c60:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c62:	8b 81       	ldd	r24, Y+3	; 0x03
     c64:	9c 81       	ldd	r25, Y+4	; 0x04
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <CLCD_VoidSendCommand+0x120>
     c6a:	9c 83       	std	Y+4, r25	; 0x04
     c6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6e:	8d 81       	ldd	r24, Y+5	; 0x05
     c70:	9e 81       	ldd	r25, Y+6	; 0x06
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	9e 83       	std	Y+6, r25	; 0x06
     c76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c78:	8d 81       	ldd	r24, Y+5	; 0x05
     c7a:	9e 81       	ldd	r25, Y+6	; 0x06
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	69 f7       	brne	.-38     	; 0xc5a <CLCD_VoidSendCommand+0x114>
     c80:	14 c0       	rjmp	.+40     	; 0xcaa <CLCD_VoidSendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c82:	6f 81       	ldd	r22, Y+7	; 0x07
     c84:	78 85       	ldd	r23, Y+8	; 0x08
     c86:	89 85       	ldd	r24, Y+9	; 0x09
     c88:	9a 85       	ldd	r25, Y+10	; 0x0a
     c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	9e 83       	std	Y+6, r25	; 0x06
     c94:	8d 83       	std	Y+5, r24	; 0x05
     c96:	8d 81       	ldd	r24, Y+5	; 0x05
     c98:	9e 81       	ldd	r25, Y+6	; 0x06
     c9a:	9a 83       	std	Y+2, r25	; 0x02
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	9a 81       	ldd	r25, Y+2	; 0x02
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <CLCD_VoidSendCommand+0x15c>
     ca6:	9a 83       	std	Y+2, r25	; 0x02
     ca8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);//max delay value specified by the initializations after sending the command
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8LOW);
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	62 e0       	ldi	r22, 0x02	; 2
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
}
     cb4:	2f 96       	adiw	r28, 0x0f	; 15
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <CLCD_VoidSendData>:

/*send data can work in 4 bit mode while sending 8 bit data*/
void CLCD_VoidSendData(u8 Copy_u8Data)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	6d 97       	sbiw	r28, 0x1d	; 29
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	8d 8f       	std	Y+29, r24	; 0x1d
	/*check if the function is called 16 times the first row is completely filled then write to the second row*/
	if(Global_u8SendDataCounter==MAX_COLUMNS)
     cdc:	80 91 cc 01 	lds	r24, 0x01CC
     ce0:	80 31       	cpi	r24, 0x10	; 16
     ce2:	21 f4       	brne	.+8      	; 0xcec <CLCD_VoidSendData+0x26>
	{
		CLCD_VoidGoToXY(1,0);
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_VoidGoToXY>
	}
	/**********SET RS to 1 for DATA****************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8HIGH);
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	41 e0       	ldi	r20, 0x01	; 1
     cf2:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	/**********SET RW to 0 to write****************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8LOW);
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_8_BIT_DATA_PORT,Copy_u8Data);

	/*4 BIT OPERATION*/
	#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE
	/*send the 4 MSBs */
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_0,GET_BIT(Copy_u8Data,4));
     d00:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d02:	82 95       	swap	r24
     d04:	8f 70       	andi	r24, 0x0F	; 15
     d06:	98 2f       	mov	r25, r24
     d08:	91 70       	andi	r25, 0x01	; 1
     d0a:	83 e0       	ldi	r24, 0x03	; 3
     d0c:	64 e0       	ldi	r22, 0x04	; 4
     d0e:	49 2f       	mov	r20, r25
     d10:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_1,GET_BIT(Copy_u8Data,5));
     d14:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d16:	82 95       	swap	r24
     d18:	86 95       	lsr	r24
     d1a:	87 70       	andi	r24, 0x07	; 7
     d1c:	98 2f       	mov	r25, r24
     d1e:	91 70       	andi	r25, 0x01	; 1
     d20:	83 e0       	ldi	r24, 0x03	; 3
     d22:	65 e0       	ldi	r22, 0x05	; 5
     d24:	49 2f       	mov	r20, r25
     d26:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_2,GET_BIT(Copy_u8Data,6));
     d2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d2c:	82 95       	swap	r24
     d2e:	86 95       	lsr	r24
     d30:	86 95       	lsr	r24
     d32:	83 70       	andi	r24, 0x03	; 3
     d34:	98 2f       	mov	r25, r24
     d36:	91 70       	andi	r25, 0x01	; 1
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	66 e0       	ldi	r22, 0x06	; 6
     d3c:	49 2f       	mov	r20, r25
     d3e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_3,GET_BIT(Copy_u8Data,7));
     d42:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d44:	98 2f       	mov	r25, r24
     d46:	99 1f       	adc	r25, r25
     d48:	99 27       	eor	r25, r25
     d4a:	99 1f       	adc	r25, r25
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	67 e0       	ldi	r22, 0x07	; 7
     d50:	49 2f       	mov	r20, r25
     d52:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
//CHECK*/*****************************************************************************************************************************/
//CHECK	/*send enable pulse*/
/*CHECK*/ DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8HIGH);//set enable pin to high for the microcontroller on the lcd to read the data sent to it
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	62 e0       	ldi	r22, 0x02	; 2
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	a0 e0       	ldi	r26, 0x00	; 0
     d66:	b0 e4       	ldi	r27, 0x40	; 64
     d68:	89 8f       	std	Y+25, r24	; 0x19
     d6a:	9a 8f       	std	Y+26, r25	; 0x1a
     d6c:	ab 8f       	std	Y+27, r26	; 0x1b
     d6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d70:	69 8d       	ldd	r22, Y+25	; 0x19
     d72:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d74:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d76:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e8       	ldi	r19, 0x80	; 128
     d7c:	4b e3       	ldi	r20, 0x3B	; 59
     d7e:	55 e4       	ldi	r21, 0x45	; 69
     d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	8d 8b       	std	Y+21, r24	; 0x15
     d8a:	9e 8b       	std	Y+22, r25	; 0x16
     d8c:	af 8b       	std	Y+23, r26	; 0x17
     d8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d90:	6d 89       	ldd	r22, Y+21	; 0x15
     d92:	7e 89       	ldd	r23, Y+22	; 0x16
     d94:	8f 89       	ldd	r24, Y+23	; 0x17
     d96:	98 8d       	ldd	r25, Y+24	; 0x18
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	40 e8       	ldi	r20, 0x80	; 128
     d9e:	5f e3       	ldi	r21, 0x3F	; 63
     da0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     da4:	88 23       	and	r24, r24
     da6:	2c f4       	brge	.+10     	; 0xdb2 <CLCD_VoidSendData+0xec>
		__ticks = 1;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	9c 8b       	std	Y+20, r25	; 0x14
     dae:	8b 8b       	std	Y+19, r24	; 0x13
     db0:	3f c0       	rjmp	.+126    	; 0xe30 <CLCD_VoidSendData+0x16a>
	else if (__tmp > 65535)
     db2:	6d 89       	ldd	r22, Y+21	; 0x15
     db4:	7e 89       	ldd	r23, Y+22	; 0x16
     db6:	8f 89       	ldd	r24, Y+23	; 0x17
     db8:	98 8d       	ldd	r25, Y+24	; 0x18
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	3f ef       	ldi	r19, 0xFF	; 255
     dbe:	4f e7       	ldi	r20, 0x7F	; 127
     dc0:	57 e4       	ldi	r21, 0x47	; 71
     dc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dc6:	18 16       	cp	r1, r24
     dc8:	4c f5       	brge	.+82     	; 0xe1c <CLCD_VoidSendData+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dca:	69 8d       	ldd	r22, Y+25	; 0x19
     dcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dce:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 e2       	ldi	r20, 0x20	; 32
     dd8:	51 e4       	ldi	r21, 0x41	; 65
     dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	bc 01       	movw	r22, r24
     de4:	cd 01       	movw	r24, r26
     de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	9c 8b       	std	Y+20, r25	; 0x14
     df0:	8b 8b       	std	Y+19, r24	; 0x13
     df2:	0f c0       	rjmp	.+30     	; 0xe12 <CLCD_VoidSendData+0x14c>
     df4:	8c e2       	ldi	r24, 0x2C	; 44
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	9a 8b       	std	Y+18, r25	; 0x12
     dfa:	89 8b       	std	Y+17, r24	; 0x11
     dfc:	89 89       	ldd	r24, Y+17	; 0x11
     dfe:	9a 89       	ldd	r25, Y+18	; 0x12
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <CLCD_VoidSendData+0x13a>
     e04:	9a 8b       	std	Y+18, r25	; 0x12
     e06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e08:	8b 89       	ldd	r24, Y+19	; 0x13
     e0a:	9c 89       	ldd	r25, Y+20	; 0x14
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	9c 8b       	std	Y+20, r25	; 0x14
     e10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e12:	8b 89       	ldd	r24, Y+19	; 0x13
     e14:	9c 89       	ldd	r25, Y+20	; 0x14
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	69 f7       	brne	.-38     	; 0xdf4 <CLCD_VoidSendData+0x12e>
     e1a:	14 c0       	rjmp	.+40     	; 0xe44 <CLCD_VoidSendData+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e1c:	6d 89       	ldd	r22, Y+21	; 0x15
     e1e:	7e 89       	ldd	r23, Y+22	; 0x16
     e20:	8f 89       	ldd	r24, Y+23	; 0x17
     e22:	98 8d       	ldd	r25, Y+24	; 0x18
     e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	9c 8b       	std	Y+20, r25	; 0x14
     e2e:	8b 8b       	std	Y+19, r24	; 0x13
     e30:	8b 89       	ldd	r24, Y+19	; 0x13
     e32:	9c 89       	ldd	r25, Y+20	; 0x14
     e34:	98 8b       	std	Y+16, r25	; 0x10
     e36:	8f 87       	std	Y+15, r24	; 0x0f
     e38:	8f 85       	ldd	r24, Y+15	; 0x0f
     e3a:	98 89       	ldd	r25, Y+16	; 0x10
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <CLCD_VoidSendData+0x176>
     e40:	98 8b       	std	Y+16, r25	; 0x10
     e42:	8f 87       	std	Y+15, r24	; 0x0f
/*CHECK*/		_delay_ms(2);//max delay value specified by the initializations after sending the command
/*CHECK*/	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8LOW);
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	62 e0       	ldi	r22, 0x02	; 2
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	/*****************************************************************************************************************************/
	/*send the 4 LSBs*/
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_0,GET_BIT(Copy_u8Data,0));
     e4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e50:	98 2f       	mov	r25, r24
     e52:	91 70       	andi	r25, 0x01	; 1
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	64 e0       	ldi	r22, 0x04	; 4
     e58:	49 2f       	mov	r20, r25
     e5a:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_1,GET_BIT(Copy_u8Data,1));
     e5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e60:	86 95       	lsr	r24
     e62:	98 2f       	mov	r25, r24
     e64:	91 70       	andi	r25, 0x01	; 1
     e66:	83 e0       	ldi	r24, 0x03	; 3
     e68:	65 e0       	ldi	r22, 0x05	; 5
     e6a:	49 2f       	mov	r20, r25
     e6c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_2,GET_BIT(Copy_u8Data,2));
     e70:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e72:	86 95       	lsr	r24
     e74:	86 95       	lsr	r24
     e76:	98 2f       	mov	r25, r24
     e78:	91 70       	andi	r25, 0x01	; 1
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	66 e0       	ldi	r22, 0x06	; 6
     e7e:	49 2f       	mov	r20, r25
     e80:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_3,GET_BIT(Copy_u8Data,3));
     e84:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e86:	86 95       	lsr	r24
     e88:	86 95       	lsr	r24
     e8a:	86 95       	lsr	r24
     e8c:	98 2f       	mov	r25, r24
     e8e:	91 70       	andi	r25, 0x01	; 1
     e90:	83 e0       	ldi	r24, 0x03	; 3
     e92:	67 e0       	ldi	r22, 0x07	; 7
     e94:	49 2f       	mov	r20, r25
     e96:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
#endif
	/**********Send enable pulse********************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8HIGH);//set enable pin to high for the microcontroller on the lcd to read the data sent to it
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	62 e0       	ldi	r22, 0x02	; 2
     e9e:	41 e0       	ldi	r20, 0x01	; 1
     ea0:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	a0 e0       	ldi	r26, 0x00	; 0
     eaa:	b0 e4       	ldi	r27, 0x40	; 64
     eac:	8b 87       	std	Y+11, r24	; 0x0b
     eae:	9c 87       	std	Y+12, r25	; 0x0c
     eb0:	ad 87       	std	Y+13, r26	; 0x0d
     eb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eba:	9e 85       	ldd	r25, Y+14	; 0x0e
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e8       	ldi	r19, 0x80	; 128
     ec0:	4b e3       	ldi	r20, 0x3B	; 59
     ec2:	55 e4       	ldi	r21, 0x45	; 69
     ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	8f 83       	std	Y+7, r24	; 0x07
     ece:	98 87       	std	Y+8, r25	; 0x08
     ed0:	a9 87       	std	Y+9, r26	; 0x09
     ed2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ed4:	6f 81       	ldd	r22, Y+7	; 0x07
     ed6:	78 85       	ldd	r23, Y+8	; 0x08
     ed8:	89 85       	ldd	r24, Y+9	; 0x09
     eda:	9a 85       	ldd	r25, Y+10	; 0x0a
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e8       	ldi	r20, 0x80	; 128
     ee2:	5f e3       	ldi	r21, 0x3F	; 63
     ee4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ee8:	88 23       	and	r24, r24
     eea:	2c f4       	brge	.+10     	; 0xef6 <CLCD_VoidSendData+0x230>
		__ticks = 1;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	9e 83       	std	Y+6, r25	; 0x06
     ef2:	8d 83       	std	Y+5, r24	; 0x05
     ef4:	3f c0       	rjmp	.+126    	; 0xf74 <CLCD_VoidSendData+0x2ae>
	else if (__tmp > 65535)
     ef6:	6f 81       	ldd	r22, Y+7	; 0x07
     ef8:	78 85       	ldd	r23, Y+8	; 0x08
     efa:	89 85       	ldd	r24, Y+9	; 0x09
     efc:	9a 85       	ldd	r25, Y+10	; 0x0a
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	3f ef       	ldi	r19, 0xFF	; 255
     f02:	4f e7       	ldi	r20, 0x7F	; 127
     f04:	57 e4       	ldi	r21, 0x47	; 71
     f06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f0a:	18 16       	cp	r1, r24
     f0c:	4c f5       	brge	.+82     	; 0xf60 <CLCD_VoidSendData+0x29a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f10:	7c 85       	ldd	r23, Y+12	; 0x0c
     f12:	8d 85       	ldd	r24, Y+13	; 0x0d
     f14:	9e 85       	ldd	r25, Y+14	; 0x0e
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e2       	ldi	r20, 0x20	; 32
     f1c:	51 e4       	ldi	r21, 0x41	; 65
     f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	bc 01       	movw	r22, r24
     f28:	cd 01       	movw	r24, r26
     f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	8d 83       	std	Y+5, r24	; 0x05
     f36:	0f c0       	rjmp	.+30     	; 0xf56 <CLCD_VoidSendData+0x290>
     f38:	8c e2       	ldi	r24, 0x2C	; 44
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	9c 83       	std	Y+4, r25	; 0x04
     f3e:	8b 83       	std	Y+3, r24	; 0x03
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <CLCD_VoidSendData+0x27e>
     f48:	9c 83       	std	Y+4, r25	; 0x04
     f4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f4c:	8d 81       	ldd	r24, Y+5	; 0x05
     f4e:	9e 81       	ldd	r25, Y+6	; 0x06
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	9e 83       	std	Y+6, r25	; 0x06
     f54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f56:	8d 81       	ldd	r24, Y+5	; 0x05
     f58:	9e 81       	ldd	r25, Y+6	; 0x06
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	69 f7       	brne	.-38     	; 0xf38 <CLCD_VoidSendData+0x272>
     f5e:	14 c0       	rjmp	.+40     	; 0xf88 <CLCD_VoidSendData+0x2c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f60:	6f 81       	ldd	r22, Y+7	; 0x07
     f62:	78 85       	ldd	r23, Y+8	; 0x08
     f64:	89 85       	ldd	r24, Y+9	; 0x09
     f66:	9a 85       	ldd	r25, Y+10	; 0x0a
     f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	9e 83       	std	Y+6, r25	; 0x06
     f72:	8d 83       	std	Y+5, r24	; 0x05
     f74:	8d 81       	ldd	r24, Y+5	; 0x05
     f76:	9e 81       	ldd	r25, Y+6	; 0x06
     f78:	9a 83       	std	Y+2, r25	; 0x02
     f7a:	89 83       	std	Y+1, r24	; 0x01
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <CLCD_VoidSendData+0x2ba>
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);//delay value specified by the datasheet
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8LOW);
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	62 e0       	ldi	r22, 0x02	; 2
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>

	/*increment the static variable so if it reaches 15*/
		Global_u8SendDataCounter++;
     f92:	80 91 cc 01 	lds	r24, 0x01CC
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	80 93 cc 01 	sts	0x01CC, r24
}
     f9c:	6d 96       	adiw	r28, 0x1d	; 29
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <CLCD_VoidInit>:
void CLCD_VoidInit(void)
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	2e 97       	sbiw	r28, 0x0e	; 14
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	a0 ef       	ldi	r26, 0xF0	; 240
     fc8:	b1 e4       	ldi	r27, 0x41	; 65
     fca:	8b 87       	std	Y+11, r24	; 0x0b
     fcc:	9c 87       	std	Y+12, r25	; 0x0c
     fce:	ad 87       	std	Y+13, r26	; 0x0d
     fd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e8       	ldi	r19, 0x80	; 128
     fde:	4b e3       	ldi	r20, 0x3B	; 59
     fe0:	55 e4       	ldi	r21, 0x45	; 69
     fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	8f 83       	std	Y+7, r24	; 0x07
     fec:	98 87       	std	Y+8, r25	; 0x08
     fee:	a9 87       	std	Y+9, r26	; 0x09
     ff0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff2:	6f 81       	ldd	r22, Y+7	; 0x07
     ff4:	78 85       	ldd	r23, Y+8	; 0x08
     ff6:	89 85       	ldd	r24, Y+9	; 0x09
     ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e8       	ldi	r20, 0x80	; 128
    1000:	5f e3       	ldi	r21, 0x3F	; 63
    1002:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1006:	88 23       	and	r24, r24
    1008:	2c f4       	brge	.+10     	; 0x1014 <CLCD_VoidInit+0x66>
		__ticks = 1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	9e 83       	std	Y+6, r25	; 0x06
    1010:	8d 83       	std	Y+5, r24	; 0x05
    1012:	3f c0       	rjmp	.+126    	; 0x1092 <CLCD_VoidInit+0xe4>
	else if (__tmp > 65535)
    1014:	6f 81       	ldd	r22, Y+7	; 0x07
    1016:	78 85       	ldd	r23, Y+8	; 0x08
    1018:	89 85       	ldd	r24, Y+9	; 0x09
    101a:	9a 85       	ldd	r25, Y+10	; 0x0a
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	3f ef       	ldi	r19, 0xFF	; 255
    1020:	4f e7       	ldi	r20, 0x7F	; 127
    1022:	57 e4       	ldi	r21, 0x47	; 71
    1024:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1028:	18 16       	cp	r1, r24
    102a:	4c f5       	brge	.+82     	; 0x107e <CLCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102c:	6b 85       	ldd	r22, Y+11	; 0x0b
    102e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1030:	8d 85       	ldd	r24, Y+13	; 0x0d
    1032:	9e 85       	ldd	r25, Y+14	; 0x0e
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e2       	ldi	r20, 0x20	; 32
    103a:	51 e4       	ldi	r21, 0x41	; 65
    103c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	bc 01       	movw	r22, r24
    1046:	cd 01       	movw	r24, r26
    1048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	9e 83       	std	Y+6, r25	; 0x06
    1052:	8d 83       	std	Y+5, r24	; 0x05
    1054:	0f c0       	rjmp	.+30     	; 0x1074 <CLCD_VoidInit+0xc6>
    1056:	8c e2       	ldi	r24, 0x2C	; 44
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	9c 83       	std	Y+4, r25	; 0x04
    105c:	8b 83       	std	Y+3, r24	; 0x03
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	9c 81       	ldd	r25, Y+4	; 0x04
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	f1 f7       	brne	.-4      	; 0x1062 <CLCD_VoidInit+0xb4>
    1066:	9c 83       	std	Y+4, r25	; 0x04
    1068:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	9e 83       	std	Y+6, r25	; 0x06
    1072:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	69 f7       	brne	.-38     	; 0x1056 <CLCD_VoidInit+0xa8>
    107c:	14 c0       	rjmp	.+40     	; 0x10a6 <CLCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107e:	6f 81       	ldd	r22, Y+7	; 0x07
    1080:	78 85       	ldd	r23, Y+8	; 0x08
    1082:	89 85       	ldd	r24, Y+9	; 0x09
    1084:	9a 85       	ldd	r25, Y+10	; 0x0a
    1086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	9e 83       	std	Y+6, r25	; 0x06
    1090:	8d 83       	std	Y+5, r24	; 0x05
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	9e 81       	ldd	r25, Y+6	; 0x06
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	f1 f7       	brne	.-4      	; 0x109e <CLCD_VoidInit+0xf0>
    10a2:	9a 83       	std	Y+2, r25	; 0x02
    10a4:	89 83       	std	Y+1, r24	; 0x01
#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE
	/*function set : set the DATA port to specified value from datasheet */
	/*N:number of lines used in the LCD '0' for 1 line and '1' for 2 lines*/
	/*F:charachter size either 5x8 or 5x11 '0' for 5x8 and '1' for 5x11*/
	/*note that character is displayed in either 5x10 or 5x7 the extra row is for the cursor*/
	CLCD_VoidSendCommand(0b0010);//use 5x8 and 2 lines
    10a6:	82 e0       	ldi	r24, 0x02	; 2
    10a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
	CLCD_VoidSendCommand(0b0010);
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
	CLCD_VoidSendCommand(0b1000);
    10b2:	88 e0       	ldi	r24, 0x08	; 8
    10b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>

	/*Display ON/OFF control:control whether to turn on or off the display*/
	/*D:display on or off to save power '0' for off '1' for on*/
	/*C:cursor on or off '0' for off '1' for on*/
	/*B:cursor blinks or not '0' for nonblinking '1' for blinking*/
	CLCD_VoidSendCommand(0b0000);
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
	CLCD_VoidSendCommand(0b1100);
    10be:	8c e0       	ldi	r24, 0x0C	; 12
    10c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
	
	/*clear display*/
	CLCD_VoidSendCommand(0b0000);
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
	CLCD_VoidSendCommand(0b0001);
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
#endif
	
}
    10d0:	2e 96       	adiw	r28, 0x0e	; 14
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <CLCD_VoidSendString>:
void CLCD_VoidSendString(const char * CLCD_pcString)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <CLCD_VoidSendString+0x6>
    10e8:	0f 92       	push	r0
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	9b 83       	std	Y+3, r25	; 0x03
    10f0:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 i=0;*(CLCD_pcString+i)!='\0';i++)
    10f2:	19 82       	std	Y+1, r1	; 0x01
    10f4:	0e c0       	rjmp	.+28     	; 0x1112 <CLCD_VoidSendString+0x30>
	{
		CLCD_VoidSendData(CLCD_pcString[i]);
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1100:	fc 01       	movw	r30, r24
    1102:	e2 0f       	add	r30, r18
    1104:	f3 1f       	adc	r31, r19
    1106:	80 81       	ld	r24, Z
    1108:	0e 94 63 06 	call	0xcc6	; 0xcc6 <CLCD_VoidSendData>
	
}
void CLCD_VoidSendString(const char * CLCD_pcString)
{

	for(u8 i=0;*(CLCD_pcString+i)!='\0';i++)
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	8f 5f       	subi	r24, 0xFF	; 255
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	9b 81       	ldd	r25, Y+3	; 0x03
    111c:	fc 01       	movw	r30, r24
    111e:	e2 0f       	add	r30, r18
    1120:	f3 1f       	adc	r31, r19
    1122:	80 81       	ld	r24, Z
    1124:	88 23       	and	r24, r24
    1126:	39 f7       	brne	.-50     	; 0x10f6 <CLCD_VoidSendString+0x14>
	{
		CLCD_VoidSendData(CLCD_pcString[i]);
	}
}
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <CLCD_VoidGoToXY>:
void CLCD_VoidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <CLCD_VoidGoToXY+0x6>
    113a:	0f 92       	push	r0
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	8a 83       	std	Y+2, r24	; 0x02
    1142:	6b 83       	std	Y+3, r22	; 0x03
	/* we have DDRAM(display data ram used to store values which are shown on the LCD) 2 rows with visible window of 16 columns */
	/*it starts from address 0 till address 40 on the first row the second row starts from address 0x40*/
	/*we notice that if row =0 address = Y and if X=1 Address = 0x40+Y*/
	u8 Local_u8Address;
	/*location in first line*/
	if(Copy_u8XPos==0)
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	88 23       	and	r24, r24
    1148:	19 f4       	brne	.+6      	; 0x1150 <CLCD_VoidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	06 c0       	rjmp	.+12     	; 0x115c <CLCD_VoidGoToXY+0x28>
	}
	/*location 2nd line*/
	else if(Copy_u8XPos==1)
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	19 f4       	brne	.+6      	; 0x115c <CLCD_VoidGoToXY+0x28>
	{
		Local_u8Address=Copy_u8YPos+0x40;
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	80 5c       	subi	r24, 0xC0	; 192
    115a:	89 83       	std	Y+1, r24	; 0x01
#if CLCD_WORKING_MODE==PRE_EIGHT_BIT_MODE
	CLCD_VoidSendCommand(Local_u8Address|1<<7);

#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE
	/*send the 4 MSBs. Make the MSBs to make them LSBs as function copies the 4 LSBs*/
	CLCD_VoidSendCommand((Local_u8Address|1<<7)>>4);
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	80 68       	ori	r24, 0x80	; 128
    1160:	82 95       	swap	r24
    1162:	8f 70       	andi	r24, 0x0F	; 15
    1164:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
	/*send the 4 LSBs we don't care about the value of the 4MSBs as function only operates on the LSBs so we dont need to set MSBs to 0*/
	/*we don't need to set the 6th bit to high as we are sending the LSBs and we don't care about the MSBs*/
	CLCD_VoidSendCommand(Local_u8Address);
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
#endif
}
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <CLCD_VoidWriteSpecialChar>:
void CLCD_VoidWriteSpecialChar(const u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	27 97       	sbiw	r28, 0x07	; 7
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	9c 83       	std	Y+4, r25	; 0x04
    1190:	8b 83       	std	Y+3, r24	; 0x03
    1192:	6d 83       	std	Y+5, r22	; 0x05
    1194:	4e 83       	std	Y+6, r20	; 0x06
    1196:	2f 83       	std	Y+7, r18	; 0x07
	//_delay_ms(1);
	//DIO_u8GetPortValue(CLCD_8_BIT_DATA_PORT,& Local_u8DDRamAddress);
	/*restore the data port*/
	//DIO_u8SetPortDirection(CLCD_8_BIT_DATA_PORT,DIO_u8OUTPUT);
	/*get CGram address from block number*/
	u8 Local_u8CGRamAddress=Copy_u8PatternNumber*8;
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	8a 83       	std	Y+2, r24	; 0x02
	/*send command to specify address in CGRAM to write to*/
#if CLCD_WORKING_MODE==PRE_EIGHT_BIT_MODE
	CLCD_VoidSendCommand(Local_u8CGRamAddress|1<<6);
#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE
	/*send the 4 MSBs. Make the MSBs to make them LSBs as function copies the 4 LSBs*/
		CLCD_VoidSendCommand((Local_u8CGRamAddress|1<<6)>>4);
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	80 64       	ori	r24, 0x40	; 64
    11b0:	82 95       	swap	r24
    11b2:	8f 70       	andi	r24, 0x0F	; 15
    11b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
		/*send the 4 LSBs we don't care about the value of the 4MSBs as function only operates on the LSBs so we dont need to set MSBs to 0*/
		/*we don't need to set the 6th bit to high as we are sending the LSBs and we don't care about the MSBs*/
		CLCD_VoidSendCommand(Local_u8CGRamAddress);
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
#endif
	for(u8 i=0;i<8;i++)
    11be:	19 82       	std	Y+1, r1	; 0x01
    11c0:	0e c0       	rjmp	.+28     	; 0x11de <CLCD_VoidWriteSpecialChar+0x64>
	{
		/*send special char to CGRAM (Address counter pointer increments automatically)*/
		CLCD_VoidSendData(Copy_pu8Pattern[i]);
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	fc 01       	movw	r30, r24
    11ce:	e2 0f       	add	r30, r18
    11d0:	f3 1f       	adc	r31, r19
    11d2:	80 81       	ld	r24, Z
    11d4:	0e 94 63 06 	call	0xcc6	; 0xcc6 <CLCD_VoidSendData>
		CLCD_VoidSendCommand((Local_u8CGRamAddress|1<<6)>>4);
		/*send the 4 LSBs we don't care about the value of the 4MSBs as function only operates on the LSBs so we dont need to set MSBs to 0*/
		/*we don't need to set the 6th bit to high as we are sending the LSBs and we don't care about the MSBs*/
		CLCD_VoidSendCommand(Local_u8CGRamAddress);
#endif
	for(u8 i=0;i<8;i++)
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	8f 5f       	subi	r24, 0xFF	; 255
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	88 30       	cpi	r24, 0x08	; 8
    11e2:	78 f3       	brcs	.-34     	; 0x11c2 <CLCD_VoidWriteSpecialChar+0x48>
	/*restore address counter to the saved value from the DDRAM */
	/*during storing operation we saved Address counter into 7 bits of the DDRAM address and the busy flag is in the 8th bit */
	/*we don't need to discard the 8th bit as it will be ORed with 1 in next step*/
	//CLCD_VoidSendCommand((Local_u8DDRamAddress)|1<<7);
	/*to display char in CGram send data using block number as input*/
	CLCD_VoidGoToXY(Copy_u8XPos,Copy_u8YPos);
    11e4:	8e 81       	ldd	r24, Y+6	; 0x06
    11e6:	6f 81       	ldd	r22, Y+7	; 0x07
    11e8:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_VoidGoToXY>
	CLCD_VoidSendData(Copy_u8PatternNumber);
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	0e 94 63 06 	call	0xcc6	; 0xcc6 <CLCD_VoidSendData>

	/*configuring the global send data counter to make sure to write to second row after finishing first row*/
	/*Send data counter is number of times that function send data was called the number specifies the position of the next character to be written on the first row */
	if(Copy_u8XPos==0)//write special char in first row
    11f2:	8e 81       	ldd	r24, Y+6	; 0x06
    11f4:	88 23       	and	r24, r24
    11f6:	21 f4       	brne	.+8      	; 0x1200 <CLCD_VoidWriteSpecialChar+0x86>
	{

		Global_u8SendDataCounter=Copy_u8YPos+1;
    11f8:	8f 81       	ldd	r24, Y+7	; 0x07
    11fa:	8f 5f       	subi	r24, 0xFF	; 255
    11fc:	80 93 cc 01 	sts	0x01CC, r24
	}
}
    1200:	27 96       	adiw	r28, 0x07	; 7
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <u32POWER>:
u32 u32POWER(u32 Copy_u8Num, u8 Copy_u8pow)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	2d 97       	sbiw	r28, 0x0d	; 13
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	6d 83       	std	Y+5, r22	; 0x05
    1228:	7e 83       	std	Y+6, r23	; 0x06
    122a:	8f 83       	std	Y+7, r24	; 0x07
    122c:	98 87       	std	Y+8, r25	; 0x08
    122e:	49 87       	std	Y+9, r20	; 0x09
	if(Copy_u8pow==0)
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	88 23       	and	r24, r24
    1234:	49 f4       	brne	.+18     	; 0x1248 <u32POWER+0x36>
		return 1;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a0 e0       	ldi	r26, 0x00	; 0
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	8a 87       	std	Y+10, r24	; 0x0a
    1240:	9b 87       	std	Y+11, r25	; 0x0b
    1242:	ac 87       	std	Y+12, r26	; 0x0c
    1244:	bd 87       	std	Y+13, r27	; 0x0d
    1246:	29 c0       	rjmp	.+82     	; 0x129a <u32POWER+0x88>
	else
		{
		u32 Local_u32Result=Copy_u8Num;
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	9e 81       	ldd	r25, Y+6	; 0x06
    124c:	af 81       	ldd	r26, Y+7	; 0x07
    124e:	b8 85       	ldd	r27, Y+8	; 0x08
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	9a 83       	std	Y+2, r25	; 0x02
    1254:	ab 83       	std	Y+3, r26	; 0x03
    1256:	bc 83       	std	Y+4, r27	; 0x04
    1258:	15 c0       	rjmp	.+42     	; 0x1284 <u32POWER+0x72>
		for(;Copy_u8pow>1;Copy_u8pow--)
		{
			Local_u32Result=Local_u32Result*Copy_u8Num;
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	9a 81       	ldd	r25, Y+2	; 0x02
    125e:	ab 81       	ldd	r26, Y+3	; 0x03
    1260:	bc 81       	ldd	r27, Y+4	; 0x04
    1262:	2d 81       	ldd	r18, Y+5	; 0x05
    1264:	3e 81       	ldd	r19, Y+6	; 0x06
    1266:	4f 81       	ldd	r20, Y+7	; 0x07
    1268:	58 85       	ldd	r21, Y+8	; 0x08
    126a:	bc 01       	movw	r22, r24
    126c:	cd 01       	movw	r24, r26
    126e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__mulsi3>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	89 83       	std	Y+1, r24	; 0x01
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	ab 83       	std	Y+3, r26	; 0x03
    127c:	bc 83       	std	Y+4, r27	; 0x04
	if(Copy_u8pow==0)
		return 1;
	else
		{
		u32 Local_u32Result=Copy_u8Num;
		for(;Copy_u8pow>1;Copy_u8pow--)
    127e:	89 85       	ldd	r24, Y+9	; 0x09
    1280:	81 50       	subi	r24, 0x01	; 1
    1282:	89 87       	std	Y+9, r24	; 0x09
    1284:	89 85       	ldd	r24, Y+9	; 0x09
    1286:	82 30       	cpi	r24, 0x02	; 2
    1288:	40 f7       	brcc	.-48     	; 0x125a <u32POWER+0x48>
		{
			Local_u32Result=Local_u32Result*Copy_u8Num;
		}
		return Local_u32Result;
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	ab 81       	ldd	r26, Y+3	; 0x03
    1290:	bc 81       	ldd	r27, Y+4	; 0x04
    1292:	8a 87       	std	Y+10, r24	; 0x0a
    1294:	9b 87       	std	Y+11, r25	; 0x0b
    1296:	ac 87       	std	Y+12, r26	; 0x0c
    1298:	bd 87       	std	Y+13, r27	; 0x0d
    129a:	8a 85       	ldd	r24, Y+10	; 0x0a
    129c:	9b 85       	ldd	r25, Y+11	; 0x0b
    129e:	ac 85       	ldd	r26, Y+12	; 0x0c
    12a0:	bd 85       	ldd	r27, Y+13	; 0x0d
	}
}
    12a2:	bc 01       	movw	r22, r24
    12a4:	cd 01       	movw	r24, r26
    12a6:	2d 96       	adiw	r28, 0x0d	; 13
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <CLCD_VoidShowNum>:
void CLCD_VoidShowNum(u32 Copy_u32Num)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	29 97       	sbiw	r28, 0x09	; 9
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	6e 83       	std	Y+6, r22	; 0x06
    12ce:	7f 83       	std	Y+7, r23	; 0x07
    12d0:	88 87       	std	Y+8, r24	; 0x08
    12d2:	99 87       	std	Y+9, r25	; 0x09
	u8 Local_u8DigitCount=1;//at least one digit is given
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32Temp=Copy_u32Num;
    12d8:	8e 81       	ldd	r24, Y+6	; 0x06
    12da:	9f 81       	ldd	r25, Y+7	; 0x07
    12dc:	a8 85       	ldd	r26, Y+8	; 0x08
    12de:	b9 85       	ldd	r27, Y+9	; 0x09
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	9a 83       	std	Y+2, r25	; 0x02
    12e4:	ab 83       	std	Y+3, r26	; 0x03
    12e6:	bc 83       	std	Y+4, r27	; 0x04
    12e8:	03 c0       	rjmp	.+6      	; 0x12f0 <CLCD_VoidShowNum+0x38>
	while((Local_u32Temp/=10)!=0)
	{
		Local_u8DigitCount++;
    12ea:	8d 81       	ldd	r24, Y+5	; 0x05
    12ec:	8f 5f       	subi	r24, 0xFF	; 255
    12ee:	8d 83       	std	Y+5, r24	; 0x05
}
void CLCD_VoidShowNum(u32 Copy_u32Num)
{
	u8 Local_u8DigitCount=1;//at least one digit is given
	u32 Local_u32Temp=Copy_u32Num;
	while((Local_u32Temp/=10)!=0)
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	9a 81       	ldd	r25, Y+2	; 0x02
    12f4:	ab 81       	ldd	r26, Y+3	; 0x03
    12f6:	bc 81       	ldd	r27, Y+4	; 0x04
    12f8:	2a e0       	ldi	r18, 0x0A	; 10
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	bc 01       	movw	r22, r24
    1302:	cd 01       	movw	r24, r26
    1304:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__udivmodsi4>
    1308:	da 01       	movw	r26, r20
    130a:	c9 01       	movw	r24, r18
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	9a 83       	std	Y+2, r25	; 0x02
    1310:	ab 83       	std	Y+3, r26	; 0x03
    1312:	bc 83       	std	Y+4, r27	; 0x04
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	9a 81       	ldd	r25, Y+2	; 0x02
    1318:	ab 81       	ldd	r26, Y+3	; 0x03
    131a:	bc 81       	ldd	r27, Y+4	; 0x04
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	a1 05       	cpc	r26, r1
    1320:	b1 05       	cpc	r27, r1
    1322:	19 f7       	brne	.-58     	; 0x12ea <CLCD_VoidShowNum+0x32>
    1324:	23 c0       	rjmp	.+70     	; 0x136c <CLCD_VoidShowNum+0xb4>
	{
		Local_u8DigitCount++;
	}
	while(Local_u8DigitCount!=0)
	{
		Local_u8DigitCount--;
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	81 50       	subi	r24, 0x01	; 1
    132a:	8d 83       	std	Y+5, r24	; 0x05
		CLCD_VoidSendData(((Copy_u32Num/(u32POWER(10,Local_u8DigitCount)))%10)+'0');
    132c:	6a e0       	ldi	r22, 0x0A	; 10
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	4d 81       	ldd	r20, Y+5	; 0x05
    1336:	0e 94 09 09 	call	0x1212	; 0x1212 <u32POWER>
    133a:	9b 01       	movw	r18, r22
    133c:	ac 01       	movw	r20, r24
    133e:	8e 81       	ldd	r24, Y+6	; 0x06
    1340:	9f 81       	ldd	r25, Y+7	; 0x07
    1342:	a8 85       	ldd	r26, Y+8	; 0x08
    1344:	b9 85       	ldd	r27, Y+9	; 0x09
    1346:	bc 01       	movw	r22, r24
    1348:	cd 01       	movw	r24, r26
    134a:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__udivmodsi4>
    134e:	da 01       	movw	r26, r20
    1350:	c9 01       	movw	r24, r18
    1352:	2a e0       	ldi	r18, 0x0A	; 10
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	bc 01       	movw	r22, r24
    135c:	cd 01       	movw	r24, r26
    135e:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__udivmodsi4>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	80 5d       	subi	r24, 0xD0	; 208
    1368:	0e 94 63 06 	call	0xcc6	; 0xcc6 <CLCD_VoidSendData>
	u32 Local_u32Temp=Copy_u32Num;
	while((Local_u32Temp/=10)!=0)
	{
		Local_u8DigitCount++;
	}
	while(Local_u8DigitCount!=0)
    136c:	8d 81       	ldd	r24, Y+5	; 0x05
    136e:	88 23       	and	r24, r24
    1370:	d1 f6       	brne	.-76     	; 0x1326 <CLCD_VoidShowNum+0x6e>
	{
		Local_u8DigitCount--;
		CLCD_VoidSendData(((Copy_u32Num/(u32POWER(10,Local_u8DigitCount)))%10)+'0');
	}
}
    1372:	29 96       	adiw	r28, 0x09	; 9
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <CLCD_VoidReset_Display>:
void CLCD_VoidReset_Display(void)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	/*send command to reset the display*/
#if CLCD_WORKING_MODE==PRE_EIGHT_BIT_MODE
	CLCD_VoidSendCommand(0b00000001);
#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE
	CLCD_VoidSendCommand(0b0000);
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
	CLCD_VoidSendCommand(0b0001);
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
#endif
	/*reset the global counter*/
	Global_u8SendDataCounter=0;
    1398:	10 92 cc 01 	sts	0x01CC, r1
}
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <DIO_u8SetPinValue>:
/******************************************************************************/
/***********************Setting pin value**************************************/
/******************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	28 97       	sbiw	r28, 0x08	; 8
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	8a 83       	std	Y+2, r24	; 0x02
    13b8:	6b 83       	std	Y+3, r22	; 0x03
    13ba:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially zero
    13bc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN_7)
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	88 30       	cpi	r24, 0x08	; 8
    13c2:	08 f0       	brcs	.+2      	; 0x13c6 <DIO_u8SetPinValue+0x24>
    13c4:	ed c0       	rjmp	.+474    	; 0x15a0 <DIO_u8SetPinValue+0x1fe>
	{
		if (Copy_u8Value)//if value is 1 SET the required PIN
    13c6:	8c 81       	ldd	r24, Y+4	; 0x04
    13c8:	88 23       	and	r24, r24
    13ca:	09 f4       	brne	.+2      	; 0x13ce <DIO_u8SetPinValue+0x2c>
    13cc:	72 c0       	rjmp	.+228    	; 0x14b2 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	38 87       	std	Y+8, r19	; 0x08
    13d6:	2f 83       	std	Y+7, r18	; 0x07
    13d8:	8f 81       	ldd	r24, Y+7	; 0x07
    13da:	98 85       	ldd	r25, Y+8	; 0x08
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	91 05       	cpc	r25, r1
    13e0:	49 f1       	breq	.+82     	; 0x1434 <DIO_u8SetPinValue+0x92>
    13e2:	2f 81       	ldd	r18, Y+7	; 0x07
    13e4:	38 85       	ldd	r19, Y+8	; 0x08
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	2c f4       	brge	.+10     	; 0x13f6 <DIO_u8SetPinValue+0x54>
    13ec:	8f 81       	ldd	r24, Y+7	; 0x07
    13ee:	98 85       	ldd	r25, Y+8	; 0x08
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	61 f0       	breq	.+24     	; 0x140c <DIO_u8SetPinValue+0x6a>
    13f4:	5b c0       	rjmp	.+182    	; 0x14ac <DIO_u8SetPinValue+0x10a>
    13f6:	2f 81       	ldd	r18, Y+7	; 0x07
    13f8:	38 85       	ldd	r19, Y+8	; 0x08
    13fa:	22 30       	cpi	r18, 0x02	; 2
    13fc:	31 05       	cpc	r19, r1
    13fe:	71 f1       	breq	.+92     	; 0x145c <DIO_u8SetPinValue+0xba>
    1400:	8f 81       	ldd	r24, Y+7	; 0x07
    1402:	98 85       	ldd	r25, Y+8	; 0x08
    1404:	83 30       	cpi	r24, 0x03	; 3
    1406:	91 05       	cpc	r25, r1
    1408:	e9 f1       	breq	.+122    	; 0x1484 <DIO_u8SetPinValue+0xe2>
    140a:	50 c0       	rjmp	.+160    	; 0x14ac <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA:
				SET_BIT(PORTA_reg,Copy_u8Pin);
    140c:	ab e3       	ldi	r26, 0x3B	; 59
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	eb e3       	ldi	r30, 0x3B	; 59
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_u8SetPinValue+0x88>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_u8SetPinValue+0x84>
    142e:	84 2b       	or	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	b8 c0       	rjmp	.+368    	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTB:
				SET_BIT(PORTB_reg,Copy_u8Pin);
    1434:	a8 e3       	ldi	r26, 0x38	; 56
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e8 e3       	ldi	r30, 0x38	; 56
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <DIO_u8SetPinValue+0xb0>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <DIO_u8SetPinValue+0xac>
    1456:	84 2b       	or	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	a4 c0       	rjmp	.+328    	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTC:
				SET_BIT(PORTC_reg,Copy_u8Pin);
    145c:	a5 e3       	ldi	r26, 0x35	; 53
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e5 e3       	ldi	r30, 0x35	; 53
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <DIO_u8SetPinValue+0xd8>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <DIO_u8SetPinValue+0xd4>
    147e:	84 2b       	or	r24, r20
    1480:	8c 93       	st	X, r24
    1482:	90 c0       	rjmp	.+288    	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTD:
				SET_BIT(PORTD_reg,Copy_u8Pin);
    1484:	a2 e3       	ldi	r26, 0x32	; 50
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e2 e3       	ldi	r30, 0x32	; 50
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_u8SetPinValue+0x100>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_u8SetPinValue+0xfc>
    14a6:	84 2b       	or	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	7c c0       	rjmp	.+248    	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
			
				default:
				Local_u8ErrorState=1;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	79 c0       	rjmp	.+242    	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
			}
		}
		else//value is 0 so we clear the bits
		{
			switch(Copy_u8Port)
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	3e 83       	std	Y+6, r19	; 0x06
    14ba:	2d 83       	std	Y+5, r18	; 0x05
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	91 05       	cpc	r25, r1
    14c4:	59 f1       	breq	.+86     	; 0x151c <DIO_u8SetPinValue+0x17a>
    14c6:	2d 81       	ldd	r18, Y+5	; 0x05
    14c8:	3e 81       	ldd	r19, Y+6	; 0x06
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	2c f4       	brge	.+10     	; 0x14da <DIO_u8SetPinValue+0x138>
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	69 f0       	breq	.+26     	; 0x14f2 <DIO_u8SetPinValue+0x150>
    14d8:	60 c0       	rjmp	.+192    	; 0x159a <DIO_u8SetPinValue+0x1f8>
    14da:	2d 81       	ldd	r18, Y+5	; 0x05
    14dc:	3e 81       	ldd	r19, Y+6	; 0x06
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	89 f1       	breq	.+98     	; 0x1546 <DIO_u8SetPinValue+0x1a4>
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	83 30       	cpi	r24, 0x03	; 3
    14ea:	91 05       	cpc	r25, r1
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <DIO_u8SetPinValue+0x14e>
    14ee:	40 c0       	rjmp	.+128    	; 0x1570 <DIO_u8SetPinValue+0x1ce>
    14f0:	54 c0       	rjmp	.+168    	; 0x159a <DIO_u8SetPinValue+0x1f8>
			{
				case DIO_u8PORTA:
				CLR_BIT(PORTA_reg,Copy_u8Pin);
    14f2:	ab e3       	ldi	r26, 0x3B	; 59
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	eb e3       	ldi	r30, 0x3B	; 59
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_u8SetPinValue+0x16e>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_u8SetPinValue+0x16a>
    1514:	80 95       	com	r24
    1516:	84 23       	and	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	44 c0       	rjmp	.+136    	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTB:
				CLR_BIT(PORTB_reg,Copy_u8Pin);
    151c:	a8 e3       	ldi	r26, 0x38	; 56
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e8 e3       	ldi	r30, 0x38	; 56
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_u8SetPinValue+0x198>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_u8SetPinValue+0x194>
    153e:	80 95       	com	r24
    1540:	84 23       	and	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	2f c0       	rjmp	.+94     	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTC:
				CLR_BIT(PORTC_reg,Copy_u8Pin);
    1546:	a5 e3       	ldi	r26, 0x35	; 53
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e5 e3       	ldi	r30, 0x35	; 53
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_u8SetPinValue+0x1c2>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <DIO_u8SetPinValue+0x1be>
    1568:	80 95       	com	r24
    156a:	84 23       	and	r24, r20
    156c:	8c 93       	st	X, r24
    156e:	1a c0       	rjmp	.+52     	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTD:
				CLR_BIT(PORTD_reg,Copy_u8Pin);
    1570:	a2 e3       	ldi	r26, 0x32	; 50
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e2 e3       	ldi	r30, 0x32	; 50
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 2e       	mov	r0, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_u8SetPinValue+0x1ec>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <DIO_u8SetPinValue+0x1e8>
    1592:	80 95       	com	r24
    1594:	84 23       	and	r24, r20
    1596:	8c 93       	st	X, r24
    1598:	05 c0       	rjmp	.+10     	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
				
				default:
				Local_u8ErrorState=1;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <DIO_u8SetPinValue+0x202>
			}
		}
	}
	else //incorrect input
	{
		Local_u8ErrorState=1;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	89 83       	std	Y+1, r24	; 0x01
	}	
	return Local_u8ErrorState;
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a6:	28 96       	adiw	r28, 0x08	; 8
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <DIO_u8SetPortValue>:
/******************************************************************************/
/***********************Setting port value*************************************/
/******************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port ,u8 Copy_u8Value)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	00 d0       	rcall	.+0      	; 0x15be <DIO_u8SetPortValue+0x6>
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <DIO_u8SetPortValue+0x8>
    15c0:	0f 92       	push	r0
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	8a 83       	std	Y+2, r24	; 0x02
    15c8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;//error state initially zero
    15ca:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	3d 83       	std	Y+5, r19	; 0x05
    15d4:	2c 83       	std	Y+4, r18	; 0x04
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	91 05       	cpc	r25, r1
    15de:	d1 f0       	breq	.+52     	; 0x1614 <DIO_u8SetPortValue+0x5c>
    15e0:	2c 81       	ldd	r18, Y+4	; 0x04
    15e2:	3d 81       	ldd	r19, Y+5	; 0x05
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	2c f4       	brge	.+10     	; 0x15f4 <DIO_u8SetPortValue+0x3c>
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	61 f0       	breq	.+24     	; 0x160a <DIO_u8SetPortValue+0x52>
    15f2:	1f c0       	rjmp	.+62     	; 0x1632 <DIO_u8SetPortValue+0x7a>
    15f4:	2c 81       	ldd	r18, Y+4	; 0x04
    15f6:	3d 81       	ldd	r19, Y+5	; 0x05
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	31 05       	cpc	r19, r1
    15fc:	81 f0       	breq	.+32     	; 0x161e <DIO_u8SetPortValue+0x66>
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	9d 81       	ldd	r25, Y+5	; 0x05
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	91 05       	cpc	r25, r1
    1606:	81 f0       	breq	.+32     	; 0x1628 <DIO_u8SetPortValue+0x70>
    1608:	14 c0       	rjmp	.+40     	; 0x1632 <DIO_u8SetPortValue+0x7a>
		{
			case DIO_u8PORTA:
			PORTA_reg=Copy_u8Value;
    160a:	eb e3       	ldi	r30, 0x3B	; 59
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	80 83       	st	Z, r24
    1612:	11 c0       	rjmp	.+34     	; 0x1636 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTB:
			PORTB_reg=Copy_u8Value;
    1614:	e8 e3       	ldi	r30, 0x38	; 56
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	80 83       	st	Z, r24
    161c:	0c c0       	rjmp	.+24     	; 0x1636 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTC:
			PORTC_reg=Copy_u8Value;
    161e:	e5 e3       	ldi	r30, 0x35	; 53
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	80 83       	st	Z, r24
    1626:	07 c0       	rjmp	.+14     	; 0x1636 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTD:
			PORTD_reg=Copy_u8Value;
    1628:	e2 e3       	ldi	r30, 0x32	; 50
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	80 83       	st	Z, r24
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <DIO_u8SetPortValue+0x7e>
			break;
			
			default:
			Local_u8ErrorState=1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_u8ErrorState;//incorrect input
    1636:	89 81       	ldd	r24, Y+1	; 0x01
}
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <DIO_u8GetPinValue>:
/******************************************************************************/
/***********************Getting PIN value**************************************/
/******************************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	27 97       	sbiw	r28, 0x07	; 7
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	8a 83       	std	Y+2, r24	; 0x02
    165e:	6b 83       	std	Y+3, r22	; 0x03
    1660:	5d 83       	std	Y+5, r21	; 0x05
    1662:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially zero
    1664:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL)&&Copy_u8Pin<=DIO_u8PIN_7)//check if ptr not null and correct input pin
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	9d 81       	ldd	r25, Y+5	; 0x05
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	09 f4       	brne	.+2      	; 0x1670 <DIO_u8GetPinValue+0x28>
    166e:	78 c0       	rjmp	.+240    	; 0x1760 <DIO_u8GetPinValue+0x118>
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	88 30       	cpi	r24, 0x08	; 8
    1674:	08 f0       	brcs	.+2      	; 0x1678 <DIO_u8GetPinValue+0x30>
    1676:	74 c0       	rjmp	.+232    	; 0x1760 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	3f 83       	std	Y+7, r19	; 0x07
    1680:	2e 83       	std	Y+6, r18	; 0x06
    1682:	4e 81       	ldd	r20, Y+6	; 0x06
    1684:	5f 81       	ldd	r21, Y+7	; 0x07
    1686:	41 30       	cpi	r20, 0x01	; 1
    1688:	51 05       	cpc	r21, r1
    168a:	59 f1       	breq	.+86     	; 0x16e2 <DIO_u8GetPinValue+0x9a>
    168c:	8e 81       	ldd	r24, Y+6	; 0x06
    168e:	9f 81       	ldd	r25, Y+7	; 0x07
    1690:	82 30       	cpi	r24, 0x02	; 2
    1692:	91 05       	cpc	r25, r1
    1694:	34 f4       	brge	.+12     	; 0x16a2 <DIO_u8GetPinValue+0x5a>
    1696:	2e 81       	ldd	r18, Y+6	; 0x06
    1698:	3f 81       	ldd	r19, Y+7	; 0x07
    169a:	21 15       	cp	r18, r1
    169c:	31 05       	cpc	r19, r1
    169e:	69 f0       	breq	.+26     	; 0x16ba <DIO_u8GetPinValue+0x72>
    16a0:	5c c0       	rjmp	.+184    	; 0x175a <DIO_u8GetPinValue+0x112>
    16a2:	4e 81       	ldd	r20, Y+6	; 0x06
    16a4:	5f 81       	ldd	r21, Y+7	; 0x07
    16a6:	42 30       	cpi	r20, 0x02	; 2
    16a8:	51 05       	cpc	r21, r1
    16aa:	79 f1       	breq	.+94     	; 0x170a <DIO_u8GetPinValue+0xc2>
    16ac:	8e 81       	ldd	r24, Y+6	; 0x06
    16ae:	9f 81       	ldd	r25, Y+7	; 0x07
    16b0:	83 30       	cpi	r24, 0x03	; 3
    16b2:	91 05       	cpc	r25, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <DIO_u8GetPinValue+0x70>
    16b6:	3d c0       	rjmp	.+122    	; 0x1732 <DIO_u8GetPinValue+0xea>
    16b8:	50 c0       	rjmp	.+160    	; 0x175a <DIO_u8GetPinValue+0x112>
		{
			case DIO_u8PORTA:
			*Copy_pu8Value=GET_BIT(PINA_reg,Copy_u8Pin);
    16ba:	e9 e3       	ldi	r30, 0x39	; 57
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	88 2f       	mov	r24, r24
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	a9 01       	movw	r20, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <DIO_u8GetPinValue+0x8a>
    16ce:	55 95       	asr	r21
    16d0:	47 95       	ror	r20
    16d2:	8a 95       	dec	r24
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <DIO_u8GetPinValue+0x86>
    16d6:	ca 01       	movw	r24, r20
    16d8:	81 70       	andi	r24, 0x01	; 1
    16da:	ec 81       	ldd	r30, Y+4	; 0x04
    16dc:	fd 81       	ldd	r31, Y+5	; 0x05
    16de:	80 83       	st	Z, r24
    16e0:	41 c0       	rjmp	.+130    	; 0x1764 <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTB:
			*Copy_pu8Value=GET_BIT(PINB_reg,Copy_u8Pin);
    16e2:	e6 e3       	ldi	r30, 0x36	; 54
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	88 2f       	mov	r24, r24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a9 01       	movw	r20, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <DIO_u8GetPinValue+0xb2>
    16f6:	55 95       	asr	r21
    16f8:	47 95       	ror	r20
    16fa:	8a 95       	dec	r24
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <DIO_u8GetPinValue+0xae>
    16fe:	ca 01       	movw	r24, r20
    1700:	81 70       	andi	r24, 0x01	; 1
    1702:	ec 81       	ldd	r30, Y+4	; 0x04
    1704:	fd 81       	ldd	r31, Y+5	; 0x05
    1706:	80 83       	st	Z, r24
    1708:	2d c0       	rjmp	.+90     	; 0x1764 <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTC:
			*Copy_pu8Value=GET_BIT(PINC_reg,Copy_u8Pin);
    170a:	e3 e3       	ldi	r30, 0x33	; 51
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	88 2f       	mov	r24, r24
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	a9 01       	movw	r20, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <DIO_u8GetPinValue+0xda>
    171e:	55 95       	asr	r21
    1720:	47 95       	ror	r20
    1722:	8a 95       	dec	r24
    1724:	e2 f7       	brpl	.-8      	; 0x171e <DIO_u8GetPinValue+0xd6>
    1726:	ca 01       	movw	r24, r20
    1728:	81 70       	andi	r24, 0x01	; 1
    172a:	ec 81       	ldd	r30, Y+4	; 0x04
    172c:	fd 81       	ldd	r31, Y+5	; 0x05
    172e:	80 83       	st	Z, r24
    1730:	19 c0       	rjmp	.+50     	; 0x1764 <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTD:
			*Copy_pu8Value=GET_BIT(PIND_reg,Copy_u8Pin);
    1732:	e0 e3       	ldi	r30, 0x30	; 48
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	a9 01       	movw	r20, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <DIO_u8GetPinValue+0x102>
    1746:	55 95       	asr	r21
    1748:	47 95       	ror	r20
    174a:	8a 95       	dec	r24
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <DIO_u8GetPinValue+0xfe>
    174e:	ca 01       	movw	r24, r20
    1750:	81 70       	andi	r24, 0x01	; 1
    1752:	ec 81       	ldd	r30, Y+4	; 0x04
    1754:	fd 81       	ldd	r31, Y+5	; 0x05
    1756:	80 83       	st	Z, r24
    1758:	05 c0       	rjmp	.+10     	; 0x1764 <DIO_u8GetPinValue+0x11c>
			break;
			
			default:
			Local_u8ErrorState=1;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <DIO_u8GetPinValue+0x11c>
			break;
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1764:	89 81       	ldd	r24, Y+1	; 0x01
}
    1766:	27 96       	adiw	r28, 0x07	; 7
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <DIO_u8GetPortValue>:
/*not tested*/
u8 DIO_u8GetPortValue(u8 Copy_u8Port ,u8* Copy_pu8Value)//get value of entire port
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	00 d0       	rcall	.+0      	; 0x177e <DIO_u8GetPortValue+0x6>
    177e:	00 d0       	rcall	.+0      	; 0x1780 <DIO_u8GetPortValue+0x8>
    1780:	00 d0       	rcall	.+0      	; 0x1782 <DIO_u8GetPortValue+0xa>
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	8a 83       	std	Y+2, r24	; 0x02
    1788:	7c 83       	std	Y+4, r23	; 0x04
    178a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    178c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	3e 83       	std	Y+6, r19	; 0x06
    1796:	2d 83       	std	Y+5, r18	; 0x05
    1798:	8d 81       	ldd	r24, Y+5	; 0x05
    179a:	9e 81       	ldd	r25, Y+6	; 0x06
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	91 05       	cpc	r25, r1
    17a0:	e1 f0       	breq	.+56     	; 0x17da <DIO_u8GetPortValue+0x62>
    17a2:	2d 81       	ldd	r18, Y+5	; 0x05
    17a4:	3e 81       	ldd	r19, Y+6	; 0x06
    17a6:	22 30       	cpi	r18, 0x02	; 2
    17a8:	31 05       	cpc	r19, r1
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <DIO_u8GetPortValue+0x3e>
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	9e 81       	ldd	r25, Y+6	; 0x06
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	61 f0       	breq	.+24     	; 0x17cc <DIO_u8GetPortValue+0x54>
    17b4:	27 c0       	rjmp	.+78     	; 0x1804 <DIO_u8GetPortValue+0x8c>
    17b6:	2d 81       	ldd	r18, Y+5	; 0x05
    17b8:	3e 81       	ldd	r19, Y+6	; 0x06
    17ba:	22 30       	cpi	r18, 0x02	; 2
    17bc:	31 05       	cpc	r19, r1
    17be:	a1 f0       	breq	.+40     	; 0x17e8 <DIO_u8GetPortValue+0x70>
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	9e 81       	ldd	r25, Y+6	; 0x06
    17c4:	83 30       	cpi	r24, 0x03	; 3
    17c6:	91 05       	cpc	r25, r1
    17c8:	b1 f0       	breq	.+44     	; 0x17f6 <DIO_u8GetPortValue+0x7e>
    17ca:	1c c0       	rjmp	.+56     	; 0x1804 <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA:
		*Copy_pu8Value=PINA_reg;
    17cc:	e9 e3       	ldi	r30, 0x39	; 57
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	eb 81       	ldd	r30, Y+3	; 0x03
    17d4:	fc 81       	ldd	r31, Y+4	; 0x04
    17d6:	80 83       	st	Z, r24
    17d8:	17 c0       	rjmp	.+46     	; 0x1808 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTB:
		*Copy_pu8Value=PINB_reg;
    17da:	e6 e3       	ldi	r30, 0x36	; 54
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	eb 81       	ldd	r30, Y+3	; 0x03
    17e2:	fc 81       	ldd	r31, Y+4	; 0x04
    17e4:	80 83       	st	Z, r24
    17e6:	10 c0       	rjmp	.+32     	; 0x1808 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTC:
		*Copy_pu8Value=PINC_reg;
    17e8:	e3 e3       	ldi	r30, 0x33	; 51
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	eb 81       	ldd	r30, Y+3	; 0x03
    17f0:	fc 81       	ldd	r31, Y+4	; 0x04
    17f2:	80 83       	st	Z, r24
    17f4:	09 c0       	rjmp	.+18     	; 0x1808 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTD:
		*Copy_pu8Value=PIND_reg;
    17f6:	e0 e3       	ldi	r30, 0x30	; 48
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	eb 81       	ldd	r30, Y+3	; 0x03
    17fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1800:	80 83       	st	Z, r24
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <DIO_u8GetPortValue+0x90>
		break;
	default:
		Local_u8ErrorState=1;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1808:	89 81       	ldd	r24, Y+1	; 0x01
}
    180a:	26 96       	adiw	r28, 0x06	; 6
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <KPD_u8GetPressedKey>:
#include "KPD_interface.h"
#include "KPD_config.h"
#include "KPD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <KPD_u8GetPressedKey+0x6>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <KPD_u8GetPressedKey+0x8>
    1824:	0f 92       	push	r0
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    182a:	8f ef       	ldi	r24, 0xFF	; 255
    182c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8KeyState;
	static u8 KPD_u8ColArr[4]={KPD_COL_1,KPD_COL_2,KPD_COL_3,KPD_COL_4};//to store in the data part of the memory and avoid stack overflow
	static u8 KPD_u8RowArr[4]={KPD_ROW_1,KPD_ROW_2,KPD_ROW_3,KPD_ROW_4};	
	static u8 KPD_u8KeyArr[4][4]=KPD_KEY_ARR_VALUES;
	/*make each col low one at a time and check each row value*/
	for(u8 Local_iteratorCOL=0;Local_iteratorCOL<KPD_COL_NUM;Local_iteratorCOL++)
    182e:	1a 82       	std	Y+2, r1	; 0x02
    1830:	5e c0       	rjmp	.+188    	; 0x18ee <KPD_u8GetPressedKey+0xd2>
	{
		/*make col low*/
		DIO_u8SetPinValue(KPD_PORT,KPD_u8ColArr[Local_iteratorCOL],DIO_u8LOW);
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	88 2f       	mov	r24, r24
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	fc 01       	movw	r30, r24
    183a:	e9 57       	subi	r30, 0x79	; 121
    183c:	fe 4f       	sbci	r31, 0xFE	; 254
    183e:	90 81       	ld	r25, Z
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	69 2f       	mov	r22, r25
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
		/*check on row value*/
		for(u8 Local_iteratorRow=0;Local_iteratorRow<KPD_ROW_NUM;Local_iteratorRow++)
    184a:	19 82       	std	Y+1, r1	; 0x01
    184c:	3d c0       	rjmp	.+122    	; 0x18c8 <KPD_u8GetPressedKey+0xac>
		{
			DIO_u8GetPinValue(KPD_PORT,KPD_u8RowArr[Local_iteratorRow],&Local_u8KeyState);
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	88 2f       	mov	r24, r24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	fc 01       	movw	r30, r24
    1856:	ed 57       	subi	r30, 0x7D	; 125
    1858:	fe 4f       	sbci	r31, 0xFE	; 254
    185a:	90 81       	ld	r25, Z
    185c:	9e 01       	movw	r18, r28
    185e:	2c 5f       	subi	r18, 0xFC	; 252
    1860:	3f 4f       	sbci	r19, 0xFF	; 255
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	69 2f       	mov	r22, r25
    1866:	a9 01       	movw	r20, r18
    1868:	0e 94 24 0b 	call	0x1648	; 0x1648 <DIO_u8GetPinValue>
			
			if(DIO_u8LOW==Local_u8KeyState)//key is pressed
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	88 23       	and	r24, r24
    1870:	41 f5       	brne	.+80     	; 0x18c2 <KPD_u8GetPressedKey+0xa6>
			{
				/*assign the value pressed the variable and return it*/
				Local_u8PressedKey=KPD_u8KeyArr[Local_iteratorRow][Local_iteratorCOL];
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	48 2f       	mov	r20, r24
    1876:	50 e0       	ldi	r21, 0x00	; 0
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	ca 01       	movw	r24, r20
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	82 0f       	add	r24, r18
    188a:	93 1f       	adc	r25, r19
    188c:	fc 01       	movw	r30, r24
    188e:	ed 58       	subi	r30, 0x8D	; 141
    1890:	fe 4f       	sbci	r31, 0xFE	; 254
    1892:	80 81       	ld	r24, Z
    1894:	8b 83       	std	Y+3, r24	; 0x03
    1896:	0f c0       	rjmp	.+30     	; 0x18b6 <KPD_u8GetPressedKey+0x9a>
				//DIO_u8SetPinValue(KPD_PORT,KPD_u8ColArr[Local_iteratorCOL],DIO_u8HIGH);
				
				/*polling (busy waiting )until key is released*/
				while(DIO_u8LOW==Local_u8KeyState)
				{
					DIO_u8GetPinValue(KPD_PORT,KPD_u8RowArr[Local_iteratorRow],&Local_u8KeyState);	
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	fc 01       	movw	r30, r24
    18a0:	ed 57       	subi	r30, 0x7D	; 125
    18a2:	fe 4f       	sbci	r31, 0xFE	; 254
    18a4:	90 81       	ld	r25, Z
    18a6:	9e 01       	movw	r18, r28
    18a8:	2c 5f       	subi	r18, 0xFC	; 252
    18aa:	3f 4f       	sbci	r19, 0xFF	; 255
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	69 2f       	mov	r22, r25
    18b0:	a9 01       	movw	r20, r18
    18b2:	0e 94 24 0b 	call	0x1648	; 0x1648 <DIO_u8GetPinValue>
				
				/*reset Column before leaving the function to successfuly call it in the future*//************************************************************************************************************/
				//DIO_u8SetPinValue(KPD_PORT,KPD_u8ColArr[Local_iteratorCOL],DIO_u8HIGH);
				
				/*polling (busy waiting )until key is released*/
				while(DIO_u8LOW==Local_u8KeyState)
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	88 23       	and	r24, r24
    18ba:	71 f3       	breq	.-36     	; 0x1898 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT,KPD_u8RowArr[Local_iteratorRow],&Local_u8KeyState);	
				}
				return Local_u8PressedKey;
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	8d 83       	std	Y+5, r24	; 0x05
    18c0:	1c c0       	rjmp	.+56     	; 0x18fa <KPD_u8GetPressedKey+0xde>
	for(u8 Local_iteratorCOL=0;Local_iteratorCOL<KPD_COL_NUM;Local_iteratorCOL++)
	{
		/*make col low*/
		DIO_u8SetPinValue(KPD_PORT,KPD_u8ColArr[Local_iteratorCOL],DIO_u8LOW);
		/*check on row value*/
		for(u8 Local_iteratorRow=0;Local_iteratorRow<KPD_ROW_NUM;Local_iteratorRow++)
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	8f 5f       	subi	r24, 0xFF	; 255
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	84 30       	cpi	r24, 0x04	; 4
    18cc:	08 f4       	brcc	.+2      	; 0x18d0 <KPD_u8GetPressedKey+0xb4>
    18ce:	bf cf       	rjmp	.-130    	; 0x184e <KPD_u8GetPressedKey+0x32>
				}
				return Local_u8PressedKey;
			}
		}
		/*reset the col value to high to continue searching through the other columns as we MUST have one column LOW while searching through the rows*/
		DIO_u8SetPinValue(KPD_PORT,KPD_u8ColArr[Local_iteratorCOL],DIO_u8HIGH);
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	fc 01       	movw	r30, r24
    18d8:	e9 57       	subi	r30, 0x79	; 121
    18da:	fe 4f       	sbci	r31, 0xFE	; 254
    18dc:	90 81       	ld	r25, Z
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	69 2f       	mov	r22, r25
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	u8 Local_u8KeyState;
	static u8 KPD_u8ColArr[4]={KPD_COL_1,KPD_COL_2,KPD_COL_3,KPD_COL_4};//to store in the data part of the memory and avoid stack overflow
	static u8 KPD_u8RowArr[4]={KPD_ROW_1,KPD_ROW_2,KPD_ROW_3,KPD_ROW_4};	
	static u8 KPD_u8KeyArr[4][4]=KPD_KEY_ARR_VALUES;
	/*make each col low one at a time and check each row value*/
	for(u8 Local_iteratorCOL=0;Local_iteratorCOL<KPD_COL_NUM;Local_iteratorCOL++)
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	8f 5f       	subi	r24, 0xFF	; 255
    18ec:	8a 83       	std	Y+2, r24	; 0x02
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	84 30       	cpi	r24, 0x04	; 4
    18f2:	08 f4       	brcc	.+2      	; 0x18f6 <KPD_u8GetPressedKey+0xda>
    18f4:	9e cf       	rjmp	.-196    	; 0x1832 <KPD_u8GetPressedKey+0x16>
			}
		}
		/*reset the col value to high to continue searching through the other columns as we MUST have one column LOW while searching through the rows*/
		DIO_u8SetPinValue(KPD_PORT,KPD_u8ColArr[Local_iteratorCOL],DIO_u8HIGH);
	}
	return Local_u8PressedKey;
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	8d 83       	std	Y+5, r24	; 0x05
    18fa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <PORT_VoidInit>:
#include"PORT_interface.h"
#include"PORT_config.h"
#include"PORT_private.h"
#include"PORT_register.h"
void PORT_VoidInit()
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
	DDRA_reg=PORTA_DIR;
    1914:	ea e3       	ldi	r30, 0x3A	; 58
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 ef       	ldi	r24, 0xF0	; 240
    191a:	80 83       	st	Z, r24
	DDRB_reg=PORTB_DIR;
    191c:	e7 e3       	ldi	r30, 0x37	; 55
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	80 83       	st	Z, r24
	DDRC_reg=PORTC_DIR;
    1924:	e4 e3       	ldi	r30, 0x34	; 52
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	87 e0       	ldi	r24, 0x07	; 7
    192a:	80 83       	st	Z, r24
	DDRD_reg=PORTD_DIR;
    192c:	e1 e3       	ldi	r30, 0x31	; 49
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	80 83       	st	Z, r24
	
	PORTA_reg=PORTA_InitValue;
    1934:	eb e3       	ldi	r30, 0x3B	; 59
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	8f ef       	ldi	r24, 0xFF	; 255
    193a:	80 83       	st	Z, r24
    PORTB_reg=PORTB_InitValue;
    193c:	e8 e3       	ldi	r30, 0x38	; 56
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	10 82       	st	Z, r1
    PORTC_reg=PORTC_InitValue;
    1942:	e5 e3       	ldi	r30, 0x35	; 53
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	10 82       	st	Z, r1
    PORTD_reg=PORTD_InitValue;
    1948:	e2 e3       	ldi	r30, 0x32	; 50
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	10 82       	st	Z, r1
}
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <main>:
#include"CLCD_interface.h"
#include"PORT_interface.h"
#include<util/delay.h>
#include"KPD_interface.h"
void main()
{
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	c6 57       	subi	r28, 0x76	; 118
    1962:	d1 40       	sbci	r29, 0x01	; 1
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
	PORT_VoidInit();
    196e:	0e 94 86 0c 	call	0x190c	; 0x190c <PORT_VoidInit>
	u8 pattern0_standing[]={0b01110,0b11111,0b01110,0b00100,0b11111,0b00100,0b01010,0b01010};
    1972:	ce 01       	movw	r24, r28
    1974:	81 5f       	subi	r24, 0xF1	; 241
    1976:	9e 4f       	sbci	r25, 0xFE	; 254
    1978:	c1 5b       	subi	r28, 0xB1	; 177
    197a:	de 4f       	sbci	r29, 0xFE	; 254
    197c:	99 83       	std	Y+1, r25	; 0x01
    197e:	88 83       	st	Y, r24
    1980:	cf 54       	subi	r28, 0x4F	; 79
    1982:	d1 40       	sbci	r29, 0x01	; 1
    1984:	83 ec       	ldi	r24, 0xC3	; 195
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	cf 5a       	subi	r28, 0xAF	; 175
    198a:	de 4f       	sbci	r29, 0xFE	; 254
    198c:	99 83       	std	Y+1, r25	; 0x01
    198e:	88 83       	st	Y, r24
    1990:	c1 55       	subi	r28, 0x51	; 81
    1992:	d1 40       	sbci	r29, 0x01	; 1
    1994:	98 e0       	ldi	r25, 0x08	; 8
    1996:	cd 5a       	subi	r28, 0xAD	; 173
    1998:	de 4f       	sbci	r29, 0xFE	; 254
    199a:	98 83       	st	Y, r25
    199c:	c3 55       	subi	r28, 0x53	; 83
    199e:	d1 40       	sbci	r29, 0x01	; 1
    19a0:	cf 5a       	subi	r28, 0xAF	; 175
    19a2:	de 4f       	sbci	r29, 0xFE	; 254
    19a4:	e8 81       	ld	r30, Y
    19a6:	f9 81       	ldd	r31, Y+1	; 0x01
    19a8:	c1 55       	subi	r28, 0x51	; 81
    19aa:	d1 40       	sbci	r29, 0x01	; 1
    19ac:	00 80       	ld	r0, Z
    19ae:	cf 5a       	subi	r28, 0xAF	; 175
    19b0:	de 4f       	sbci	r29, 0xFE	; 254
    19b2:	88 81       	ld	r24, Y
    19b4:	99 81       	ldd	r25, Y+1	; 0x01
    19b6:	c1 55       	subi	r28, 0x51	; 81
    19b8:	d1 40       	sbci	r29, 0x01	; 1
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	cf 5a       	subi	r28, 0xAF	; 175
    19be:	de 4f       	sbci	r29, 0xFE	; 254
    19c0:	99 83       	std	Y+1, r25	; 0x01
    19c2:	88 83       	st	Y, r24
    19c4:	c1 55       	subi	r28, 0x51	; 81
    19c6:	d1 40       	sbci	r29, 0x01	; 1
    19c8:	c1 5b       	subi	r28, 0xB1	; 177
    19ca:	de 4f       	sbci	r29, 0xFE	; 254
    19cc:	e8 81       	ld	r30, Y
    19ce:	f9 81       	ldd	r31, Y+1	; 0x01
    19d0:	cf 54       	subi	r28, 0x4F	; 79
    19d2:	d1 40       	sbci	r29, 0x01	; 1
    19d4:	00 82       	st	Z, r0
    19d6:	c1 5b       	subi	r28, 0xB1	; 177
    19d8:	de 4f       	sbci	r29, 0xFE	; 254
    19da:	88 81       	ld	r24, Y
    19dc:	99 81       	ldd	r25, Y+1	; 0x01
    19de:	cf 54       	subi	r28, 0x4F	; 79
    19e0:	d1 40       	sbci	r29, 0x01	; 1
    19e2:	01 96       	adiw	r24, 0x01	; 1
    19e4:	c1 5b       	subi	r28, 0xB1	; 177
    19e6:	de 4f       	sbci	r29, 0xFE	; 254
    19e8:	99 83       	std	Y+1, r25	; 0x01
    19ea:	88 83       	st	Y, r24
    19ec:	cf 54       	subi	r28, 0x4F	; 79
    19ee:	d1 40       	sbci	r29, 0x01	; 1
    19f0:	cd 5a       	subi	r28, 0xAD	; 173
    19f2:	de 4f       	sbci	r29, 0xFE	; 254
    19f4:	98 81       	ld	r25, Y
    19f6:	c3 55       	subi	r28, 0x53	; 83
    19f8:	d1 40       	sbci	r29, 0x01	; 1
    19fa:	91 50       	subi	r25, 0x01	; 1
    19fc:	cd 5a       	subi	r28, 0xAD	; 173
    19fe:	de 4f       	sbci	r29, 0xFE	; 254
    1a00:	98 83       	st	Y, r25
    1a02:	c3 55       	subi	r28, 0x53	; 83
    1a04:	d1 40       	sbci	r29, 0x01	; 1
    1a06:	cd 5a       	subi	r28, 0xAD	; 173
    1a08:	de 4f       	sbci	r29, 0xFE	; 254
    1a0a:	e8 81       	ld	r30, Y
    1a0c:	c3 55       	subi	r28, 0x53	; 83
    1a0e:	d1 40       	sbci	r29, 0x01	; 1
    1a10:	ee 23       	and	r30, r30
    1a12:	31 f6       	brne	.-116    	; 0x19a0 <main+0x4c>
	u8 pattern1_dancing1[]={0b01110,0b11111,0b01110,0b10101,0b01110,0b00100,0b01010,0b10001};//use with standing
    1a14:	ce 01       	movw	r24, r28
    1a16:	89 5e       	subi	r24, 0xE9	; 233
    1a18:	9e 4f       	sbci	r25, 0xFE	; 254
    1a1a:	cc 5a       	subi	r28, 0xAC	; 172
    1a1c:	de 4f       	sbci	r29, 0xFE	; 254
    1a1e:	99 83       	std	Y+1, r25	; 0x01
    1a20:	88 83       	st	Y, r24
    1a22:	c4 55       	subi	r28, 0x54	; 84
    1a24:	d1 40       	sbci	r29, 0x01	; 1
    1a26:	8b eb       	ldi	r24, 0xBB	; 187
    1a28:	91 e0       	ldi	r25, 0x01	; 1
    1a2a:	ca 5a       	subi	r28, 0xAA	; 170
    1a2c:	de 4f       	sbci	r29, 0xFE	; 254
    1a2e:	99 83       	std	Y+1, r25	; 0x01
    1a30:	88 83       	st	Y, r24
    1a32:	c6 55       	subi	r28, 0x56	; 86
    1a34:	d1 40       	sbci	r29, 0x01	; 1
    1a36:	98 e0       	ldi	r25, 0x08	; 8
    1a38:	c8 5a       	subi	r28, 0xA8	; 168
    1a3a:	de 4f       	sbci	r29, 0xFE	; 254
    1a3c:	98 83       	st	Y, r25
    1a3e:	c8 55       	subi	r28, 0x58	; 88
    1a40:	d1 40       	sbci	r29, 0x01	; 1
    1a42:	ca 5a       	subi	r28, 0xAA	; 170
    1a44:	de 4f       	sbci	r29, 0xFE	; 254
    1a46:	e8 81       	ld	r30, Y
    1a48:	f9 81       	ldd	r31, Y+1	; 0x01
    1a4a:	c6 55       	subi	r28, 0x56	; 86
    1a4c:	d1 40       	sbci	r29, 0x01	; 1
    1a4e:	00 80       	ld	r0, Z
    1a50:	ca 5a       	subi	r28, 0xAA	; 170
    1a52:	de 4f       	sbci	r29, 0xFE	; 254
    1a54:	88 81       	ld	r24, Y
    1a56:	99 81       	ldd	r25, Y+1	; 0x01
    1a58:	c6 55       	subi	r28, 0x56	; 86
    1a5a:	d1 40       	sbci	r29, 0x01	; 1
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	ca 5a       	subi	r28, 0xAA	; 170
    1a60:	de 4f       	sbci	r29, 0xFE	; 254
    1a62:	99 83       	std	Y+1, r25	; 0x01
    1a64:	88 83       	st	Y, r24
    1a66:	c6 55       	subi	r28, 0x56	; 86
    1a68:	d1 40       	sbci	r29, 0x01	; 1
    1a6a:	cc 5a       	subi	r28, 0xAC	; 172
    1a6c:	de 4f       	sbci	r29, 0xFE	; 254
    1a6e:	e8 81       	ld	r30, Y
    1a70:	f9 81       	ldd	r31, Y+1	; 0x01
    1a72:	c4 55       	subi	r28, 0x54	; 84
    1a74:	d1 40       	sbci	r29, 0x01	; 1
    1a76:	00 82       	st	Z, r0
    1a78:	cc 5a       	subi	r28, 0xAC	; 172
    1a7a:	de 4f       	sbci	r29, 0xFE	; 254
    1a7c:	88 81       	ld	r24, Y
    1a7e:	99 81       	ldd	r25, Y+1	; 0x01
    1a80:	c4 55       	subi	r28, 0x54	; 84
    1a82:	d1 40       	sbci	r29, 0x01	; 1
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	cc 5a       	subi	r28, 0xAC	; 172
    1a88:	de 4f       	sbci	r29, 0xFE	; 254
    1a8a:	99 83       	std	Y+1, r25	; 0x01
    1a8c:	88 83       	st	Y, r24
    1a8e:	c4 55       	subi	r28, 0x54	; 84
    1a90:	d1 40       	sbci	r29, 0x01	; 1
    1a92:	c8 5a       	subi	r28, 0xA8	; 168
    1a94:	de 4f       	sbci	r29, 0xFE	; 254
    1a96:	98 81       	ld	r25, Y
    1a98:	c8 55       	subi	r28, 0x58	; 88
    1a9a:	d1 40       	sbci	r29, 0x01	; 1
    1a9c:	91 50       	subi	r25, 0x01	; 1
    1a9e:	c8 5a       	subi	r28, 0xA8	; 168
    1aa0:	de 4f       	sbci	r29, 0xFE	; 254
    1aa2:	98 83       	st	Y, r25
    1aa4:	c8 55       	subi	r28, 0x58	; 88
    1aa6:	d1 40       	sbci	r29, 0x01	; 1
    1aa8:	c8 5a       	subi	r28, 0xA8	; 168
    1aaa:	de 4f       	sbci	r29, 0xFE	; 254
    1aac:	e8 81       	ld	r30, Y
    1aae:	c8 55       	subi	r28, 0x58	; 88
    1ab0:	d1 40       	sbci	r29, 0x01	; 1
    1ab2:	ee 23       	and	r30, r30
    1ab4:	31 f6       	brne	.-116    	; 0x1a42 <main+0xee>
	u8 pattern2_gun[]={0b11111,0b11111,0b11111,0b11000,0b11000,0b00000,0b00000,0b00000};
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	81 5e       	subi	r24, 0xE1	; 225
    1aba:	9e 4f       	sbci	r25, 0xFE	; 254
    1abc:	c7 5a       	subi	r28, 0xA7	; 167
    1abe:	de 4f       	sbci	r29, 0xFE	; 254
    1ac0:	99 83       	std	Y+1, r25	; 0x01
    1ac2:	88 83       	st	Y, r24
    1ac4:	c9 55       	subi	r28, 0x59	; 89
    1ac6:	d1 40       	sbci	r29, 0x01	; 1
    1ac8:	83 eb       	ldi	r24, 0xB3	; 179
    1aca:	91 e0       	ldi	r25, 0x01	; 1
    1acc:	c5 5a       	subi	r28, 0xA5	; 165
    1ace:	de 4f       	sbci	r29, 0xFE	; 254
    1ad0:	99 83       	std	Y+1, r25	; 0x01
    1ad2:	88 83       	st	Y, r24
    1ad4:	cb 55       	subi	r28, 0x5B	; 91
    1ad6:	d1 40       	sbci	r29, 0x01	; 1
    1ad8:	98 e0       	ldi	r25, 0x08	; 8
    1ada:	c3 5a       	subi	r28, 0xA3	; 163
    1adc:	de 4f       	sbci	r29, 0xFE	; 254
    1ade:	98 83       	st	Y, r25
    1ae0:	cd 55       	subi	r28, 0x5D	; 93
    1ae2:	d1 40       	sbci	r29, 0x01	; 1
    1ae4:	c5 5a       	subi	r28, 0xA5	; 165
    1ae6:	de 4f       	sbci	r29, 0xFE	; 254
    1ae8:	e8 81       	ld	r30, Y
    1aea:	f9 81       	ldd	r31, Y+1	; 0x01
    1aec:	cb 55       	subi	r28, 0x5B	; 91
    1aee:	d1 40       	sbci	r29, 0x01	; 1
    1af0:	00 80       	ld	r0, Z
    1af2:	c5 5a       	subi	r28, 0xA5	; 165
    1af4:	de 4f       	sbci	r29, 0xFE	; 254
    1af6:	88 81       	ld	r24, Y
    1af8:	99 81       	ldd	r25, Y+1	; 0x01
    1afa:	cb 55       	subi	r28, 0x5B	; 91
    1afc:	d1 40       	sbci	r29, 0x01	; 1
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	c5 5a       	subi	r28, 0xA5	; 165
    1b02:	de 4f       	sbci	r29, 0xFE	; 254
    1b04:	99 83       	std	Y+1, r25	; 0x01
    1b06:	88 83       	st	Y, r24
    1b08:	cb 55       	subi	r28, 0x5B	; 91
    1b0a:	d1 40       	sbci	r29, 0x01	; 1
    1b0c:	c7 5a       	subi	r28, 0xA7	; 167
    1b0e:	de 4f       	sbci	r29, 0xFE	; 254
    1b10:	e8 81       	ld	r30, Y
    1b12:	f9 81       	ldd	r31, Y+1	; 0x01
    1b14:	c9 55       	subi	r28, 0x59	; 89
    1b16:	d1 40       	sbci	r29, 0x01	; 1
    1b18:	00 82       	st	Z, r0
    1b1a:	c7 5a       	subi	r28, 0xA7	; 167
    1b1c:	de 4f       	sbci	r29, 0xFE	; 254
    1b1e:	88 81       	ld	r24, Y
    1b20:	99 81       	ldd	r25, Y+1	; 0x01
    1b22:	c9 55       	subi	r28, 0x59	; 89
    1b24:	d1 40       	sbci	r29, 0x01	; 1
    1b26:	01 96       	adiw	r24, 0x01	; 1
    1b28:	c7 5a       	subi	r28, 0xA7	; 167
    1b2a:	de 4f       	sbci	r29, 0xFE	; 254
    1b2c:	99 83       	std	Y+1, r25	; 0x01
    1b2e:	88 83       	st	Y, r24
    1b30:	c9 55       	subi	r28, 0x59	; 89
    1b32:	d1 40       	sbci	r29, 0x01	; 1
    1b34:	c3 5a       	subi	r28, 0xA3	; 163
    1b36:	de 4f       	sbci	r29, 0xFE	; 254
    1b38:	98 81       	ld	r25, Y
    1b3a:	cd 55       	subi	r28, 0x5D	; 93
    1b3c:	d1 40       	sbci	r29, 0x01	; 1
    1b3e:	91 50       	subi	r25, 0x01	; 1
    1b40:	c3 5a       	subi	r28, 0xA3	; 163
    1b42:	de 4f       	sbci	r29, 0xFE	; 254
    1b44:	98 83       	st	Y, r25
    1b46:	cd 55       	subi	r28, 0x5D	; 93
    1b48:	d1 40       	sbci	r29, 0x01	; 1
    1b4a:	c3 5a       	subi	r28, 0xA3	; 163
    1b4c:	de 4f       	sbci	r29, 0xFE	; 254
    1b4e:	e8 81       	ld	r30, Y
    1b50:	cd 55       	subi	r28, 0x5D	; 93
    1b52:	d1 40       	sbci	r29, 0x01	; 1
    1b54:	ee 23       	and	r30, r30
    1b56:	31 f6       	brne	.-116    	; 0x1ae4 <main+0x190>
	u8 pattern3_bullet[]={0b00100,0b01110,0b00100,0,0,0,0,0};
    1b58:	ce 01       	movw	r24, r28
    1b5a:	89 5d       	subi	r24, 0xD9	; 217
    1b5c:	9e 4f       	sbci	r25, 0xFE	; 254
    1b5e:	c2 5a       	subi	r28, 0xA2	; 162
    1b60:	de 4f       	sbci	r29, 0xFE	; 254
    1b62:	99 83       	std	Y+1, r25	; 0x01
    1b64:	88 83       	st	Y, r24
    1b66:	ce 55       	subi	r28, 0x5E	; 94
    1b68:	d1 40       	sbci	r29, 0x01	; 1
    1b6a:	8b ea       	ldi	r24, 0xAB	; 171
    1b6c:	91 e0       	ldi	r25, 0x01	; 1
    1b6e:	c0 5a       	subi	r28, 0xA0	; 160
    1b70:	de 4f       	sbci	r29, 0xFE	; 254
    1b72:	99 83       	std	Y+1, r25	; 0x01
    1b74:	88 83       	st	Y, r24
    1b76:	c0 56       	subi	r28, 0x60	; 96
    1b78:	d1 40       	sbci	r29, 0x01	; 1
    1b7a:	98 e0       	ldi	r25, 0x08	; 8
    1b7c:	ce 59       	subi	r28, 0x9E	; 158
    1b7e:	de 4f       	sbci	r29, 0xFE	; 254
    1b80:	98 83       	st	Y, r25
    1b82:	c2 56       	subi	r28, 0x62	; 98
    1b84:	d1 40       	sbci	r29, 0x01	; 1
    1b86:	c0 5a       	subi	r28, 0xA0	; 160
    1b88:	de 4f       	sbci	r29, 0xFE	; 254
    1b8a:	e8 81       	ld	r30, Y
    1b8c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b8e:	c0 56       	subi	r28, 0x60	; 96
    1b90:	d1 40       	sbci	r29, 0x01	; 1
    1b92:	00 80       	ld	r0, Z
    1b94:	c0 5a       	subi	r28, 0xA0	; 160
    1b96:	de 4f       	sbci	r29, 0xFE	; 254
    1b98:	88 81       	ld	r24, Y
    1b9a:	99 81       	ldd	r25, Y+1	; 0x01
    1b9c:	c0 56       	subi	r28, 0x60	; 96
    1b9e:	d1 40       	sbci	r29, 0x01	; 1
    1ba0:	01 96       	adiw	r24, 0x01	; 1
    1ba2:	c0 5a       	subi	r28, 0xA0	; 160
    1ba4:	de 4f       	sbci	r29, 0xFE	; 254
    1ba6:	99 83       	std	Y+1, r25	; 0x01
    1ba8:	88 83       	st	Y, r24
    1baa:	c0 56       	subi	r28, 0x60	; 96
    1bac:	d1 40       	sbci	r29, 0x01	; 1
    1bae:	c2 5a       	subi	r28, 0xA2	; 162
    1bb0:	de 4f       	sbci	r29, 0xFE	; 254
    1bb2:	e8 81       	ld	r30, Y
    1bb4:	f9 81       	ldd	r31, Y+1	; 0x01
    1bb6:	ce 55       	subi	r28, 0x5E	; 94
    1bb8:	d1 40       	sbci	r29, 0x01	; 1
    1bba:	00 82       	st	Z, r0
    1bbc:	c2 5a       	subi	r28, 0xA2	; 162
    1bbe:	de 4f       	sbci	r29, 0xFE	; 254
    1bc0:	88 81       	ld	r24, Y
    1bc2:	99 81       	ldd	r25, Y+1	; 0x01
    1bc4:	ce 55       	subi	r28, 0x5E	; 94
    1bc6:	d1 40       	sbci	r29, 0x01	; 1
    1bc8:	01 96       	adiw	r24, 0x01	; 1
    1bca:	c2 5a       	subi	r28, 0xA2	; 162
    1bcc:	de 4f       	sbci	r29, 0xFE	; 254
    1bce:	99 83       	std	Y+1, r25	; 0x01
    1bd0:	88 83       	st	Y, r24
    1bd2:	ce 55       	subi	r28, 0x5E	; 94
    1bd4:	d1 40       	sbci	r29, 0x01	; 1
    1bd6:	ce 59       	subi	r28, 0x9E	; 158
    1bd8:	de 4f       	sbci	r29, 0xFE	; 254
    1bda:	98 81       	ld	r25, Y
    1bdc:	c2 56       	subi	r28, 0x62	; 98
    1bde:	d1 40       	sbci	r29, 0x01	; 1
    1be0:	91 50       	subi	r25, 0x01	; 1
    1be2:	ce 59       	subi	r28, 0x9E	; 158
    1be4:	de 4f       	sbci	r29, 0xFE	; 254
    1be6:	98 83       	st	Y, r25
    1be8:	c2 56       	subi	r28, 0x62	; 98
    1bea:	d1 40       	sbci	r29, 0x01	; 1
    1bec:	ce 59       	subi	r28, 0x9E	; 158
    1bee:	de 4f       	sbci	r29, 0xFE	; 254
    1bf0:	e8 81       	ld	r30, Y
    1bf2:	c2 56       	subi	r28, 0x62	; 98
    1bf4:	d1 40       	sbci	r29, 0x01	; 1
    1bf6:	ee 23       	and	r30, r30
    1bf8:	31 f6       	brne	.-116    	; 0x1b86 <main+0x232>
	u8 pattern4_dead[]={0,0,0,0b00100,0b11111,0b00100,0b01010,0b01010};
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	81 5d       	subi	r24, 0xD1	; 209
    1bfe:	9e 4f       	sbci	r25, 0xFE	; 254
    1c00:	cd 59       	subi	r28, 0x9D	; 157
    1c02:	de 4f       	sbci	r29, 0xFE	; 254
    1c04:	99 83       	std	Y+1, r25	; 0x01
    1c06:	88 83       	st	Y, r24
    1c08:	c3 56       	subi	r28, 0x63	; 99
    1c0a:	d1 40       	sbci	r29, 0x01	; 1
    1c0c:	83 ea       	ldi	r24, 0xA3	; 163
    1c0e:	91 e0       	ldi	r25, 0x01	; 1
    1c10:	cb 59       	subi	r28, 0x9B	; 155
    1c12:	de 4f       	sbci	r29, 0xFE	; 254
    1c14:	99 83       	std	Y+1, r25	; 0x01
    1c16:	88 83       	st	Y, r24
    1c18:	c5 56       	subi	r28, 0x65	; 101
    1c1a:	d1 40       	sbci	r29, 0x01	; 1
    1c1c:	98 e0       	ldi	r25, 0x08	; 8
    1c1e:	c9 59       	subi	r28, 0x99	; 153
    1c20:	de 4f       	sbci	r29, 0xFE	; 254
    1c22:	98 83       	st	Y, r25
    1c24:	c7 56       	subi	r28, 0x67	; 103
    1c26:	d1 40       	sbci	r29, 0x01	; 1
    1c28:	cb 59       	subi	r28, 0x9B	; 155
    1c2a:	de 4f       	sbci	r29, 0xFE	; 254
    1c2c:	e8 81       	ld	r30, Y
    1c2e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c30:	c5 56       	subi	r28, 0x65	; 101
    1c32:	d1 40       	sbci	r29, 0x01	; 1
    1c34:	00 80       	ld	r0, Z
    1c36:	cb 59       	subi	r28, 0x9B	; 155
    1c38:	de 4f       	sbci	r29, 0xFE	; 254
    1c3a:	88 81       	ld	r24, Y
    1c3c:	99 81       	ldd	r25, Y+1	; 0x01
    1c3e:	c5 56       	subi	r28, 0x65	; 101
    1c40:	d1 40       	sbci	r29, 0x01	; 1
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	cb 59       	subi	r28, 0x9B	; 155
    1c46:	de 4f       	sbci	r29, 0xFE	; 254
    1c48:	99 83       	std	Y+1, r25	; 0x01
    1c4a:	88 83       	st	Y, r24
    1c4c:	c5 56       	subi	r28, 0x65	; 101
    1c4e:	d1 40       	sbci	r29, 0x01	; 1
    1c50:	cd 59       	subi	r28, 0x9D	; 157
    1c52:	de 4f       	sbci	r29, 0xFE	; 254
    1c54:	e8 81       	ld	r30, Y
    1c56:	f9 81       	ldd	r31, Y+1	; 0x01
    1c58:	c3 56       	subi	r28, 0x63	; 99
    1c5a:	d1 40       	sbci	r29, 0x01	; 1
    1c5c:	00 82       	st	Z, r0
    1c5e:	cd 59       	subi	r28, 0x9D	; 157
    1c60:	de 4f       	sbci	r29, 0xFE	; 254
    1c62:	88 81       	ld	r24, Y
    1c64:	99 81       	ldd	r25, Y+1	; 0x01
    1c66:	c3 56       	subi	r28, 0x63	; 99
    1c68:	d1 40       	sbci	r29, 0x01	; 1
    1c6a:	01 96       	adiw	r24, 0x01	; 1
    1c6c:	cd 59       	subi	r28, 0x9D	; 157
    1c6e:	de 4f       	sbci	r29, 0xFE	; 254
    1c70:	99 83       	std	Y+1, r25	; 0x01
    1c72:	88 83       	st	Y, r24
    1c74:	c3 56       	subi	r28, 0x63	; 99
    1c76:	d1 40       	sbci	r29, 0x01	; 1
    1c78:	c9 59       	subi	r28, 0x99	; 153
    1c7a:	de 4f       	sbci	r29, 0xFE	; 254
    1c7c:	98 81       	ld	r25, Y
    1c7e:	c7 56       	subi	r28, 0x67	; 103
    1c80:	d1 40       	sbci	r29, 0x01	; 1
    1c82:	91 50       	subi	r25, 0x01	; 1
    1c84:	c9 59       	subi	r28, 0x99	; 153
    1c86:	de 4f       	sbci	r29, 0xFE	; 254
    1c88:	98 83       	st	Y, r25
    1c8a:	c7 56       	subi	r28, 0x67	; 103
    1c8c:	d1 40       	sbci	r29, 0x01	; 1
    1c8e:	c9 59       	subi	r28, 0x99	; 153
    1c90:	de 4f       	sbci	r29, 0xFE	; 254
    1c92:	e8 81       	ld	r30, Y
    1c94:	c7 56       	subi	r28, 0x67	; 103
    1c96:	d1 40       	sbci	r29, 0x01	; 1
    1c98:	ee 23       	and	r30, r30
    1c9a:	31 f6       	brne	.-116    	; 0x1c28 <main+0x2d4>
	u8 pattern5_running[]={0b01110,0b11111,0b01110,0b00100,0b11111,0b00100,0b11111,0};//use with dancing1
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	89 5c       	subi	r24, 0xC9	; 201
    1ca0:	9e 4f       	sbci	r25, 0xFE	; 254
    1ca2:	c8 59       	subi	r28, 0x98	; 152
    1ca4:	de 4f       	sbci	r29, 0xFE	; 254
    1ca6:	99 83       	std	Y+1, r25	; 0x01
    1ca8:	88 83       	st	Y, r24
    1caa:	c8 56       	subi	r28, 0x68	; 104
    1cac:	d1 40       	sbci	r29, 0x01	; 1
    1cae:	8b e9       	ldi	r24, 0x9B	; 155
    1cb0:	91 e0       	ldi	r25, 0x01	; 1
    1cb2:	c6 59       	subi	r28, 0x96	; 150
    1cb4:	de 4f       	sbci	r29, 0xFE	; 254
    1cb6:	99 83       	std	Y+1, r25	; 0x01
    1cb8:	88 83       	st	Y, r24
    1cba:	ca 56       	subi	r28, 0x6A	; 106
    1cbc:	d1 40       	sbci	r29, 0x01	; 1
    1cbe:	98 e0       	ldi	r25, 0x08	; 8
    1cc0:	c4 59       	subi	r28, 0x94	; 148
    1cc2:	de 4f       	sbci	r29, 0xFE	; 254
    1cc4:	98 83       	st	Y, r25
    1cc6:	cc 56       	subi	r28, 0x6C	; 108
    1cc8:	d1 40       	sbci	r29, 0x01	; 1
    1cca:	c6 59       	subi	r28, 0x96	; 150
    1ccc:	de 4f       	sbci	r29, 0xFE	; 254
    1cce:	e8 81       	ld	r30, Y
    1cd0:	f9 81       	ldd	r31, Y+1	; 0x01
    1cd2:	ca 56       	subi	r28, 0x6A	; 106
    1cd4:	d1 40       	sbci	r29, 0x01	; 1
    1cd6:	00 80       	ld	r0, Z
    1cd8:	c6 59       	subi	r28, 0x96	; 150
    1cda:	de 4f       	sbci	r29, 0xFE	; 254
    1cdc:	88 81       	ld	r24, Y
    1cde:	99 81       	ldd	r25, Y+1	; 0x01
    1ce0:	ca 56       	subi	r28, 0x6A	; 106
    1ce2:	d1 40       	sbci	r29, 0x01	; 1
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	c6 59       	subi	r28, 0x96	; 150
    1ce8:	de 4f       	sbci	r29, 0xFE	; 254
    1cea:	99 83       	std	Y+1, r25	; 0x01
    1cec:	88 83       	st	Y, r24
    1cee:	ca 56       	subi	r28, 0x6A	; 106
    1cf0:	d1 40       	sbci	r29, 0x01	; 1
    1cf2:	c8 59       	subi	r28, 0x98	; 152
    1cf4:	de 4f       	sbci	r29, 0xFE	; 254
    1cf6:	e8 81       	ld	r30, Y
    1cf8:	f9 81       	ldd	r31, Y+1	; 0x01
    1cfa:	c8 56       	subi	r28, 0x68	; 104
    1cfc:	d1 40       	sbci	r29, 0x01	; 1
    1cfe:	00 82       	st	Z, r0
    1d00:	c8 59       	subi	r28, 0x98	; 152
    1d02:	de 4f       	sbci	r29, 0xFE	; 254
    1d04:	88 81       	ld	r24, Y
    1d06:	99 81       	ldd	r25, Y+1	; 0x01
    1d08:	c8 56       	subi	r28, 0x68	; 104
    1d0a:	d1 40       	sbci	r29, 0x01	; 1
    1d0c:	01 96       	adiw	r24, 0x01	; 1
    1d0e:	c8 59       	subi	r28, 0x98	; 152
    1d10:	de 4f       	sbci	r29, 0xFE	; 254
    1d12:	99 83       	std	Y+1, r25	; 0x01
    1d14:	88 83       	st	Y, r24
    1d16:	c8 56       	subi	r28, 0x68	; 104
    1d18:	d1 40       	sbci	r29, 0x01	; 1
    1d1a:	c4 59       	subi	r28, 0x94	; 148
    1d1c:	de 4f       	sbci	r29, 0xFE	; 254
    1d1e:	98 81       	ld	r25, Y
    1d20:	cc 56       	subi	r28, 0x6C	; 108
    1d22:	d1 40       	sbci	r29, 0x01	; 1
    1d24:	91 50       	subi	r25, 0x01	; 1
    1d26:	c4 59       	subi	r28, 0x94	; 148
    1d28:	de 4f       	sbci	r29, 0xFE	; 254
    1d2a:	98 83       	st	Y, r25
    1d2c:	cc 56       	subi	r28, 0x6C	; 108
    1d2e:	d1 40       	sbci	r29, 0x01	; 1
    1d30:	c4 59       	subi	r28, 0x94	; 148
    1d32:	de 4f       	sbci	r29, 0xFE	; 254
    1d34:	e8 81       	ld	r30, Y
    1d36:	cc 56       	subi	r28, 0x6C	; 108
    1d38:	d1 40       	sbci	r29, 0x01	; 1
    1d3a:	ee 23       	and	r30, r30
    1d3c:	31 f6       	brne	.-116    	; 0x1cca <main+0x376>

	u8 pattern6_football1[]={0b01110,0b11111,0b01110,0b10101,0b01110,0b00100,0b11010,0b10010};
    1d3e:	ce 01       	movw	r24, r28
    1d40:	81 5c       	subi	r24, 0xC1	; 193
    1d42:	9e 4f       	sbci	r25, 0xFE	; 254
    1d44:	c3 59       	subi	r28, 0x93	; 147
    1d46:	de 4f       	sbci	r29, 0xFE	; 254
    1d48:	99 83       	std	Y+1, r25	; 0x01
    1d4a:	88 83       	st	Y, r24
    1d4c:	cd 56       	subi	r28, 0x6D	; 109
    1d4e:	d1 40       	sbci	r29, 0x01	; 1
    1d50:	83 e9       	ldi	r24, 0x93	; 147
    1d52:	91 e0       	ldi	r25, 0x01	; 1
    1d54:	c1 59       	subi	r28, 0x91	; 145
    1d56:	de 4f       	sbci	r29, 0xFE	; 254
    1d58:	99 83       	std	Y+1, r25	; 0x01
    1d5a:	88 83       	st	Y, r24
    1d5c:	cf 56       	subi	r28, 0x6F	; 111
    1d5e:	d1 40       	sbci	r29, 0x01	; 1
    1d60:	98 e0       	ldi	r25, 0x08	; 8
    1d62:	cf 58       	subi	r28, 0x8F	; 143
    1d64:	de 4f       	sbci	r29, 0xFE	; 254
    1d66:	98 83       	st	Y, r25
    1d68:	c1 57       	subi	r28, 0x71	; 113
    1d6a:	d1 40       	sbci	r29, 0x01	; 1
    1d6c:	c1 59       	subi	r28, 0x91	; 145
    1d6e:	de 4f       	sbci	r29, 0xFE	; 254
    1d70:	e8 81       	ld	r30, Y
    1d72:	f9 81       	ldd	r31, Y+1	; 0x01
    1d74:	cf 56       	subi	r28, 0x6F	; 111
    1d76:	d1 40       	sbci	r29, 0x01	; 1
    1d78:	00 80       	ld	r0, Z
    1d7a:	c1 59       	subi	r28, 0x91	; 145
    1d7c:	de 4f       	sbci	r29, 0xFE	; 254
    1d7e:	88 81       	ld	r24, Y
    1d80:	99 81       	ldd	r25, Y+1	; 0x01
    1d82:	cf 56       	subi	r28, 0x6F	; 111
    1d84:	d1 40       	sbci	r29, 0x01	; 1
    1d86:	01 96       	adiw	r24, 0x01	; 1
    1d88:	c1 59       	subi	r28, 0x91	; 145
    1d8a:	de 4f       	sbci	r29, 0xFE	; 254
    1d8c:	99 83       	std	Y+1, r25	; 0x01
    1d8e:	88 83       	st	Y, r24
    1d90:	cf 56       	subi	r28, 0x6F	; 111
    1d92:	d1 40       	sbci	r29, 0x01	; 1
    1d94:	c3 59       	subi	r28, 0x93	; 147
    1d96:	de 4f       	sbci	r29, 0xFE	; 254
    1d98:	e8 81       	ld	r30, Y
    1d9a:	f9 81       	ldd	r31, Y+1	; 0x01
    1d9c:	cd 56       	subi	r28, 0x6D	; 109
    1d9e:	d1 40       	sbci	r29, 0x01	; 1
    1da0:	00 82       	st	Z, r0
    1da2:	c3 59       	subi	r28, 0x93	; 147
    1da4:	de 4f       	sbci	r29, 0xFE	; 254
    1da6:	88 81       	ld	r24, Y
    1da8:	99 81       	ldd	r25, Y+1	; 0x01
    1daa:	cd 56       	subi	r28, 0x6D	; 109
    1dac:	d1 40       	sbci	r29, 0x01	; 1
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	c3 59       	subi	r28, 0x93	; 147
    1db2:	de 4f       	sbci	r29, 0xFE	; 254
    1db4:	99 83       	std	Y+1, r25	; 0x01
    1db6:	88 83       	st	Y, r24
    1db8:	cd 56       	subi	r28, 0x6D	; 109
    1dba:	d1 40       	sbci	r29, 0x01	; 1
    1dbc:	cf 58       	subi	r28, 0x8F	; 143
    1dbe:	de 4f       	sbci	r29, 0xFE	; 254
    1dc0:	98 81       	ld	r25, Y
    1dc2:	c1 57       	subi	r28, 0x71	; 113
    1dc4:	d1 40       	sbci	r29, 0x01	; 1
    1dc6:	91 50       	subi	r25, 0x01	; 1
    1dc8:	cf 58       	subi	r28, 0x8F	; 143
    1dca:	de 4f       	sbci	r29, 0xFE	; 254
    1dcc:	98 83       	st	Y, r25
    1dce:	c1 57       	subi	r28, 0x71	; 113
    1dd0:	d1 40       	sbci	r29, 0x01	; 1
    1dd2:	cf 58       	subi	r28, 0x8F	; 143
    1dd4:	de 4f       	sbci	r29, 0xFE	; 254
    1dd6:	e8 81       	ld	r30, Y
    1dd8:	c1 57       	subi	r28, 0x71	; 113
    1dda:	d1 40       	sbci	r29, 0x01	; 1
    1ddc:	ee 23       	and	r30, r30
    1dde:	31 f6       	brne	.-116    	; 0x1d6c <main+0x418>
	u8 pattern7_football2[]={0b01110,0b11111,0b01110,0b10101,0b01110,0b10100,0b01010,0b10010};
    1de0:	ce 01       	movw	r24, r28
    1de2:	89 5b       	subi	r24, 0xB9	; 185
    1de4:	9e 4f       	sbci	r25, 0xFE	; 254
    1de6:	ce 58       	subi	r28, 0x8E	; 142
    1de8:	de 4f       	sbci	r29, 0xFE	; 254
    1dea:	99 83       	std	Y+1, r25	; 0x01
    1dec:	88 83       	st	Y, r24
    1dee:	c2 57       	subi	r28, 0x72	; 114
    1df0:	d1 40       	sbci	r29, 0x01	; 1
    1df2:	8b e8       	ldi	r24, 0x8B	; 139
    1df4:	91 e0       	ldi	r25, 0x01	; 1
    1df6:	cc 58       	subi	r28, 0x8C	; 140
    1df8:	de 4f       	sbci	r29, 0xFE	; 254
    1dfa:	99 83       	std	Y+1, r25	; 0x01
    1dfc:	88 83       	st	Y, r24
    1dfe:	c4 57       	subi	r28, 0x74	; 116
    1e00:	d1 40       	sbci	r29, 0x01	; 1
    1e02:	98 e0       	ldi	r25, 0x08	; 8
    1e04:	ca 58       	subi	r28, 0x8A	; 138
    1e06:	de 4f       	sbci	r29, 0xFE	; 254
    1e08:	98 83       	st	Y, r25
    1e0a:	c6 57       	subi	r28, 0x76	; 118
    1e0c:	d1 40       	sbci	r29, 0x01	; 1
    1e0e:	cc 58       	subi	r28, 0x8C	; 140
    1e10:	de 4f       	sbci	r29, 0xFE	; 254
    1e12:	e8 81       	ld	r30, Y
    1e14:	f9 81       	ldd	r31, Y+1	; 0x01
    1e16:	c4 57       	subi	r28, 0x74	; 116
    1e18:	d1 40       	sbci	r29, 0x01	; 1
    1e1a:	00 80       	ld	r0, Z
    1e1c:	cc 58       	subi	r28, 0x8C	; 140
    1e1e:	de 4f       	sbci	r29, 0xFE	; 254
    1e20:	88 81       	ld	r24, Y
    1e22:	99 81       	ldd	r25, Y+1	; 0x01
    1e24:	c4 57       	subi	r28, 0x74	; 116
    1e26:	d1 40       	sbci	r29, 0x01	; 1
    1e28:	01 96       	adiw	r24, 0x01	; 1
    1e2a:	cc 58       	subi	r28, 0x8C	; 140
    1e2c:	de 4f       	sbci	r29, 0xFE	; 254
    1e2e:	99 83       	std	Y+1, r25	; 0x01
    1e30:	88 83       	st	Y, r24
    1e32:	c4 57       	subi	r28, 0x74	; 116
    1e34:	d1 40       	sbci	r29, 0x01	; 1
    1e36:	ce 58       	subi	r28, 0x8E	; 142
    1e38:	de 4f       	sbci	r29, 0xFE	; 254
    1e3a:	e8 81       	ld	r30, Y
    1e3c:	f9 81       	ldd	r31, Y+1	; 0x01
    1e3e:	c2 57       	subi	r28, 0x72	; 114
    1e40:	d1 40       	sbci	r29, 0x01	; 1
    1e42:	00 82       	st	Z, r0
    1e44:	ce 58       	subi	r28, 0x8E	; 142
    1e46:	de 4f       	sbci	r29, 0xFE	; 254
    1e48:	88 81       	ld	r24, Y
    1e4a:	99 81       	ldd	r25, Y+1	; 0x01
    1e4c:	c2 57       	subi	r28, 0x72	; 114
    1e4e:	d1 40       	sbci	r29, 0x01	; 1
    1e50:	01 96       	adiw	r24, 0x01	; 1
    1e52:	ce 58       	subi	r28, 0x8E	; 142
    1e54:	de 4f       	sbci	r29, 0xFE	; 254
    1e56:	99 83       	std	Y+1, r25	; 0x01
    1e58:	88 83       	st	Y, r24
    1e5a:	c2 57       	subi	r28, 0x72	; 114
    1e5c:	d1 40       	sbci	r29, 0x01	; 1
    1e5e:	ca 58       	subi	r28, 0x8A	; 138
    1e60:	de 4f       	sbci	r29, 0xFE	; 254
    1e62:	98 81       	ld	r25, Y
    1e64:	c6 57       	subi	r28, 0x76	; 118
    1e66:	d1 40       	sbci	r29, 0x01	; 1
    1e68:	91 50       	subi	r25, 0x01	; 1
    1e6a:	ca 58       	subi	r28, 0x8A	; 138
    1e6c:	de 4f       	sbci	r29, 0xFE	; 254
    1e6e:	98 83       	st	Y, r25
    1e70:	c6 57       	subi	r28, 0x76	; 118
    1e72:	d1 40       	sbci	r29, 0x01	; 1
    1e74:	ca 58       	subi	r28, 0x8A	; 138
    1e76:	de 4f       	sbci	r29, 0xFE	; 254
    1e78:	e8 81       	ld	r30, Y
    1e7a:	c6 57       	subi	r28, 0x76	; 118
    1e7c:	d1 40       	sbci	r29, 0x01	; 1
    1e7e:	ee 23       	and	r30, r30
    1e80:	31 f6       	brne	.-116    	; 0x1e0e <main+0x4ba>

	CLCD_VoidInit();
    1e82:	0e 94 d7 07 	call	0xfae	; 0xfae <CLCD_VoidInit>
	CLCD_VoidWriteSpecialChar(pattern5_running,5,0,5);
	CLCD_VoidWriteSpecialChar(pattern6_football1,6,0,6);
	CLCD_VoidWriteSpecialChar(pattern7_football2,7,0,7);*/


	CLCD_VoidSendString("Hello! You yes  you");
    1e86:	80 e6       	ldi	r24, 0x60	; 96
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CLCD_VoidSendString>
	//CLCD_VoidReset_Display();
	CLCD_VoidWriteSpecialChar(pattern0_standing,0,1,15);
    1e8e:	ce 01       	movw	r24, r28
    1e90:	81 5f       	subi	r24, 0xF1	; 241
    1e92:	9e 4f       	sbci	r25, 0xFE	; 254
    1e94:	60 e0       	ldi	r22, 0x00	; 0
    1e96:	41 e0       	ldi	r20, 0x01	; 1
    1e98:	2f e0       	ldi	r18, 0x0F	; 15
    1e9a:	0e 94 bd 08 	call	0x117a	; 0x117a <CLCD_VoidWriteSpecialChar>
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e9 5f       	subi	r30, 0xF9	; 249
    1ea2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	90 e4       	ldi	r25, 0x40	; 64
    1ea8:	ac e9       	ldi	r26, 0x9C	; 156
    1eaa:	b5 e4       	ldi	r27, 0x45	; 69
    1eac:	80 83       	st	Z, r24
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	a2 83       	std	Z+2, r26	; 0x02
    1eb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb4:	8e 01       	movw	r16, r28
    1eb6:	0d 5f       	subi	r16, 0xFD	; 253
    1eb8:	1e 4f       	sbci	r17, 0xFE	; 254
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e9 5f       	subi	r30, 0xF9	; 249
    1ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec0:	60 81       	ld	r22, Z
    1ec2:	71 81       	ldd	r23, Z+1	; 0x01
    1ec4:	82 81       	ldd	r24, Z+2	; 0x02
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e8       	ldi	r19, 0x80	; 128
    1ecc:	4b e3       	ldi	r20, 0x3B	; 59
    1ece:	55 e4       	ldi	r21, 0x45	; 69
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	f8 01       	movw	r30, r16
    1eda:	80 83       	st	Z, r24
    1edc:	91 83       	std	Z+1, r25	; 0x01
    1ede:	a2 83       	std	Z+2, r26	; 0x02
    1ee0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	ed 5f       	subi	r30, 0xFD	; 253
    1ee6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ee8:	60 81       	ld	r22, Z
    1eea:	71 81       	ldd	r23, Z+1	; 0x01
    1eec:	82 81       	ldd	r24, Z+2	; 0x02
    1eee:	93 81       	ldd	r25, Z+3	; 0x03
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e8       	ldi	r20, 0x80	; 128
    1ef6:	5f e3       	ldi	r21, 0x3F	; 63
    1ef8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1efc:	88 23       	and	r24, r24
    1efe:	44 f4       	brge	.+16     	; 0x1f10 <main+0x5bc>
		__ticks = 1;
    1f00:	fe 01       	movw	r30, r28
    1f02:	ef 5f       	subi	r30, 0xFF	; 255
    1f04:	fe 4f       	sbci	r31, 0xFE	; 254
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	80 83       	st	Z, r24
    1f0e:	64 c0       	rjmp	.+200    	; 0x1fd8 <main+0x684>
	else if (__tmp > 65535)
    1f10:	fe 01       	movw	r30, r28
    1f12:	ed 5f       	subi	r30, 0xFD	; 253
    1f14:	fe 4f       	sbci	r31, 0xFE	; 254
    1f16:	60 81       	ld	r22, Z
    1f18:	71 81       	ldd	r23, Z+1	; 0x01
    1f1a:	82 81       	ldd	r24, Z+2	; 0x02
    1f1c:	93 81       	ldd	r25, Z+3	; 0x03
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	3f ef       	ldi	r19, 0xFF	; 255
    1f22:	4f e7       	ldi	r20, 0x7F	; 127
    1f24:	57 e4       	ldi	r21, 0x47	; 71
    1f26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f2a:	18 16       	cp	r1, r24
    1f2c:	0c f0       	brlt	.+2      	; 0x1f30 <main+0x5dc>
    1f2e:	43 c0       	rjmp	.+134    	; 0x1fb6 <main+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f30:	fe 01       	movw	r30, r28
    1f32:	e9 5f       	subi	r30, 0xF9	; 249
    1f34:	fe 4f       	sbci	r31, 0xFE	; 254
    1f36:	60 81       	ld	r22, Z
    1f38:	71 81       	ldd	r23, Z+1	; 0x01
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	93 81       	ldd	r25, Z+3	; 0x03
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e2       	ldi	r20, 0x20	; 32
    1f44:	51 e4       	ldi	r21, 0x41	; 65
    1f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	8e 01       	movw	r16, r28
    1f50:	0f 5f       	subi	r16, 0xFF	; 255
    1f52:	1e 4f       	sbci	r17, 0xFE	; 254
    1f54:	bc 01       	movw	r22, r24
    1f56:	cd 01       	movw	r24, r26
    1f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	f8 01       	movw	r30, r16
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	80 83       	st	Z, r24
    1f66:	1f c0       	rjmp	.+62     	; 0x1fa6 <main+0x652>
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e1 50       	subi	r30, 0x01	; 1
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	8c e2       	ldi	r24, 0x2C	; 44
    1f70:	91 e0       	ldi	r25, 0x01	; 1
    1f72:	91 83       	std	Z+1, r25	; 0x01
    1f74:	80 83       	st	Z, r24
    1f76:	fe 01       	movw	r30, r28
    1f78:	e1 50       	subi	r30, 0x01	; 1
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	80 81       	ld	r24, Z
    1f7e:	91 81       	ldd	r25, Z+1	; 0x01
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <main+0x62c>
    1f84:	fe 01       	movw	r30, r28
    1f86:	e1 50       	subi	r30, 0x01	; 1
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	91 83       	std	Z+1, r25	; 0x01
    1f8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8e:	de 01       	movw	r26, r28
    1f90:	af 5f       	subi	r26, 0xFF	; 255
    1f92:	be 4f       	sbci	r27, 0xFE	; 254
    1f94:	fe 01       	movw	r30, r28
    1f96:	ef 5f       	subi	r30, 0xFF	; 255
    1f98:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9a:	80 81       	ld	r24, Z
    1f9c:	91 81       	ldd	r25, Z+1	; 0x01
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	11 96       	adiw	r26, 0x01	; 1
    1fa2:	9c 93       	st	X, r25
    1fa4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	ef 5f       	subi	r30, 0xFF	; 255
    1faa:	fe 4f       	sbci	r31, 0xFE	; 254
    1fac:	80 81       	ld	r24, Z
    1fae:	91 81       	ldd	r25, Z+1	; 0x01
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	d1 f6       	brne	.-76     	; 0x1f68 <main+0x614>
    1fb4:	27 c0       	rjmp	.+78     	; 0x2004 <main+0x6b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb6:	8e 01       	movw	r16, r28
    1fb8:	0f 5f       	subi	r16, 0xFF	; 255
    1fba:	1e 4f       	sbci	r17, 0xFE	; 254
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	ed 5f       	subi	r30, 0xFD	; 253
    1fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc2:	60 81       	ld	r22, Z
    1fc4:	71 81       	ldd	r23, Z+1	; 0x01
    1fc6:	82 81       	ldd	r24, Z+2	; 0x02
    1fc8:	93 81       	ldd	r25, Z+3	; 0x03
    1fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	f8 01       	movw	r30, r16
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	80 83       	st	Z, r24
    1fd8:	de 01       	movw	r26, r28
    1fda:	a3 50       	subi	r26, 0x03	; 3
    1fdc:	bf 4f       	sbci	r27, 0xFF	; 255
    1fde:	fe 01       	movw	r30, r28
    1fe0:	ef 5f       	subi	r30, 0xFF	; 255
    1fe2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe4:	80 81       	ld	r24, Z
    1fe6:	91 81       	ldd	r25, Z+1	; 0x01
    1fe8:	8d 93       	st	X+, r24
    1fea:	9c 93       	st	X, r25
    1fec:	fe 01       	movw	r30, r28
    1fee:	e3 50       	subi	r30, 0x03	; 3
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	80 81       	ld	r24, Z
    1ff4:	91 81       	ldd	r25, Z+1	; 0x01
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <main+0x6a2>
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e3 50       	subi	r30, 0x03	; 3
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	91 83       	std	Z+1, r25	; 0x01
    2002:	80 83       	st	Z, r24
	_delay_ms(5000);
	CLCD_VoidReset_Display();
    2004:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_VoidReset_Display>
	CLCD_VoidSendString("and how I got to your LCD");
	_delay_ms(5000);
	CLCD_VoidReset_Display();
	CLCD_VoidWriteSpecialChar(pattern0_standing,0,1,15);
	CLCD_VoidGoToXY(0,0);*/
	CLCD_VoidSendString("I am Mr P I can do many things");
    2008:	84 e7       	ldi	r24, 0x74	; 116
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CLCD_VoidSendString>

	//CLCD_VoidReset_Display();
	CLCD_VoidWriteSpecialChar(pattern0_standing,0,1,15);
    2010:	ce 01       	movw	r24, r28
    2012:	81 5f       	subi	r24, 0xF1	; 241
    2014:	9e 4f       	sbci	r25, 0xFE	; 254
    2016:	60 e0       	ldi	r22, 0x00	; 0
    2018:	41 e0       	ldi	r20, 0x01	; 1
    201a:	2f e0       	ldi	r18, 0x0F	; 15
    201c:	0e 94 bd 08 	call	0x117a	; 0x117a <CLCD_VoidWriteSpecialChar>
    2020:	fe 01       	movw	r30, r28
    2022:	e7 50       	subi	r30, 0x07	; 7
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e4       	ldi	r25, 0x40	; 64
    202a:	ac e9       	ldi	r26, 0x9C	; 156
    202c:	b5 e4       	ldi	r27, 0x45	; 69
    202e:	80 83       	st	Z, r24
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	a2 83       	std	Z+2, r26	; 0x02
    2034:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2036:	8e 01       	movw	r16, r28
    2038:	0b 50       	subi	r16, 0x0B	; 11
    203a:	1f 4f       	sbci	r17, 0xFF	; 255
    203c:	fe 01       	movw	r30, r28
    203e:	e7 50       	subi	r30, 0x07	; 7
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	60 81       	ld	r22, Z
    2044:	71 81       	ldd	r23, Z+1	; 0x01
    2046:	82 81       	ldd	r24, Z+2	; 0x02
    2048:	93 81       	ldd	r25, Z+3	; 0x03
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e8       	ldi	r19, 0x80	; 128
    204e:	4b e3       	ldi	r20, 0x3B	; 59
    2050:	55 e4       	ldi	r21, 0x45	; 69
    2052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	f8 01       	movw	r30, r16
    205c:	80 83       	st	Z, r24
    205e:	91 83       	std	Z+1, r25	; 0x01
    2060:	a2 83       	std	Z+2, r26	; 0x02
    2062:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2064:	fe 01       	movw	r30, r28
    2066:	eb 50       	subi	r30, 0x0B	; 11
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	60 81       	ld	r22, Z
    206c:	71 81       	ldd	r23, Z+1	; 0x01
    206e:	82 81       	ldd	r24, Z+2	; 0x02
    2070:	93 81       	ldd	r25, Z+3	; 0x03
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e8       	ldi	r20, 0x80	; 128
    2078:	5f e3       	ldi	r21, 0x3F	; 63
    207a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    207e:	88 23       	and	r24, r24
    2080:	44 f4       	brge	.+16     	; 0x2092 <main+0x73e>
		__ticks = 1;
    2082:	fe 01       	movw	r30, r28
    2084:	ed 50       	subi	r30, 0x0D	; 13
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	91 83       	std	Z+1, r25	; 0x01
    208e:	80 83       	st	Z, r24
    2090:	64 c0       	rjmp	.+200    	; 0x215a <main+0x806>
	else if (__tmp > 65535)
    2092:	fe 01       	movw	r30, r28
    2094:	eb 50       	subi	r30, 0x0B	; 11
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	60 81       	ld	r22, Z
    209a:	71 81       	ldd	r23, Z+1	; 0x01
    209c:	82 81       	ldd	r24, Z+2	; 0x02
    209e:	93 81       	ldd	r25, Z+3	; 0x03
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	3f ef       	ldi	r19, 0xFF	; 255
    20a4:	4f e7       	ldi	r20, 0x7F	; 127
    20a6:	57 e4       	ldi	r21, 0x47	; 71
    20a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ac:	18 16       	cp	r1, r24
    20ae:	0c f0       	brlt	.+2      	; 0x20b2 <main+0x75e>
    20b0:	43 c0       	rjmp	.+134    	; 0x2138 <main+0x7e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b2:	fe 01       	movw	r30, r28
    20b4:	e7 50       	subi	r30, 0x07	; 7
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	60 81       	ld	r22, Z
    20ba:	71 81       	ldd	r23, Z+1	; 0x01
    20bc:	82 81       	ldd	r24, Z+2	; 0x02
    20be:	93 81       	ldd	r25, Z+3	; 0x03
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e2       	ldi	r20, 0x20	; 32
    20c6:	51 e4       	ldi	r21, 0x41	; 65
    20c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	8e 01       	movw	r16, r28
    20d2:	0d 50       	subi	r16, 0x0D	; 13
    20d4:	1f 4f       	sbci	r17, 0xFF	; 255
    20d6:	bc 01       	movw	r22, r24
    20d8:	cd 01       	movw	r24, r26
    20da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	f8 01       	movw	r30, r16
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	80 83       	st	Z, r24
    20e8:	1f c0       	rjmp	.+62     	; 0x2128 <main+0x7d4>
    20ea:	fe 01       	movw	r30, r28
    20ec:	ef 50       	subi	r30, 0x0F	; 15
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	8c e2       	ldi	r24, 0x2C	; 44
    20f2:	91 e0       	ldi	r25, 0x01	; 1
    20f4:	91 83       	std	Z+1, r25	; 0x01
    20f6:	80 83       	st	Z, r24
    20f8:	fe 01       	movw	r30, r28
    20fa:	ef 50       	subi	r30, 0x0F	; 15
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	80 81       	ld	r24, Z
    2100:	91 81       	ldd	r25, Z+1	; 0x01
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <main+0x7ae>
    2106:	fe 01       	movw	r30, r28
    2108:	ef 50       	subi	r30, 0x0F	; 15
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2110:	de 01       	movw	r26, r28
    2112:	ad 50       	subi	r26, 0x0D	; 13
    2114:	bf 4f       	sbci	r27, 0xFF	; 255
    2116:	fe 01       	movw	r30, r28
    2118:	ed 50       	subi	r30, 0x0D	; 13
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	80 81       	ld	r24, Z
    211e:	91 81       	ldd	r25, Z+1	; 0x01
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	11 96       	adiw	r26, 0x01	; 1
    2124:	9c 93       	st	X, r25
    2126:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2128:	fe 01       	movw	r30, r28
    212a:	ed 50       	subi	r30, 0x0D	; 13
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	80 81       	ld	r24, Z
    2130:	91 81       	ldd	r25, Z+1	; 0x01
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	d1 f6       	brne	.-76     	; 0x20ea <main+0x796>
    2136:	27 c0       	rjmp	.+78     	; 0x2186 <main+0x832>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2138:	8e 01       	movw	r16, r28
    213a:	0d 50       	subi	r16, 0x0D	; 13
    213c:	1f 4f       	sbci	r17, 0xFF	; 255
    213e:	fe 01       	movw	r30, r28
    2140:	eb 50       	subi	r30, 0x0B	; 11
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	60 81       	ld	r22, Z
    2146:	71 81       	ldd	r23, Z+1	; 0x01
    2148:	82 81       	ldd	r24, Z+2	; 0x02
    214a:	93 81       	ldd	r25, Z+3	; 0x03
    214c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	f8 01       	movw	r30, r16
    2156:	91 83       	std	Z+1, r25	; 0x01
    2158:	80 83       	st	Z, r24
    215a:	de 01       	movw	r26, r28
    215c:	a1 51       	subi	r26, 0x11	; 17
    215e:	bf 4f       	sbci	r27, 0xFF	; 255
    2160:	fe 01       	movw	r30, r28
    2162:	ed 50       	subi	r30, 0x0D	; 13
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 81       	ld	r24, Z
    2168:	91 81       	ldd	r25, Z+1	; 0x01
    216a:	8d 93       	st	X+, r24
    216c:	9c 93       	st	X, r25
    216e:	fe 01       	movw	r30, r28
    2170:	e1 51       	subi	r30, 0x11	; 17
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	80 81       	ld	r24, Z
    2176:	91 81       	ldd	r25, Z+1	; 0x01
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <main+0x824>
    217c:	fe 01       	movw	r30, r28
    217e:	e1 51       	subi	r30, 0x11	; 17
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	80 83       	st	Z, r24
	_delay_ms(5000);
	CLCD_VoidGoToXY(0,0);
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	60 e0       	ldi	r22, 0x00	; 0
    218a:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_VoidGoToXY>
	CLCD_VoidReset_Display();
    218e:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_VoidReset_Display>
	CLCD_VoidSendString("I can run");
    2192:	83 e9       	ldi	r24, 0x93	; 147
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CLCD_VoidSendString>
    219a:	fe 01       	movw	r30, r28
    219c:	e5 51       	subi	r30, 0x15	; 21
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	90 e4       	ldi	r25, 0x40	; 64
    21a4:	ac e9       	ldi	r26, 0x9C	; 156
    21a6:	b5 e4       	ldi	r27, 0x45	; 69
    21a8:	80 83       	st	Z, r24
    21aa:	91 83       	std	Z+1, r25	; 0x01
    21ac:	a2 83       	std	Z+2, r26	; 0x02
    21ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b0:	8e 01       	movw	r16, r28
    21b2:	09 51       	subi	r16, 0x19	; 25
    21b4:	1f 4f       	sbci	r17, 0xFF	; 255
    21b6:	fe 01       	movw	r30, r28
    21b8:	e5 51       	subi	r30, 0x15	; 21
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	60 81       	ld	r22, Z
    21be:	71 81       	ldd	r23, Z+1	; 0x01
    21c0:	82 81       	ldd	r24, Z+2	; 0x02
    21c2:	93 81       	ldd	r25, Z+3	; 0x03
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e8       	ldi	r19, 0x80	; 128
    21c8:	4b e3       	ldi	r20, 0x3B	; 59
    21ca:	55 e4       	ldi	r21, 0x45	; 69
    21cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	f8 01       	movw	r30, r16
    21d6:	80 83       	st	Z, r24
    21d8:	91 83       	std	Z+1, r25	; 0x01
    21da:	a2 83       	std	Z+2, r26	; 0x02
    21dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21de:	fe 01       	movw	r30, r28
    21e0:	e9 51       	subi	r30, 0x19	; 25
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	60 81       	ld	r22, Z
    21e6:	71 81       	ldd	r23, Z+1	; 0x01
    21e8:	82 81       	ldd	r24, Z+2	; 0x02
    21ea:	93 81       	ldd	r25, Z+3	; 0x03
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e8       	ldi	r20, 0x80	; 128
    21f2:	5f e3       	ldi	r21, 0x3F	; 63
    21f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f8:	88 23       	and	r24, r24
    21fa:	44 f4       	brge	.+16     	; 0x220c <main+0x8b8>
		__ticks = 1;
    21fc:	fe 01       	movw	r30, r28
    21fe:	eb 51       	subi	r30, 0x1B	; 27
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	91 83       	std	Z+1, r25	; 0x01
    2208:	80 83       	st	Z, r24
    220a:	64 c0       	rjmp	.+200    	; 0x22d4 <main+0x980>
	else if (__tmp > 65535)
    220c:	fe 01       	movw	r30, r28
    220e:	e9 51       	subi	r30, 0x19	; 25
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	60 81       	ld	r22, Z
    2214:	71 81       	ldd	r23, Z+1	; 0x01
    2216:	82 81       	ldd	r24, Z+2	; 0x02
    2218:	93 81       	ldd	r25, Z+3	; 0x03
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	3f ef       	ldi	r19, 0xFF	; 255
    221e:	4f e7       	ldi	r20, 0x7F	; 127
    2220:	57 e4       	ldi	r21, 0x47	; 71
    2222:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2226:	18 16       	cp	r1, r24
    2228:	0c f0       	brlt	.+2      	; 0x222c <main+0x8d8>
    222a:	43 c0       	rjmp	.+134    	; 0x22b2 <main+0x95e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222c:	fe 01       	movw	r30, r28
    222e:	e5 51       	subi	r30, 0x15	; 21
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	60 81       	ld	r22, Z
    2234:	71 81       	ldd	r23, Z+1	; 0x01
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	93 81       	ldd	r25, Z+3	; 0x03
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e2       	ldi	r20, 0x20	; 32
    2240:	51 e4       	ldi	r21, 0x41	; 65
    2242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	8e 01       	movw	r16, r28
    224c:	0b 51       	subi	r16, 0x1B	; 27
    224e:	1f 4f       	sbci	r17, 0xFF	; 255
    2250:	bc 01       	movw	r22, r24
    2252:	cd 01       	movw	r24, r26
    2254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	f8 01       	movw	r30, r16
    225e:	91 83       	std	Z+1, r25	; 0x01
    2260:	80 83       	st	Z, r24
    2262:	1f c0       	rjmp	.+62     	; 0x22a2 <main+0x94e>
    2264:	fe 01       	movw	r30, r28
    2266:	ed 51       	subi	r30, 0x1D	; 29
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	8c e2       	ldi	r24, 0x2C	; 44
    226c:	91 e0       	ldi	r25, 0x01	; 1
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	80 83       	st	Z, r24
    2272:	fe 01       	movw	r30, r28
    2274:	ed 51       	subi	r30, 0x1D	; 29
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	91 81       	ldd	r25, Z+1	; 0x01
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <main+0x928>
    2280:	fe 01       	movw	r30, r28
    2282:	ed 51       	subi	r30, 0x1D	; 29
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228a:	de 01       	movw	r26, r28
    228c:	ab 51       	subi	r26, 0x1B	; 27
    228e:	bf 4f       	sbci	r27, 0xFF	; 255
    2290:	fe 01       	movw	r30, r28
    2292:	eb 51       	subi	r30, 0x1B	; 27
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	80 81       	ld	r24, Z
    2298:	91 81       	ldd	r25, Z+1	; 0x01
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	11 96       	adiw	r26, 0x01	; 1
    229e:	9c 93       	st	X, r25
    22a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a2:	fe 01       	movw	r30, r28
    22a4:	eb 51       	subi	r30, 0x1B	; 27
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	80 81       	ld	r24, Z
    22aa:	91 81       	ldd	r25, Z+1	; 0x01
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	d1 f6       	brne	.-76     	; 0x2264 <main+0x910>
    22b0:	28 c0       	rjmp	.+80     	; 0x2302 <main+0x9ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b2:	8e 01       	movw	r16, r28
    22b4:	0b 51       	subi	r16, 0x1B	; 27
    22b6:	1f 4f       	sbci	r17, 0xFF	; 255
    22b8:	fe 01       	movw	r30, r28
    22ba:	e9 51       	subi	r30, 0x19	; 25
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	60 81       	ld	r22, Z
    22c0:	71 81       	ldd	r23, Z+1	; 0x01
    22c2:	82 81       	ldd	r24, Z+2	; 0x02
    22c4:	93 81       	ldd	r25, Z+3	; 0x03
    22c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	f8 01       	movw	r30, r16
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24
    22d4:	de 01       	movw	r26, r28
    22d6:	af 51       	subi	r26, 0x1F	; 31
    22d8:	bf 4f       	sbci	r27, 0xFF	; 255
    22da:	fe 01       	movw	r30, r28
    22dc:	eb 51       	subi	r30, 0x1B	; 27
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	80 81       	ld	r24, Z
    22e2:	91 81       	ldd	r25, Z+1	; 0x01
    22e4:	11 96       	adiw	r26, 0x01	; 1
    22e6:	9c 93       	st	X, r25
    22e8:	8e 93       	st	-X, r24
    22ea:	fe 01       	movw	r30, r28
    22ec:	ef 51       	subi	r30, 0x1F	; 31
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	80 81       	ld	r24, Z
    22f2:	91 81       	ldd	r25, Z+1	; 0x01
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <main+0x9a0>
    22f8:	fe 01       	movw	r30, r28
    22fa:	ef 51       	subi	r30, 0x1F	; 31
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	91 83       	std	Z+1, r25	; 0x01
    2300:	80 83       	st	Z, r24
	_delay_ms(5000);
	//running
	for(u8 i=0;i<16;i+=2)
    2302:	fe 01       	movw	r30, r28
    2304:	e2 5f       	subi	r30, 0xF2	; 242
    2306:	fe 4f       	sbci	r31, 0xFE	; 254
    2308:	10 82       	st	Z, r1
    230a:	8b c1       	rjmp	.+790    	; 0x2622 <main+0xcce>
	{
		CLCD_VoidWriteSpecialChar(pattern1_dancing1,1,1,i);
    230c:	ce 01       	movw	r24, r28
    230e:	89 5e       	subi	r24, 0xE9	; 233
    2310:	9e 4f       	sbci	r25, 0xFE	; 254
    2312:	fe 01       	movw	r30, r28
    2314:	e2 5f       	subi	r30, 0xF2	; 242
    2316:	fe 4f       	sbci	r31, 0xFE	; 254
    2318:	61 e0       	ldi	r22, 0x01	; 1
    231a:	41 e0       	ldi	r20, 0x01	; 1
    231c:	20 81       	ld	r18, Z
    231e:	0e 94 bd 08 	call	0x117a	; 0x117a <CLCD_VoidWriteSpecialChar>
    2322:	fe 01       	movw	r30, r28
    2324:	e3 52       	subi	r30, 0x23	; 35
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	a6 e9       	ldi	r26, 0x96	; 150
    232e:	b3 e4       	ldi	r27, 0x43	; 67
    2330:	80 83       	st	Z, r24
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	a2 83       	std	Z+2, r26	; 0x02
    2336:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2338:	8e 01       	movw	r16, r28
    233a:	07 52       	subi	r16, 0x27	; 39
    233c:	1f 4f       	sbci	r17, 0xFF	; 255
    233e:	fe 01       	movw	r30, r28
    2340:	e3 52       	subi	r30, 0x23	; 35
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	60 81       	ld	r22, Z
    2346:	71 81       	ldd	r23, Z+1	; 0x01
    2348:	82 81       	ldd	r24, Z+2	; 0x02
    234a:	93 81       	ldd	r25, Z+3	; 0x03
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e8       	ldi	r19, 0x80	; 128
    2350:	4b e3       	ldi	r20, 0x3B	; 59
    2352:	55 e4       	ldi	r21, 0x45	; 69
    2354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	f8 01       	movw	r30, r16
    235e:	80 83       	st	Z, r24
    2360:	91 83       	std	Z+1, r25	; 0x01
    2362:	a2 83       	std	Z+2, r26	; 0x02
    2364:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2366:	fe 01       	movw	r30, r28
    2368:	e7 52       	subi	r30, 0x27	; 39
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e8       	ldi	r20, 0x80	; 128
    237a:	5f e3       	ldi	r21, 0x3F	; 63
    237c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2380:	88 23       	and	r24, r24
    2382:	44 f4       	brge	.+16     	; 0x2394 <main+0xa40>
		__ticks = 1;
    2384:	fe 01       	movw	r30, r28
    2386:	e9 52       	subi	r30, 0x29	; 41
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	91 83       	std	Z+1, r25	; 0x01
    2390:	80 83       	st	Z, r24
    2392:	64 c0       	rjmp	.+200    	; 0x245c <main+0xb08>
	else if (__tmp > 65535)
    2394:	fe 01       	movw	r30, r28
    2396:	e7 52       	subi	r30, 0x27	; 39
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	60 81       	ld	r22, Z
    239c:	71 81       	ldd	r23, Z+1	; 0x01
    239e:	82 81       	ldd	r24, Z+2	; 0x02
    23a0:	93 81       	ldd	r25, Z+3	; 0x03
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	3f ef       	ldi	r19, 0xFF	; 255
    23a6:	4f e7       	ldi	r20, 0x7F	; 127
    23a8:	57 e4       	ldi	r21, 0x47	; 71
    23aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ae:	18 16       	cp	r1, r24
    23b0:	0c f0       	brlt	.+2      	; 0x23b4 <main+0xa60>
    23b2:	43 c0       	rjmp	.+134    	; 0x243a <main+0xae6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b4:	fe 01       	movw	r30, r28
    23b6:	e3 52       	subi	r30, 0x23	; 35
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	60 81       	ld	r22, Z
    23bc:	71 81       	ldd	r23, Z+1	; 0x01
    23be:	82 81       	ldd	r24, Z+2	; 0x02
    23c0:	93 81       	ldd	r25, Z+3	; 0x03
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e2       	ldi	r20, 0x20	; 32
    23c8:	51 e4       	ldi	r21, 0x41	; 65
    23ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	8e 01       	movw	r16, r28
    23d4:	09 52       	subi	r16, 0x29	; 41
    23d6:	1f 4f       	sbci	r17, 0xFF	; 255
    23d8:	bc 01       	movw	r22, r24
    23da:	cd 01       	movw	r24, r26
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	f8 01       	movw	r30, r16
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	80 83       	st	Z, r24
    23ea:	1f c0       	rjmp	.+62     	; 0x242a <main+0xad6>
    23ec:	fe 01       	movw	r30, r28
    23ee:	eb 52       	subi	r30, 0x2B	; 43
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	8c e2       	ldi	r24, 0x2C	; 44
    23f4:	91 e0       	ldi	r25, 0x01	; 1
    23f6:	91 83       	std	Z+1, r25	; 0x01
    23f8:	80 83       	st	Z, r24
    23fa:	fe 01       	movw	r30, r28
    23fc:	eb 52       	subi	r30, 0x2B	; 43
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	80 81       	ld	r24, Z
    2402:	91 81       	ldd	r25, Z+1	; 0x01
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <main+0xab0>
    2408:	fe 01       	movw	r30, r28
    240a:	eb 52       	subi	r30, 0x2B	; 43
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	91 83       	std	Z+1, r25	; 0x01
    2410:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2412:	de 01       	movw	r26, r28
    2414:	a9 52       	subi	r26, 0x29	; 41
    2416:	bf 4f       	sbci	r27, 0xFF	; 255
    2418:	fe 01       	movw	r30, r28
    241a:	e9 52       	subi	r30, 0x29	; 41
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	80 81       	ld	r24, Z
    2420:	91 81       	ldd	r25, Z+1	; 0x01
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	11 96       	adiw	r26, 0x01	; 1
    2426:	9c 93       	st	X, r25
    2428:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242a:	fe 01       	movw	r30, r28
    242c:	e9 52       	subi	r30, 0x29	; 41
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	80 81       	ld	r24, Z
    2432:	91 81       	ldd	r25, Z+1	; 0x01
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	d1 f6       	brne	.-76     	; 0x23ec <main+0xa98>
    2438:	27 c0       	rjmp	.+78     	; 0x2488 <main+0xb34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243a:	8e 01       	movw	r16, r28
    243c:	09 52       	subi	r16, 0x29	; 41
    243e:	1f 4f       	sbci	r17, 0xFF	; 255
    2440:	fe 01       	movw	r30, r28
    2442:	e7 52       	subi	r30, 0x27	; 39
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	60 81       	ld	r22, Z
    2448:	71 81       	ldd	r23, Z+1	; 0x01
    244a:	82 81       	ldd	r24, Z+2	; 0x02
    244c:	93 81       	ldd	r25, Z+3	; 0x03
    244e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	f8 01       	movw	r30, r16
    2458:	91 83       	std	Z+1, r25	; 0x01
    245a:	80 83       	st	Z, r24
    245c:	de 01       	movw	r26, r28
    245e:	ad 52       	subi	r26, 0x2D	; 45
    2460:	bf 4f       	sbci	r27, 0xFF	; 255
    2462:	fe 01       	movw	r30, r28
    2464:	e9 52       	subi	r30, 0x29	; 41
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 81       	ld	r24, Z
    246a:	91 81       	ldd	r25, Z+1	; 0x01
    246c:	8d 93       	st	X+, r24
    246e:	9c 93       	st	X, r25
    2470:	fe 01       	movw	r30, r28
    2472:	ed 52       	subi	r30, 0x2D	; 45
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	80 81       	ld	r24, Z
    2478:	91 81       	ldd	r25, Z+1	; 0x01
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <main+0xb26>
    247e:	fe 01       	movw	r30, r28
    2480:	ed 52       	subi	r30, 0x2D	; 45
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	91 83       	std	Z+1, r25	; 0x01
    2486:	80 83       	st	Z, r24
		_delay_ms(300);
		CLCD_VoidReset_Display();
    2488:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_VoidReset_Display>
		CLCD_VoidWriteSpecialChar(pattern5_running,2,1,i+1);
    248c:	fe 01       	movw	r30, r28
    248e:	e2 5f       	subi	r30, 0xF2	; 242
    2490:	fe 4f       	sbci	r31, 0xFE	; 254
    2492:	80 81       	ld	r24, Z
    2494:	28 2f       	mov	r18, r24
    2496:	2f 5f       	subi	r18, 0xFF	; 255
    2498:	ce 01       	movw	r24, r28
    249a:	89 5c       	subi	r24, 0xC9	; 201
    249c:	9e 4f       	sbci	r25, 0xFE	; 254
    249e:	62 e0       	ldi	r22, 0x02	; 2
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 bd 08 	call	0x117a	; 0x117a <CLCD_VoidWriteSpecialChar>
    24a6:	fe 01       	movw	r30, r28
    24a8:	e1 53       	subi	r30, 0x31	; 49
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	a6 e9       	ldi	r26, 0x96	; 150
    24b2:	b3 e4       	ldi	r27, 0x43	; 67
    24b4:	80 83       	st	Z, r24
    24b6:	91 83       	std	Z+1, r25	; 0x01
    24b8:	a2 83       	std	Z+2, r26	; 0x02
    24ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24bc:	8e 01       	movw	r16, r28
    24be:	05 53       	subi	r16, 0x35	; 53
    24c0:	1f 4f       	sbci	r17, 0xFF	; 255
    24c2:	fe 01       	movw	r30, r28
    24c4:	e1 53       	subi	r30, 0x31	; 49
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	60 81       	ld	r22, Z
    24ca:	71 81       	ldd	r23, Z+1	; 0x01
    24cc:	82 81       	ldd	r24, Z+2	; 0x02
    24ce:	93 81       	ldd	r25, Z+3	; 0x03
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e8       	ldi	r19, 0x80	; 128
    24d4:	4b e3       	ldi	r20, 0x3B	; 59
    24d6:	55 e4       	ldi	r21, 0x45	; 69
    24d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	f8 01       	movw	r30, r16
    24e2:	80 83       	st	Z, r24
    24e4:	91 83       	std	Z+1, r25	; 0x01
    24e6:	a2 83       	std	Z+2, r26	; 0x02
    24e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ea:	fe 01       	movw	r30, r28
    24ec:	e5 53       	subi	r30, 0x35	; 53
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	60 81       	ld	r22, Z
    24f2:	71 81       	ldd	r23, Z+1	; 0x01
    24f4:	82 81       	ldd	r24, Z+2	; 0x02
    24f6:	93 81       	ldd	r25, Z+3	; 0x03
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e8       	ldi	r20, 0x80	; 128
    24fe:	5f e3       	ldi	r21, 0x3F	; 63
    2500:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2504:	88 23       	and	r24, r24
    2506:	44 f4       	brge	.+16     	; 0x2518 <main+0xbc4>
		__ticks = 1;
    2508:	fe 01       	movw	r30, r28
    250a:	e7 53       	subi	r30, 0x37	; 55
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	91 83       	std	Z+1, r25	; 0x01
    2514:	80 83       	st	Z, r24
    2516:	64 c0       	rjmp	.+200    	; 0x25e0 <main+0xc8c>
	else if (__tmp > 65535)
    2518:	fe 01       	movw	r30, r28
    251a:	e5 53       	subi	r30, 0x35	; 53
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	60 81       	ld	r22, Z
    2520:	71 81       	ldd	r23, Z+1	; 0x01
    2522:	82 81       	ldd	r24, Z+2	; 0x02
    2524:	93 81       	ldd	r25, Z+3	; 0x03
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	3f ef       	ldi	r19, 0xFF	; 255
    252a:	4f e7       	ldi	r20, 0x7F	; 127
    252c:	57 e4       	ldi	r21, 0x47	; 71
    252e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2532:	18 16       	cp	r1, r24
    2534:	0c f0       	brlt	.+2      	; 0x2538 <main+0xbe4>
    2536:	43 c0       	rjmp	.+134    	; 0x25be <main+0xc6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2538:	fe 01       	movw	r30, r28
    253a:	e1 53       	subi	r30, 0x31	; 49
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	60 81       	ld	r22, Z
    2540:	71 81       	ldd	r23, Z+1	; 0x01
    2542:	82 81       	ldd	r24, Z+2	; 0x02
    2544:	93 81       	ldd	r25, Z+3	; 0x03
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e2       	ldi	r20, 0x20	; 32
    254c:	51 e4       	ldi	r21, 0x41	; 65
    254e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	8e 01       	movw	r16, r28
    2558:	07 53       	subi	r16, 0x37	; 55
    255a:	1f 4f       	sbci	r17, 0xFF	; 255
    255c:	bc 01       	movw	r22, r24
    255e:	cd 01       	movw	r24, r26
    2560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	f8 01       	movw	r30, r16
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	80 83       	st	Z, r24
    256e:	1f c0       	rjmp	.+62     	; 0x25ae <main+0xc5a>
    2570:	fe 01       	movw	r30, r28
    2572:	e9 53       	subi	r30, 0x39	; 57
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	8c e2       	ldi	r24, 0x2C	; 44
    2578:	91 e0       	ldi	r25, 0x01	; 1
    257a:	91 83       	std	Z+1, r25	; 0x01
    257c:	80 83       	st	Z, r24
    257e:	fe 01       	movw	r30, r28
    2580:	e9 53       	subi	r30, 0x39	; 57
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 81       	ld	r24, Z
    2586:	91 81       	ldd	r25, Z+1	; 0x01
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <main+0xc34>
    258c:	fe 01       	movw	r30, r28
    258e:	e9 53       	subi	r30, 0x39	; 57
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	91 83       	std	Z+1, r25	; 0x01
    2594:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2596:	de 01       	movw	r26, r28
    2598:	a7 53       	subi	r26, 0x37	; 55
    259a:	bf 4f       	sbci	r27, 0xFF	; 255
    259c:	fe 01       	movw	r30, r28
    259e:	e7 53       	subi	r30, 0x37	; 55
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 81       	ld	r24, Z
    25a4:	91 81       	ldd	r25, Z+1	; 0x01
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	11 96       	adiw	r26, 0x01	; 1
    25aa:	9c 93       	st	X, r25
    25ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ae:	fe 01       	movw	r30, r28
    25b0:	e7 53       	subi	r30, 0x37	; 55
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	80 81       	ld	r24, Z
    25b6:	91 81       	ldd	r25, Z+1	; 0x01
    25b8:	00 97       	sbiw	r24, 0x00	; 0
    25ba:	d1 f6       	brne	.-76     	; 0x2570 <main+0xc1c>
    25bc:	27 c0       	rjmp	.+78     	; 0x260c <main+0xcb8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25be:	8e 01       	movw	r16, r28
    25c0:	07 53       	subi	r16, 0x37	; 55
    25c2:	1f 4f       	sbci	r17, 0xFF	; 255
    25c4:	fe 01       	movw	r30, r28
    25c6:	e5 53       	subi	r30, 0x35	; 53
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	60 81       	ld	r22, Z
    25cc:	71 81       	ldd	r23, Z+1	; 0x01
    25ce:	82 81       	ldd	r24, Z+2	; 0x02
    25d0:	93 81       	ldd	r25, Z+3	; 0x03
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	f8 01       	movw	r30, r16
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	80 83       	st	Z, r24
    25e0:	de 01       	movw	r26, r28
    25e2:	ab 53       	subi	r26, 0x3B	; 59
    25e4:	bf 4f       	sbci	r27, 0xFF	; 255
    25e6:	fe 01       	movw	r30, r28
    25e8:	e7 53       	subi	r30, 0x37	; 55
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	80 81       	ld	r24, Z
    25ee:	91 81       	ldd	r25, Z+1	; 0x01
    25f0:	8d 93       	st	X+, r24
    25f2:	9c 93       	st	X, r25
    25f4:	fe 01       	movw	r30, r28
    25f6:	eb 53       	subi	r30, 0x3B	; 59
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	80 81       	ld	r24, Z
    25fc:	91 81       	ldd	r25, Z+1	; 0x01
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <main+0xcaa>
    2602:	fe 01       	movw	r30, r28
    2604:	eb 53       	subi	r30, 0x3B	; 59
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	91 83       	std	Z+1, r25	; 0x01
    260a:	80 83       	st	Z, r24
		_delay_ms(300);
		CLCD_VoidReset_Display();
    260c:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_VoidReset_Display>
	CLCD_VoidGoToXY(0,0);
	CLCD_VoidReset_Display();
	CLCD_VoidSendString("I can run");
	_delay_ms(5000);
	//running
	for(u8 i=0;i<16;i+=2)
    2610:	de 01       	movw	r26, r28
    2612:	a2 5f       	subi	r26, 0xF2	; 242
    2614:	be 4f       	sbci	r27, 0xFE	; 254
    2616:	fe 01       	movw	r30, r28
    2618:	e2 5f       	subi	r30, 0xF2	; 242
    261a:	fe 4f       	sbci	r31, 0xFE	; 254
    261c:	80 81       	ld	r24, Z
    261e:	8e 5f       	subi	r24, 0xFE	; 254
    2620:	8c 93       	st	X, r24
    2622:	fe 01       	movw	r30, r28
    2624:	e2 5f       	subi	r30, 0xF2	; 242
    2626:	fe 4f       	sbci	r31, 0xFE	; 254
    2628:	80 81       	ld	r24, Z
    262a:	80 31       	cpi	r24, 0x10	; 16
    262c:	08 f4       	brcc	.+2      	; 0x2630 <main+0xcdc>
    262e:	6e ce       	rjmp	.-804    	; 0x230c <main+0x9b8>
		CLCD_VoidWriteSpecialChar(pattern5_running,2,1,i+1);
		_delay_ms(300);
		CLCD_VoidReset_Display();
	}

	CLCD_VoidGoToXY(0,0);
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_VoidGoToXY>
	CLCD_VoidSendString("I can dance");
    2638:	8d e9       	ldi	r24, 0x9D	; 157
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CLCD_VoidSendString>
    2640:	fe 01       	movw	r30, r28
    2642:	ef 53       	subi	r30, 0x3F	; 63
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	aa e7       	ldi	r26, 0x7A	; 122
    264c:	b4 e4       	ldi	r27, 0x44	; 68
    264e:	80 83       	st	Z, r24
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	a2 83       	std	Z+2, r26	; 0x02
    2654:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2656:	8e 01       	movw	r16, r28
    2658:	03 54       	subi	r16, 0x43	; 67
    265a:	1f 4f       	sbci	r17, 0xFF	; 255
    265c:	fe 01       	movw	r30, r28
    265e:	ef 53       	subi	r30, 0x3F	; 63
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	60 81       	ld	r22, Z
    2664:	71 81       	ldd	r23, Z+1	; 0x01
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	93 81       	ldd	r25, Z+3	; 0x03
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e8       	ldi	r19, 0x80	; 128
    266e:	4b e3       	ldi	r20, 0x3B	; 59
    2670:	55 e4       	ldi	r21, 0x45	; 69
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	f8 01       	movw	r30, r16
    267c:	80 83       	st	Z, r24
    267e:	91 83       	std	Z+1, r25	; 0x01
    2680:	a2 83       	std	Z+2, r26	; 0x02
    2682:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2684:	fe 01       	movw	r30, r28
    2686:	e3 54       	subi	r30, 0x43	; 67
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	60 81       	ld	r22, Z
    268c:	71 81       	ldd	r23, Z+1	; 0x01
    268e:	82 81       	ldd	r24, Z+2	; 0x02
    2690:	93 81       	ldd	r25, Z+3	; 0x03
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e8       	ldi	r20, 0x80	; 128
    2698:	5f e3       	ldi	r21, 0x3F	; 63
    269a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    269e:	88 23       	and	r24, r24
    26a0:	44 f4       	brge	.+16     	; 0x26b2 <main+0xd5e>
		__ticks = 1;
    26a2:	fe 01       	movw	r30, r28
    26a4:	e5 54       	subi	r30, 0x45	; 69
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24
    26b0:	64 c0       	rjmp	.+200    	; 0x277a <main+0xe26>
	else if (__tmp > 65535)
    26b2:	fe 01       	movw	r30, r28
    26b4:	e3 54       	subi	r30, 0x43	; 67
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	60 81       	ld	r22, Z
    26ba:	71 81       	ldd	r23, Z+1	; 0x01
    26bc:	82 81       	ldd	r24, Z+2	; 0x02
    26be:	93 81       	ldd	r25, Z+3	; 0x03
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	3f ef       	ldi	r19, 0xFF	; 255
    26c4:	4f e7       	ldi	r20, 0x7F	; 127
    26c6:	57 e4       	ldi	r21, 0x47	; 71
    26c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26cc:	18 16       	cp	r1, r24
    26ce:	0c f0       	brlt	.+2      	; 0x26d2 <main+0xd7e>
    26d0:	43 c0       	rjmp	.+134    	; 0x2758 <main+0xe04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d2:	fe 01       	movw	r30, r28
    26d4:	ef 53       	subi	r30, 0x3F	; 63
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	60 81       	ld	r22, Z
    26da:	71 81       	ldd	r23, Z+1	; 0x01
    26dc:	82 81       	ldd	r24, Z+2	; 0x02
    26de:	93 81       	ldd	r25, Z+3	; 0x03
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e2       	ldi	r20, 0x20	; 32
    26e6:	51 e4       	ldi	r21, 0x41	; 65
    26e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	8e 01       	movw	r16, r28
    26f2:	05 54       	subi	r16, 0x45	; 69
    26f4:	1f 4f       	sbci	r17, 0xFF	; 255
    26f6:	bc 01       	movw	r22, r24
    26f8:	cd 01       	movw	r24, r26
    26fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	f8 01       	movw	r30, r16
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	80 83       	st	Z, r24
    2708:	1f c0       	rjmp	.+62     	; 0x2748 <main+0xdf4>
    270a:	fe 01       	movw	r30, r28
    270c:	e7 54       	subi	r30, 0x47	; 71
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	8c e2       	ldi	r24, 0x2C	; 44
    2712:	91 e0       	ldi	r25, 0x01	; 1
    2714:	91 83       	std	Z+1, r25	; 0x01
    2716:	80 83       	st	Z, r24
    2718:	fe 01       	movw	r30, r28
    271a:	e7 54       	subi	r30, 0x47	; 71
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	80 81       	ld	r24, Z
    2720:	91 81       	ldd	r25, Z+1	; 0x01
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <main+0xdce>
    2726:	fe 01       	movw	r30, r28
    2728:	e7 54       	subi	r30, 0x47	; 71
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	91 83       	std	Z+1, r25	; 0x01
    272e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2730:	de 01       	movw	r26, r28
    2732:	a5 54       	subi	r26, 0x45	; 69
    2734:	bf 4f       	sbci	r27, 0xFF	; 255
    2736:	fe 01       	movw	r30, r28
    2738:	e5 54       	subi	r30, 0x45	; 69
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	80 81       	ld	r24, Z
    273e:	91 81       	ldd	r25, Z+1	; 0x01
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	11 96       	adiw	r26, 0x01	; 1
    2744:	9c 93       	st	X, r25
    2746:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2748:	fe 01       	movw	r30, r28
    274a:	e5 54       	subi	r30, 0x45	; 69
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	80 81       	ld	r24, Z
    2750:	91 81       	ldd	r25, Z+1	; 0x01
    2752:	00 97       	sbiw	r24, 0x00	; 0
    2754:	d1 f6       	brne	.-76     	; 0x270a <main+0xdb6>
    2756:	27 c0       	rjmp	.+78     	; 0x27a6 <main+0xe52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2758:	8e 01       	movw	r16, r28
    275a:	05 54       	subi	r16, 0x45	; 69
    275c:	1f 4f       	sbci	r17, 0xFF	; 255
    275e:	fe 01       	movw	r30, r28
    2760:	e3 54       	subi	r30, 0x43	; 67
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	60 81       	ld	r22, Z
    2766:	71 81       	ldd	r23, Z+1	; 0x01
    2768:	82 81       	ldd	r24, Z+2	; 0x02
    276a:	93 81       	ldd	r25, Z+3	; 0x03
    276c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	f8 01       	movw	r30, r16
    2776:	91 83       	std	Z+1, r25	; 0x01
    2778:	80 83       	st	Z, r24
    277a:	de 01       	movw	r26, r28
    277c:	a9 54       	subi	r26, 0x49	; 73
    277e:	bf 4f       	sbci	r27, 0xFF	; 255
    2780:	fe 01       	movw	r30, r28
    2782:	e5 54       	subi	r30, 0x45	; 69
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	80 81       	ld	r24, Z
    2788:	91 81       	ldd	r25, Z+1	; 0x01
    278a:	8d 93       	st	X+, r24
    278c:	9c 93       	st	X, r25
    278e:	fe 01       	movw	r30, r28
    2790:	e9 54       	subi	r30, 0x49	; 73
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	80 81       	ld	r24, Z
    2796:	91 81       	ldd	r25, Z+1	; 0x01
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <main+0xe44>
    279c:	fe 01       	movw	r30, r28
    279e:	e9 54       	subi	r30, 0x49	; 73
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	91 83       	std	Z+1, r25	; 0x01
    27a4:	80 83       	st	Z, r24

	_delay_ms(1000);
	CLCD_VoidReset_Display();
    27a6:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_VoidReset_Display>
//	CLCD_VoidSendString("Look at them      MOVES!");
//	CLCD_VoidWriteSpecialChar(pattern0_standing,0,1,15);

//	_delay_ms(5000);
	CLCD_VoidReset_Display();
    27aa:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_VoidReset_Display>
	for(u8 i=0;i<8;i++)
    27ae:	fe 01       	movw	r30, r28
    27b0:	e3 5f       	subi	r30, 0xF3	; 243
    27b2:	fe 4f       	sbci	r31, 0xFE	; 254
    27b4:	10 82       	st	Z, r1
    27b6:	83 c1       	rjmp	.+774    	; 0x2abe <main+0x116a>
		{
			CLCD_VoidWriteSpecialChar(pattern1_dancing1,1,1,15);
    27b8:	ce 01       	movw	r24, r28
    27ba:	89 5e       	subi	r24, 0xE9	; 233
    27bc:	9e 4f       	sbci	r25, 0xFE	; 254
    27be:	61 e0       	ldi	r22, 0x01	; 1
    27c0:	41 e0       	ldi	r20, 0x01	; 1
    27c2:	2f e0       	ldi	r18, 0x0F	; 15
    27c4:	0e 94 bd 08 	call	0x117a	; 0x117a <CLCD_VoidWriteSpecialChar>
    27c8:	fe 01       	movw	r30, r28
    27ca:	ed 54       	subi	r30, 0x4D	; 77
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	aa ef       	ldi	r26, 0xFA	; 250
    27d4:	b3 e4       	ldi	r27, 0x43	; 67
    27d6:	80 83       	st	Z, r24
    27d8:	91 83       	std	Z+1, r25	; 0x01
    27da:	a2 83       	std	Z+2, r26	; 0x02
    27dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27de:	8e 01       	movw	r16, r28
    27e0:	01 55       	subi	r16, 0x51	; 81
    27e2:	1f 4f       	sbci	r17, 0xFF	; 255
    27e4:	fe 01       	movw	r30, r28
    27e6:	ed 54       	subi	r30, 0x4D	; 77
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	60 81       	ld	r22, Z
    27ec:	71 81       	ldd	r23, Z+1	; 0x01
    27ee:	82 81       	ldd	r24, Z+2	; 0x02
    27f0:	93 81       	ldd	r25, Z+3	; 0x03
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e8       	ldi	r19, 0x80	; 128
    27f6:	4b e3       	ldi	r20, 0x3B	; 59
    27f8:	55 e4       	ldi	r21, 0x45	; 69
    27fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	f8 01       	movw	r30, r16
    2804:	80 83       	st	Z, r24
    2806:	91 83       	std	Z+1, r25	; 0x01
    2808:	a2 83       	std	Z+2, r26	; 0x02
    280a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    280c:	fe 01       	movw	r30, r28
    280e:	e1 55       	subi	r30, 0x51	; 81
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	60 81       	ld	r22, Z
    2814:	71 81       	ldd	r23, Z+1	; 0x01
    2816:	82 81       	ldd	r24, Z+2	; 0x02
    2818:	93 81       	ldd	r25, Z+3	; 0x03
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e8       	ldi	r20, 0x80	; 128
    2820:	5f e3       	ldi	r21, 0x3F	; 63
    2822:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2826:	88 23       	and	r24, r24
    2828:	44 f4       	brge	.+16     	; 0x283a <main+0xee6>
		__ticks = 1;
    282a:	fe 01       	movw	r30, r28
    282c:	e3 55       	subi	r30, 0x53	; 83
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	91 83       	std	Z+1, r25	; 0x01
    2836:	80 83       	st	Z, r24
    2838:	64 c0       	rjmp	.+200    	; 0x2902 <main+0xfae>
	else if (__tmp > 65535)
    283a:	fe 01       	movw	r30, r28
    283c:	e1 55       	subi	r30, 0x51	; 81
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	60 81       	ld	r22, Z
    2842:	71 81       	ldd	r23, Z+1	; 0x01
    2844:	82 81       	ldd	r24, Z+2	; 0x02
    2846:	93 81       	ldd	r25, Z+3	; 0x03
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	3f ef       	ldi	r19, 0xFF	; 255
    284c:	4f e7       	ldi	r20, 0x7F	; 127
    284e:	57 e4       	ldi	r21, 0x47	; 71
    2850:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2854:	18 16       	cp	r1, r24
    2856:	0c f0       	brlt	.+2      	; 0x285a <main+0xf06>
    2858:	43 c0       	rjmp	.+134    	; 0x28e0 <main+0xf8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285a:	fe 01       	movw	r30, r28
    285c:	ed 54       	subi	r30, 0x4D	; 77
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	60 81       	ld	r22, Z
    2862:	71 81       	ldd	r23, Z+1	; 0x01
    2864:	82 81       	ldd	r24, Z+2	; 0x02
    2866:	93 81       	ldd	r25, Z+3	; 0x03
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	40 e2       	ldi	r20, 0x20	; 32
    286e:	51 e4       	ldi	r21, 0x41	; 65
    2870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	8e 01       	movw	r16, r28
    287a:	03 55       	subi	r16, 0x53	; 83
    287c:	1f 4f       	sbci	r17, 0xFF	; 255
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	f8 01       	movw	r30, r16
    288c:	91 83       	std	Z+1, r25	; 0x01
    288e:	80 83       	st	Z, r24
    2890:	1f c0       	rjmp	.+62     	; 0x28d0 <main+0xf7c>
    2892:	fe 01       	movw	r30, r28
    2894:	e5 55       	subi	r30, 0x55	; 85
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	8c e2       	ldi	r24, 0x2C	; 44
    289a:	91 e0       	ldi	r25, 0x01	; 1
    289c:	91 83       	std	Z+1, r25	; 0x01
    289e:	80 83       	st	Z, r24
    28a0:	fe 01       	movw	r30, r28
    28a2:	e5 55       	subi	r30, 0x55	; 85
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	80 81       	ld	r24, Z
    28a8:	91 81       	ldd	r25, Z+1	; 0x01
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	f1 f7       	brne	.-4      	; 0x28aa <main+0xf56>
    28ae:	fe 01       	movw	r30, r28
    28b0:	e5 55       	subi	r30, 0x55	; 85
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	91 83       	std	Z+1, r25	; 0x01
    28b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b8:	de 01       	movw	r26, r28
    28ba:	a3 55       	subi	r26, 0x53	; 83
    28bc:	bf 4f       	sbci	r27, 0xFF	; 255
    28be:	fe 01       	movw	r30, r28
    28c0:	e3 55       	subi	r30, 0x53	; 83
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	80 81       	ld	r24, Z
    28c6:	91 81       	ldd	r25, Z+1	; 0x01
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	11 96       	adiw	r26, 0x01	; 1
    28cc:	9c 93       	st	X, r25
    28ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d0:	fe 01       	movw	r30, r28
    28d2:	e3 55       	subi	r30, 0x53	; 83
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	80 81       	ld	r24, Z
    28d8:	91 81       	ldd	r25, Z+1	; 0x01
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	d1 f6       	brne	.-76     	; 0x2892 <main+0xf3e>
    28de:	27 c0       	rjmp	.+78     	; 0x292e <main+0xfda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e0:	8e 01       	movw	r16, r28
    28e2:	03 55       	subi	r16, 0x53	; 83
    28e4:	1f 4f       	sbci	r17, 0xFF	; 255
    28e6:	fe 01       	movw	r30, r28
    28e8:	e1 55       	subi	r30, 0x51	; 81
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	60 81       	ld	r22, Z
    28ee:	71 81       	ldd	r23, Z+1	; 0x01
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	f8 01       	movw	r30, r16
    28fe:	91 83       	std	Z+1, r25	; 0x01
    2900:	80 83       	st	Z, r24
    2902:	de 01       	movw	r26, r28
    2904:	a7 55       	subi	r26, 0x57	; 87
    2906:	bf 4f       	sbci	r27, 0xFF	; 255
    2908:	fe 01       	movw	r30, r28
    290a:	e3 55       	subi	r30, 0x53	; 83
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	80 81       	ld	r24, Z
    2910:	91 81       	ldd	r25, Z+1	; 0x01
    2912:	8d 93       	st	X+, r24
    2914:	9c 93       	st	X, r25
    2916:	fe 01       	movw	r30, r28
    2918:	e7 55       	subi	r30, 0x57	; 87
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	80 81       	ld	r24, Z
    291e:	91 81       	ldd	r25, Z+1	; 0x01
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <main+0xfcc>
    2924:	fe 01       	movw	r30, r28
    2926:	e7 55       	subi	r30, 0x57	; 87
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	91 83       	std	Z+1, r25	; 0x01
    292c:	80 83       	st	Z, r24
			_delay_ms(500);
			CLCD_VoidReset_Display();
    292e:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_VoidReset_Display>
			CLCD_VoidWriteSpecialChar(pattern0_standing,0,1,15);
    2932:	ce 01       	movw	r24, r28
    2934:	81 5f       	subi	r24, 0xF1	; 241
    2936:	9e 4f       	sbci	r25, 0xFE	; 254
    2938:	60 e0       	ldi	r22, 0x00	; 0
    293a:	41 e0       	ldi	r20, 0x01	; 1
    293c:	2f e0       	ldi	r18, 0x0F	; 15
    293e:	0e 94 bd 08 	call	0x117a	; 0x117a <CLCD_VoidWriteSpecialChar>
    2942:	fe 01       	movw	r30, r28
    2944:	eb 55       	subi	r30, 0x5B	; 91
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	aa ef       	ldi	r26, 0xFA	; 250
    294e:	b3 e4       	ldi	r27, 0x43	; 67
    2950:	80 83       	st	Z, r24
    2952:	91 83       	std	Z+1, r25	; 0x01
    2954:	a2 83       	std	Z+2, r26	; 0x02
    2956:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2958:	8e 01       	movw	r16, r28
    295a:	0f 55       	subi	r16, 0x5F	; 95
    295c:	1f 4f       	sbci	r17, 0xFF	; 255
    295e:	fe 01       	movw	r30, r28
    2960:	eb 55       	subi	r30, 0x5B	; 91
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	60 81       	ld	r22, Z
    2966:	71 81       	ldd	r23, Z+1	; 0x01
    2968:	82 81       	ldd	r24, Z+2	; 0x02
    296a:	93 81       	ldd	r25, Z+3	; 0x03
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e8       	ldi	r19, 0x80	; 128
    2970:	4b e3       	ldi	r20, 0x3B	; 59
    2972:	55 e4       	ldi	r21, 0x45	; 69
    2974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	f8 01       	movw	r30, r16
    297e:	80 83       	st	Z, r24
    2980:	91 83       	std	Z+1, r25	; 0x01
    2982:	a2 83       	std	Z+2, r26	; 0x02
    2984:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2986:	fe 01       	movw	r30, r28
    2988:	ef 55       	subi	r30, 0x5F	; 95
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	60 81       	ld	r22, Z
    298e:	71 81       	ldd	r23, Z+1	; 0x01
    2990:	82 81       	ldd	r24, Z+2	; 0x02
    2992:	93 81       	ldd	r25, Z+3	; 0x03
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e8       	ldi	r20, 0x80	; 128
    299a:	5f e3       	ldi	r21, 0x3F	; 63
    299c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a0:	88 23       	and	r24, r24
    29a2:	44 f4       	brge	.+16     	; 0x29b4 <main+0x1060>
		__ticks = 1;
    29a4:	fe 01       	movw	r30, r28
    29a6:	e1 56       	subi	r30, 0x61	; 97
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	80 83       	st	Z, r24
    29b2:	64 c0       	rjmp	.+200    	; 0x2a7c <main+0x1128>
	else if (__tmp > 65535)
    29b4:	fe 01       	movw	r30, r28
    29b6:	ef 55       	subi	r30, 0x5F	; 95
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	60 81       	ld	r22, Z
    29bc:	71 81       	ldd	r23, Z+1	; 0x01
    29be:	82 81       	ldd	r24, Z+2	; 0x02
    29c0:	93 81       	ldd	r25, Z+3	; 0x03
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	3f ef       	ldi	r19, 0xFF	; 255
    29c6:	4f e7       	ldi	r20, 0x7F	; 127
    29c8:	57 e4       	ldi	r21, 0x47	; 71
    29ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ce:	18 16       	cp	r1, r24
    29d0:	0c f0       	brlt	.+2      	; 0x29d4 <main+0x1080>
    29d2:	43 c0       	rjmp	.+134    	; 0x2a5a <main+0x1106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d4:	fe 01       	movw	r30, r28
    29d6:	eb 55       	subi	r30, 0x5B	; 91
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	60 81       	ld	r22, Z
    29dc:	71 81       	ldd	r23, Z+1	; 0x01
    29de:	82 81       	ldd	r24, Z+2	; 0x02
    29e0:	93 81       	ldd	r25, Z+3	; 0x03
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e2       	ldi	r20, 0x20	; 32
    29e8:	51 e4       	ldi	r21, 0x41	; 65
    29ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	8e 01       	movw	r16, r28
    29f4:	01 56       	subi	r16, 0x61	; 97
    29f6:	1f 4f       	sbci	r17, 0xFF	; 255
    29f8:	bc 01       	movw	r22, r24
    29fa:	cd 01       	movw	r24, r26
    29fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	f8 01       	movw	r30, r16
    2a06:	91 83       	std	Z+1, r25	; 0x01
    2a08:	80 83       	st	Z, r24
    2a0a:	1f c0       	rjmp	.+62     	; 0x2a4a <main+0x10f6>
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	e3 56       	subi	r30, 0x63	; 99
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	8c e2       	ldi	r24, 0x2C	; 44
    2a14:	91 e0       	ldi	r25, 0x01	; 1
    2a16:	91 83       	std	Z+1, r25	; 0x01
    2a18:	80 83       	st	Z, r24
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e3 56       	subi	r30, 0x63	; 99
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	80 81       	ld	r24, Z
    2a22:	91 81       	ldd	r25, Z+1	; 0x01
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <main+0x10d0>
    2a28:	fe 01       	movw	r30, r28
    2a2a:	e3 56       	subi	r30, 0x63	; 99
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	91 83       	std	Z+1, r25	; 0x01
    2a30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a32:	de 01       	movw	r26, r28
    2a34:	a1 56       	subi	r26, 0x61	; 97
    2a36:	bf 4f       	sbci	r27, 0xFF	; 255
    2a38:	fe 01       	movw	r30, r28
    2a3a:	e1 56       	subi	r30, 0x61	; 97
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	80 81       	ld	r24, Z
    2a40:	91 81       	ldd	r25, Z+1	; 0x01
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	11 96       	adiw	r26, 0x01	; 1
    2a46:	9c 93       	st	X, r25
    2a48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	e1 56       	subi	r30, 0x61	; 97
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	80 81       	ld	r24, Z
    2a52:	91 81       	ldd	r25, Z+1	; 0x01
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	d1 f6       	brne	.-76     	; 0x2a0c <main+0x10b8>
    2a58:	27 c0       	rjmp	.+78     	; 0x2aa8 <main+0x1154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5a:	8e 01       	movw	r16, r28
    2a5c:	01 56       	subi	r16, 0x61	; 97
    2a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a60:	fe 01       	movw	r30, r28
    2a62:	ef 55       	subi	r30, 0x5F	; 95
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	60 81       	ld	r22, Z
    2a68:	71 81       	ldd	r23, Z+1	; 0x01
    2a6a:	82 81       	ldd	r24, Z+2	; 0x02
    2a6c:	93 81       	ldd	r25, Z+3	; 0x03
    2a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	f8 01       	movw	r30, r16
    2a78:	91 83       	std	Z+1, r25	; 0x01
    2a7a:	80 83       	st	Z, r24
    2a7c:	de 01       	movw	r26, r28
    2a7e:	a5 56       	subi	r26, 0x65	; 101
    2a80:	bf 4f       	sbci	r27, 0xFF	; 255
    2a82:	fe 01       	movw	r30, r28
    2a84:	e1 56       	subi	r30, 0x61	; 97
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 81       	ld	r24, Z
    2a8a:	91 81       	ldd	r25, Z+1	; 0x01
    2a8c:	8d 93       	st	X+, r24
    2a8e:	9c 93       	st	X, r25
    2a90:	fe 01       	movw	r30, r28
    2a92:	e5 56       	subi	r30, 0x65	; 101
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	80 81       	ld	r24, Z
    2a98:	91 81       	ldd	r25, Z+1	; 0x01
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <main+0x1146>
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	e5 56       	subi	r30, 0x65	; 101
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	80 83       	st	Z, r24
			_delay_ms(500);
			CLCD_VoidReset_Display();
    2aa8:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_VoidReset_Display>
//	CLCD_VoidSendString("Look at them      MOVES!");
//	CLCD_VoidWriteSpecialChar(pattern0_standing,0,1,15);

//	_delay_ms(5000);
	CLCD_VoidReset_Display();
	for(u8 i=0;i<8;i++)
    2aac:	de 01       	movw	r26, r28
    2aae:	a3 5f       	subi	r26, 0xF3	; 243
    2ab0:	be 4f       	sbci	r27, 0xFE	; 254
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	e3 5f       	subi	r30, 0xF3	; 243
    2ab6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab8:	80 81       	ld	r24, Z
    2aba:	8f 5f       	subi	r24, 0xFF	; 255
    2abc:	8c 93       	st	X, r24
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e3 5f       	subi	r30, 0xF3	; 243
    2ac2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac4:	80 81       	ld	r24, Z
    2ac6:	88 30       	cpi	r24, 0x08	; 8
    2ac8:	08 f4       	brcc	.+2      	; 0x2acc <main+0x1178>
    2aca:	76 ce       	rjmp	.-788    	; 0x27b8 <main+0xe64>
			_delay_ms(500);
			CLCD_VoidReset_Display();
		}
	//playing football

	CLCD_VoidGoToXY(0,0);
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	60 e0       	ldi	r22, 0x00	; 0
    2ad0:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_VoidGoToXY>
	CLCD_VoidSendString("and certainly   unlike you");
    2ad4:	89 ea       	ldi	r24, 0xA9	; 169
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CLCD_VoidSendString>
    2adc:	fe 01       	movw	r30, r28
    2ade:	e9 56       	subi	r30, 0x69	; 105
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	90 e4       	ldi	r25, 0x40	; 64
    2ae6:	ac e9       	ldi	r26, 0x9C	; 156
    2ae8:	b5 e4       	ldi	r27, 0x45	; 69
    2aea:	80 83       	st	Z, r24
    2aec:	91 83       	std	Z+1, r25	; 0x01
    2aee:	a2 83       	std	Z+2, r26	; 0x02
    2af0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af2:	8e 01       	movw	r16, r28
    2af4:	0d 56       	subi	r16, 0x6D	; 109
    2af6:	1f 4f       	sbci	r17, 0xFF	; 255
    2af8:	fe 01       	movw	r30, r28
    2afa:	e9 56       	subi	r30, 0x69	; 105
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	60 81       	ld	r22, Z
    2b00:	71 81       	ldd	r23, Z+1	; 0x01
    2b02:	82 81       	ldd	r24, Z+2	; 0x02
    2b04:	93 81       	ldd	r25, Z+3	; 0x03
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e8       	ldi	r19, 0x80	; 128
    2b0a:	4b e3       	ldi	r20, 0x3B	; 59
    2b0c:	55 e4       	ldi	r21, 0x45	; 69
    2b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	f8 01       	movw	r30, r16
    2b18:	80 83       	st	Z, r24
    2b1a:	91 83       	std	Z+1, r25	; 0x01
    2b1c:	a2 83       	std	Z+2, r26	; 0x02
    2b1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b20:	fe 01       	movw	r30, r28
    2b22:	ed 56       	subi	r30, 0x6D	; 109
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	60 81       	ld	r22, Z
    2b28:	71 81       	ldd	r23, Z+1	; 0x01
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	93 81       	ldd	r25, Z+3	; 0x03
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e8       	ldi	r20, 0x80	; 128
    2b34:	5f e3       	ldi	r21, 0x3F	; 63
    2b36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b3a:	88 23       	and	r24, r24
    2b3c:	44 f4       	brge	.+16     	; 0x2b4e <main+0x11fa>
		__ticks = 1;
    2b3e:	fe 01       	movw	r30, r28
    2b40:	ef 56       	subi	r30, 0x6F	; 111
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
    2b4c:	64 c0       	rjmp	.+200    	; 0x2c16 <main+0x12c2>
	else if (__tmp > 65535)
    2b4e:	fe 01       	movw	r30, r28
    2b50:	ed 56       	subi	r30, 0x6D	; 109
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	60 81       	ld	r22, Z
    2b56:	71 81       	ldd	r23, Z+1	; 0x01
    2b58:	82 81       	ldd	r24, Z+2	; 0x02
    2b5a:	93 81       	ldd	r25, Z+3	; 0x03
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	3f ef       	ldi	r19, 0xFF	; 255
    2b60:	4f e7       	ldi	r20, 0x7F	; 127
    2b62:	57 e4       	ldi	r21, 0x47	; 71
    2b64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b68:	18 16       	cp	r1, r24
    2b6a:	0c f0       	brlt	.+2      	; 0x2b6e <main+0x121a>
    2b6c:	43 c0       	rjmp	.+134    	; 0x2bf4 <main+0x12a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e9 56       	subi	r30, 0x69	; 105
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	60 81       	ld	r22, Z
    2b76:	71 81       	ldd	r23, Z+1	; 0x01
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
    2b7a:	93 81       	ldd	r25, Z+3	; 0x03
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e2       	ldi	r20, 0x20	; 32
    2b82:	51 e4       	ldi	r21, 0x41	; 65
    2b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	8e 01       	movw	r16, r28
    2b8e:	0f 56       	subi	r16, 0x6F	; 111
    2b90:	1f 4f       	sbci	r17, 0xFF	; 255
    2b92:	bc 01       	movw	r22, r24
    2b94:	cd 01       	movw	r24, r26
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	f8 01       	movw	r30, r16
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
    2ba4:	1f c0       	rjmp	.+62     	; 0x2be4 <main+0x1290>
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	e1 57       	subi	r30, 0x71	; 113
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	8c e2       	ldi	r24, 0x2C	; 44
    2bae:	91 e0       	ldi	r25, 0x01	; 1
    2bb0:	91 83       	std	Z+1, r25	; 0x01
    2bb2:	80 83       	st	Z, r24
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	e1 57       	subi	r30, 0x71	; 113
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	80 81       	ld	r24, Z
    2bbc:	91 81       	ldd	r25, Z+1	; 0x01
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	f1 f7       	brne	.-4      	; 0x2bbe <main+0x126a>
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e1 57       	subi	r30, 0x71	; 113
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	91 83       	std	Z+1, r25	; 0x01
    2bca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bcc:	de 01       	movw	r26, r28
    2bce:	af 56       	subi	r26, 0x6F	; 111
    2bd0:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	ef 56       	subi	r30, 0x6F	; 111
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	80 81       	ld	r24, Z
    2bda:	91 81       	ldd	r25, Z+1	; 0x01
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	11 96       	adiw	r26, 0x01	; 1
    2be0:	9c 93       	st	X, r25
    2be2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be4:	fe 01       	movw	r30, r28
    2be6:	ef 56       	subi	r30, 0x6F	; 111
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	80 81       	ld	r24, Z
    2bec:	91 81       	ldd	r25, Z+1	; 0x01
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	d1 f6       	brne	.-76     	; 0x2ba6 <main+0x1252>
    2bf2:	27 c0       	rjmp	.+78     	; 0x2c42 <main+0x12ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf4:	8e 01       	movw	r16, r28
    2bf6:	0f 56       	subi	r16, 0x6F	; 111
    2bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	ed 56       	subi	r30, 0x6D	; 109
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	60 81       	ld	r22, Z
    2c02:	71 81       	ldd	r23, Z+1	; 0x01
    2c04:	82 81       	ldd	r24, Z+2	; 0x02
    2c06:	93 81       	ldd	r25, Z+3	; 0x03
    2c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	f8 01       	movw	r30, r16
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	80 83       	st	Z, r24
    2c16:	de 01       	movw	r26, r28
    2c18:	a3 57       	subi	r26, 0x73	; 115
    2c1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	ef 56       	subi	r30, 0x6F	; 111
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	80 81       	ld	r24, Z
    2c24:	91 81       	ldd	r25, Z+1	; 0x01
    2c26:	8d 93       	st	X+, r24
    2c28:	9c 93       	st	X, r25
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e3 57       	subi	r30, 0x73	; 115
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 81       	ld	r24, Z
    2c32:	91 81       	ldd	r25, Z+1	; 0x01
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <main+0x12e0>
    2c38:	fe 01       	movw	r30, r28
    2c3a:	e3 57       	subi	r30, 0x73	; 115
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	91 83       	std	Z+1, r25	; 0x01
    2c40:	80 83       	st	Z, r24
	_delay_ms(5000);
	CLCD_VoidReset_Display();
    2c42:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_VoidReset_Display>
	CLCD_VoidGoToXY(0,0);
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	60 e0       	ldi	r22, 0x00	; 0
    2c4a:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_VoidGoToXY>
		CLCD_VoidSendString("I can play      football");
    2c4e:	84 ec       	ldi	r24, 0xC4	; 196
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CLCD_VoidSendString>
    2c56:	fe 01       	movw	r30, r28
    2c58:	e7 57       	subi	r30, 0x77	; 119
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	90 e4       	ldi	r25, 0x40	; 64
    2c60:	ac e9       	ldi	r26, 0x9C	; 156
    2c62:	b5 e4       	ldi	r27, 0x45	; 69
    2c64:	80 83       	st	Z, r24
    2c66:	91 83       	std	Z+1, r25	; 0x01
    2c68:	a2 83       	std	Z+2, r26	; 0x02
    2c6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6c:	8e 01       	movw	r16, r28
    2c6e:	0b 57       	subi	r16, 0x7B	; 123
    2c70:	1f 4f       	sbci	r17, 0xFF	; 255
    2c72:	fe 01       	movw	r30, r28
    2c74:	e7 57       	subi	r30, 0x77	; 119
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	60 81       	ld	r22, Z
    2c7a:	71 81       	ldd	r23, Z+1	; 0x01
    2c7c:	82 81       	ldd	r24, Z+2	; 0x02
    2c7e:	93 81       	ldd	r25, Z+3	; 0x03
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e8       	ldi	r19, 0x80	; 128
    2c84:	4b e3       	ldi	r20, 0x3B	; 59
    2c86:	55 e4       	ldi	r21, 0x45	; 69
    2c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	f8 01       	movw	r30, r16
    2c92:	80 83       	st	Z, r24
    2c94:	91 83       	std	Z+1, r25	; 0x01
    2c96:	a2 83       	std	Z+2, r26	; 0x02
    2c98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	eb 57       	subi	r30, 0x7B	; 123
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	60 81       	ld	r22, Z
    2ca2:	71 81       	ldd	r23, Z+1	; 0x01
    2ca4:	82 81       	ldd	r24, Z+2	; 0x02
    2ca6:	93 81       	ldd	r25, Z+3	; 0x03
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e8       	ldi	r20, 0x80	; 128
    2cae:	5f e3       	ldi	r21, 0x3F	; 63
    2cb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cb4:	88 23       	and	r24, r24
    2cb6:	44 f4       	brge	.+16     	; 0x2cc8 <main+0x1374>
		__ticks = 1;
    2cb8:	fe 01       	movw	r30, r28
    2cba:	ed 57       	subi	r30, 0x7D	; 125
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	91 83       	std	Z+1, r25	; 0x01
    2cc4:	80 83       	st	Z, r24
    2cc6:	64 c0       	rjmp	.+200    	; 0x2d90 <main+0x143c>
	else if (__tmp > 65535)
    2cc8:	fe 01       	movw	r30, r28
    2cca:	eb 57       	subi	r30, 0x7B	; 123
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	60 81       	ld	r22, Z
    2cd0:	71 81       	ldd	r23, Z+1	; 0x01
    2cd2:	82 81       	ldd	r24, Z+2	; 0x02
    2cd4:	93 81       	ldd	r25, Z+3	; 0x03
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	3f ef       	ldi	r19, 0xFF	; 255
    2cda:	4f e7       	ldi	r20, 0x7F	; 127
    2cdc:	57 e4       	ldi	r21, 0x47	; 71
    2cde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ce2:	18 16       	cp	r1, r24
    2ce4:	0c f0       	brlt	.+2      	; 0x2ce8 <main+0x1394>
    2ce6:	43 c0       	rjmp	.+134    	; 0x2d6e <main+0x141a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce8:	fe 01       	movw	r30, r28
    2cea:	e7 57       	subi	r30, 0x77	; 119
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	60 81       	ld	r22, Z
    2cf0:	71 81       	ldd	r23, Z+1	; 0x01
    2cf2:	82 81       	ldd	r24, Z+2	; 0x02
    2cf4:	93 81       	ldd	r25, Z+3	; 0x03
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	40 e2       	ldi	r20, 0x20	; 32
    2cfc:	51 e4       	ldi	r21, 0x41	; 65
    2cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	8e 01       	movw	r16, r28
    2d08:	0d 57       	subi	r16, 0x7D	; 125
    2d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d0c:	bc 01       	movw	r22, r24
    2d0e:	cd 01       	movw	r24, r26
    2d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	f8 01       	movw	r30, r16
    2d1a:	91 83       	std	Z+1, r25	; 0x01
    2d1c:	80 83       	st	Z, r24
    2d1e:	1f c0       	rjmp	.+62     	; 0x2d5e <main+0x140a>
    2d20:	fe 01       	movw	r30, r28
    2d22:	ef 57       	subi	r30, 0x7F	; 127
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	8c e2       	ldi	r24, 0x2C	; 44
    2d28:	91 e0       	ldi	r25, 0x01	; 1
    2d2a:	91 83       	std	Z+1, r25	; 0x01
    2d2c:	80 83       	st	Z, r24
    2d2e:	fe 01       	movw	r30, r28
    2d30:	ef 57       	subi	r30, 0x7F	; 127
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	80 81       	ld	r24, Z
    2d36:	91 81       	ldd	r25, Z+1	; 0x01
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	f1 f7       	brne	.-4      	; 0x2d38 <main+0x13e4>
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	ef 57       	subi	r30, 0x7F	; 127
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	91 83       	std	Z+1, r25	; 0x01
    2d44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d46:	de 01       	movw	r26, r28
    2d48:	ad 57       	subi	r26, 0x7D	; 125
    2d4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	ed 57       	subi	r30, 0x7D	; 125
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	80 81       	ld	r24, Z
    2d54:	91 81       	ldd	r25, Z+1	; 0x01
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	11 96       	adiw	r26, 0x01	; 1
    2d5a:	9c 93       	st	X, r25
    2d5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5e:	fe 01       	movw	r30, r28
    2d60:	ed 57       	subi	r30, 0x7D	; 125
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	80 81       	ld	r24, Z
    2d66:	91 81       	ldd	r25, Z+1	; 0x01
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	d1 f6       	brne	.-76     	; 0x2d20 <main+0x13cc>
    2d6c:	27 c0       	rjmp	.+78     	; 0x2dbc <main+0x1468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d6e:	8e 01       	movw	r16, r28
    2d70:	0d 57       	subi	r16, 0x7D	; 125
    2d72:	1f 4f       	sbci	r17, 0xFF	; 255
    2d74:	fe 01       	movw	r30, r28
    2d76:	eb 57       	subi	r30, 0x7B	; 123
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	60 81       	ld	r22, Z
    2d7c:	71 81       	ldd	r23, Z+1	; 0x01
    2d7e:	82 81       	ldd	r24, Z+2	; 0x02
    2d80:	93 81       	ldd	r25, Z+3	; 0x03
    2d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	f8 01       	movw	r30, r16
    2d8c:	91 83       	std	Z+1, r25	; 0x01
    2d8e:	80 83       	st	Z, r24
    2d90:	de 01       	movw	r26, r28
    2d92:	a1 58       	subi	r26, 0x81	; 129
    2d94:	bf 4f       	sbci	r27, 0xFF	; 255
    2d96:	fe 01       	movw	r30, r28
    2d98:	ed 57       	subi	r30, 0x7D	; 125
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	80 81       	ld	r24, Z
    2d9e:	91 81       	ldd	r25, Z+1	; 0x01
    2da0:	8d 93       	st	X+, r24
    2da2:	9c 93       	st	X, r25
    2da4:	fe 01       	movw	r30, r28
    2da6:	e1 58       	subi	r30, 0x81	; 129
    2da8:	ff 4f       	sbci	r31, 0xFF	; 255
    2daa:	80 81       	ld	r24, Z
    2dac:	91 81       	ldd	r25, Z+1	; 0x01
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	f1 f7       	brne	.-4      	; 0x2dae <main+0x145a>
    2db2:	fe 01       	movw	r30, r28
    2db4:	e1 58       	subi	r30, 0x81	; 129
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	91 83       	std	Z+1, r25	; 0x01
    2dba:	80 83       	st	Z, r24
		_delay_ms(5000);
		CLCD_VoidReset_Display();
    2dbc:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_VoidReset_Display>
	for(u8 i=0;i<8;i++)
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	e4 5f       	subi	r30, 0xF4	; 244
    2dc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc6:	10 82       	st	Z, r1
    2dc8:	83 c1       	rjmp	.+774    	; 0x30d0 <main+0x177c>
			{
				CLCD_VoidWriteSpecialChar(pattern6_football1,3,1,15);
    2dca:	ce 01       	movw	r24, r28
    2dcc:	81 5c       	subi	r24, 0xC1	; 193
    2dce:	9e 4f       	sbci	r25, 0xFE	; 254
    2dd0:	63 e0       	ldi	r22, 0x03	; 3
    2dd2:	41 e0       	ldi	r20, 0x01	; 1
    2dd4:	2f e0       	ldi	r18, 0x0F	; 15
    2dd6:	0e 94 bd 08 	call	0x117a	; 0x117a <CLCD_VoidWriteSpecialChar>
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e5 58       	subi	r30, 0x85	; 133
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	aa ef       	ldi	r26, 0xFA	; 250
    2de6:	b3 e4       	ldi	r27, 0x43	; 67
    2de8:	80 83       	st	Z, r24
    2dea:	91 83       	std	Z+1, r25	; 0x01
    2dec:	a2 83       	std	Z+2, r26	; 0x02
    2dee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df0:	8e 01       	movw	r16, r28
    2df2:	09 58       	subi	r16, 0x89	; 137
    2df4:	1f 4f       	sbci	r17, 0xFF	; 255
    2df6:	fe 01       	movw	r30, r28
    2df8:	e5 58       	subi	r30, 0x85	; 133
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	60 81       	ld	r22, Z
    2dfe:	71 81       	ldd	r23, Z+1	; 0x01
    2e00:	82 81       	ldd	r24, Z+2	; 0x02
    2e02:	93 81       	ldd	r25, Z+3	; 0x03
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e8       	ldi	r19, 0x80	; 128
    2e08:	4b e3       	ldi	r20, 0x3B	; 59
    2e0a:	55 e4       	ldi	r21, 0x45	; 69
    2e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	f8 01       	movw	r30, r16
    2e16:	80 83       	st	Z, r24
    2e18:	91 83       	std	Z+1, r25	; 0x01
    2e1a:	a2 83       	std	Z+2, r26	; 0x02
    2e1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e1e:	fe 01       	movw	r30, r28
    2e20:	e9 58       	subi	r30, 0x89	; 137
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	60 81       	ld	r22, Z
    2e26:	71 81       	ldd	r23, Z+1	; 0x01
    2e28:	82 81       	ldd	r24, Z+2	; 0x02
    2e2a:	93 81       	ldd	r25, Z+3	; 0x03
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e8       	ldi	r20, 0x80	; 128
    2e32:	5f e3       	ldi	r21, 0x3F	; 63
    2e34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e38:	88 23       	and	r24, r24
    2e3a:	44 f4       	brge	.+16     	; 0x2e4c <main+0x14f8>
		__ticks = 1;
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	eb 58       	subi	r30, 0x8B	; 139
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	91 83       	std	Z+1, r25	; 0x01
    2e48:	80 83       	st	Z, r24
    2e4a:	64 c0       	rjmp	.+200    	; 0x2f14 <main+0x15c0>
	else if (__tmp > 65535)
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e9 58       	subi	r30, 0x89	; 137
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	60 81       	ld	r22, Z
    2e54:	71 81       	ldd	r23, Z+1	; 0x01
    2e56:	82 81       	ldd	r24, Z+2	; 0x02
    2e58:	93 81       	ldd	r25, Z+3	; 0x03
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	3f ef       	ldi	r19, 0xFF	; 255
    2e5e:	4f e7       	ldi	r20, 0x7F	; 127
    2e60:	57 e4       	ldi	r21, 0x47	; 71
    2e62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e66:	18 16       	cp	r1, r24
    2e68:	0c f0       	brlt	.+2      	; 0x2e6c <main+0x1518>
    2e6a:	43 c0       	rjmp	.+134    	; 0x2ef2 <main+0x159e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	e5 58       	subi	r30, 0x85	; 133
    2e70:	ff 4f       	sbci	r31, 0xFF	; 255
    2e72:	60 81       	ld	r22, Z
    2e74:	71 81       	ldd	r23, Z+1	; 0x01
    2e76:	82 81       	ldd	r24, Z+2	; 0x02
    2e78:	93 81       	ldd	r25, Z+3	; 0x03
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e2       	ldi	r20, 0x20	; 32
    2e80:	51 e4       	ldi	r21, 0x41	; 65
    2e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	8e 01       	movw	r16, r28
    2e8c:	0b 58       	subi	r16, 0x8B	; 139
    2e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e90:	bc 01       	movw	r22, r24
    2e92:	cd 01       	movw	r24, r26
    2e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	f8 01       	movw	r30, r16
    2e9e:	91 83       	std	Z+1, r25	; 0x01
    2ea0:	80 83       	st	Z, r24
    2ea2:	1f c0       	rjmp	.+62     	; 0x2ee2 <main+0x158e>
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	ed 58       	subi	r30, 0x8D	; 141
    2ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eaa:	8c e2       	ldi	r24, 0x2C	; 44
    2eac:	91 e0       	ldi	r25, 0x01	; 1
    2eae:	91 83       	std	Z+1, r25	; 0x01
    2eb0:	80 83       	st	Z, r24
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	ed 58       	subi	r30, 0x8D	; 141
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	80 81       	ld	r24, Z
    2eba:	91 81       	ldd	r25, Z+1	; 0x01
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <main+0x1568>
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	ed 58       	subi	r30, 0x8D	; 141
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	91 83       	std	Z+1, r25	; 0x01
    2ec8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eca:	de 01       	movw	r26, r28
    2ecc:	ab 58       	subi	r26, 0x8B	; 139
    2ece:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	eb 58       	subi	r30, 0x8B	; 139
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	80 81       	ld	r24, Z
    2ed8:	91 81       	ldd	r25, Z+1	; 0x01
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	11 96       	adiw	r26, 0x01	; 1
    2ede:	9c 93       	st	X, r25
    2ee0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	eb 58       	subi	r30, 0x8B	; 139
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	80 81       	ld	r24, Z
    2eea:	91 81       	ldd	r25, Z+1	; 0x01
    2eec:	00 97       	sbiw	r24, 0x00	; 0
    2eee:	d1 f6       	brne	.-76     	; 0x2ea4 <main+0x1550>
    2ef0:	27 c0       	rjmp	.+78     	; 0x2f40 <main+0x15ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef2:	8e 01       	movw	r16, r28
    2ef4:	0b 58       	subi	r16, 0x8B	; 139
    2ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef8:	fe 01       	movw	r30, r28
    2efa:	e9 58       	subi	r30, 0x89	; 137
    2efc:	ff 4f       	sbci	r31, 0xFF	; 255
    2efe:	60 81       	ld	r22, Z
    2f00:	71 81       	ldd	r23, Z+1	; 0x01
    2f02:	82 81       	ldd	r24, Z+2	; 0x02
    2f04:	93 81       	ldd	r25, Z+3	; 0x03
    2f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	f8 01       	movw	r30, r16
    2f10:	91 83       	std	Z+1, r25	; 0x01
    2f12:	80 83       	st	Z, r24
    2f14:	de 01       	movw	r26, r28
    2f16:	af 58       	subi	r26, 0x8F	; 143
    2f18:	bf 4f       	sbci	r27, 0xFF	; 255
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	eb 58       	subi	r30, 0x8B	; 139
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	80 81       	ld	r24, Z
    2f22:	91 81       	ldd	r25, Z+1	; 0x01
    2f24:	8d 93       	st	X+, r24
    2f26:	9c 93       	st	X, r25
    2f28:	fe 01       	movw	r30, r28
    2f2a:	ef 58       	subi	r30, 0x8F	; 143
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	80 81       	ld	r24, Z
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	f1 f7       	brne	.-4      	; 0x2f32 <main+0x15de>
    2f36:	fe 01       	movw	r30, r28
    2f38:	ef 58       	subi	r30, 0x8F	; 143
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	91 83       	std	Z+1, r25	; 0x01
    2f3e:	80 83       	st	Z, r24
				_delay_ms(500);
				CLCD_VoidReset_Display();
    2f40:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_VoidReset_Display>
				CLCD_VoidWriteSpecialChar(pattern7_football2,4,1,15);
    2f44:	ce 01       	movw	r24, r28
    2f46:	89 5b       	subi	r24, 0xB9	; 185
    2f48:	9e 4f       	sbci	r25, 0xFE	; 254
    2f4a:	64 e0       	ldi	r22, 0x04	; 4
    2f4c:	41 e0       	ldi	r20, 0x01	; 1
    2f4e:	2f e0       	ldi	r18, 0x0F	; 15
    2f50:	0e 94 bd 08 	call	0x117a	; 0x117a <CLCD_VoidWriteSpecialChar>
    2f54:	fe 01       	movw	r30, r28
    2f56:	e3 59       	subi	r30, 0x93	; 147
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	aa ef       	ldi	r26, 0xFA	; 250
    2f60:	b3 e4       	ldi	r27, 0x43	; 67
    2f62:	80 83       	st	Z, r24
    2f64:	91 83       	std	Z+1, r25	; 0x01
    2f66:	a2 83       	std	Z+2, r26	; 0x02
    2f68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f6a:	8e 01       	movw	r16, r28
    2f6c:	07 59       	subi	r16, 0x97	; 151
    2f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f70:	fe 01       	movw	r30, r28
    2f72:	e3 59       	subi	r30, 0x93	; 147
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	60 81       	ld	r22, Z
    2f78:	71 81       	ldd	r23, Z+1	; 0x01
    2f7a:	82 81       	ldd	r24, Z+2	; 0x02
    2f7c:	93 81       	ldd	r25, Z+3	; 0x03
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e8       	ldi	r19, 0x80	; 128
    2f82:	4b e3       	ldi	r20, 0x3B	; 59
    2f84:	55 e4       	ldi	r21, 0x45	; 69
    2f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	f8 01       	movw	r30, r16
    2f90:	80 83       	st	Z, r24
    2f92:	91 83       	std	Z+1, r25	; 0x01
    2f94:	a2 83       	std	Z+2, r26	; 0x02
    2f96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f98:	fe 01       	movw	r30, r28
    2f9a:	e7 59       	subi	r30, 0x97	; 151
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	60 81       	ld	r22, Z
    2fa0:	71 81       	ldd	r23, Z+1	; 0x01
    2fa2:	82 81       	ldd	r24, Z+2	; 0x02
    2fa4:	93 81       	ldd	r25, Z+3	; 0x03
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	40 e8       	ldi	r20, 0x80	; 128
    2fac:	5f e3       	ldi	r21, 0x3F	; 63
    2fae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fb2:	88 23       	and	r24, r24
    2fb4:	44 f4       	brge	.+16     	; 0x2fc6 <main+0x1672>
		__ticks = 1;
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	e9 59       	subi	r30, 0x99	; 153
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	91 83       	std	Z+1, r25	; 0x01
    2fc2:	80 83       	st	Z, r24
    2fc4:	64 c0       	rjmp	.+200    	; 0x308e <main+0x173a>
	else if (__tmp > 65535)
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	e7 59       	subi	r30, 0x97	; 151
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	60 81       	ld	r22, Z
    2fce:	71 81       	ldd	r23, Z+1	; 0x01
    2fd0:	82 81       	ldd	r24, Z+2	; 0x02
    2fd2:	93 81       	ldd	r25, Z+3	; 0x03
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	3f ef       	ldi	r19, 0xFF	; 255
    2fd8:	4f e7       	ldi	r20, 0x7F	; 127
    2fda:	57 e4       	ldi	r21, 0x47	; 71
    2fdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fe0:	18 16       	cp	r1, r24
    2fe2:	0c f0       	brlt	.+2      	; 0x2fe6 <main+0x1692>
    2fe4:	43 c0       	rjmp	.+134    	; 0x306c <main+0x1718>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	e3 59       	subi	r30, 0x93	; 147
    2fea:	ff 4f       	sbci	r31, 0xFF	; 255
    2fec:	60 81       	ld	r22, Z
    2fee:	71 81       	ldd	r23, Z+1	; 0x01
    2ff0:	82 81       	ldd	r24, Z+2	; 0x02
    2ff2:	93 81       	ldd	r25, Z+3	; 0x03
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e2       	ldi	r20, 0x20	; 32
    2ffa:	51 e4       	ldi	r21, 0x41	; 65
    2ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	8e 01       	movw	r16, r28
    3006:	09 59       	subi	r16, 0x99	; 153
    3008:	1f 4f       	sbci	r17, 0xFF	; 255
    300a:	bc 01       	movw	r22, r24
    300c:	cd 01       	movw	r24, r26
    300e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	f8 01       	movw	r30, r16
    3018:	91 83       	std	Z+1, r25	; 0x01
    301a:	80 83       	st	Z, r24
    301c:	1f c0       	rjmp	.+62     	; 0x305c <main+0x1708>
    301e:	fe 01       	movw	r30, r28
    3020:	eb 59       	subi	r30, 0x9B	; 155
    3022:	ff 4f       	sbci	r31, 0xFF	; 255
    3024:	8c e2       	ldi	r24, 0x2C	; 44
    3026:	91 e0       	ldi	r25, 0x01	; 1
    3028:	91 83       	std	Z+1, r25	; 0x01
    302a:	80 83       	st	Z, r24
    302c:	fe 01       	movw	r30, r28
    302e:	eb 59       	subi	r30, 0x9B	; 155
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	80 81       	ld	r24, Z
    3034:	91 81       	ldd	r25, Z+1	; 0x01
    3036:	01 97       	sbiw	r24, 0x01	; 1
    3038:	f1 f7       	brne	.-4      	; 0x3036 <main+0x16e2>
    303a:	fe 01       	movw	r30, r28
    303c:	eb 59       	subi	r30, 0x9B	; 155
    303e:	ff 4f       	sbci	r31, 0xFF	; 255
    3040:	91 83       	std	Z+1, r25	; 0x01
    3042:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3044:	de 01       	movw	r26, r28
    3046:	a9 59       	subi	r26, 0x99	; 153
    3048:	bf 4f       	sbci	r27, 0xFF	; 255
    304a:	fe 01       	movw	r30, r28
    304c:	e9 59       	subi	r30, 0x99	; 153
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	80 81       	ld	r24, Z
    3052:	91 81       	ldd	r25, Z+1	; 0x01
    3054:	01 97       	sbiw	r24, 0x01	; 1
    3056:	11 96       	adiw	r26, 0x01	; 1
    3058:	9c 93       	st	X, r25
    305a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305c:	fe 01       	movw	r30, r28
    305e:	e9 59       	subi	r30, 0x99	; 153
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	80 81       	ld	r24, Z
    3064:	91 81       	ldd	r25, Z+1	; 0x01
    3066:	00 97       	sbiw	r24, 0x00	; 0
    3068:	d1 f6       	brne	.-76     	; 0x301e <main+0x16ca>
    306a:	27 c0       	rjmp	.+78     	; 0x30ba <main+0x1766>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    306c:	8e 01       	movw	r16, r28
    306e:	09 59       	subi	r16, 0x99	; 153
    3070:	1f 4f       	sbci	r17, 0xFF	; 255
    3072:	fe 01       	movw	r30, r28
    3074:	e7 59       	subi	r30, 0x97	; 151
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	60 81       	ld	r22, Z
    307a:	71 81       	ldd	r23, Z+1	; 0x01
    307c:	82 81       	ldd	r24, Z+2	; 0x02
    307e:	93 81       	ldd	r25, Z+3	; 0x03
    3080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	f8 01       	movw	r30, r16
    308a:	91 83       	std	Z+1, r25	; 0x01
    308c:	80 83       	st	Z, r24
    308e:	de 01       	movw	r26, r28
    3090:	ad 59       	subi	r26, 0x9D	; 157
    3092:	bf 4f       	sbci	r27, 0xFF	; 255
    3094:	fe 01       	movw	r30, r28
    3096:	e9 59       	subi	r30, 0x99	; 153
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	80 81       	ld	r24, Z
    309c:	91 81       	ldd	r25, Z+1	; 0x01
    309e:	8d 93       	st	X+, r24
    30a0:	9c 93       	st	X, r25
    30a2:	fe 01       	movw	r30, r28
    30a4:	ed 59       	subi	r30, 0x9D	; 157
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	f1 f7       	brne	.-4      	; 0x30ac <main+0x1758>
    30b0:	fe 01       	movw	r30, r28
    30b2:	ed 59       	subi	r30, 0x9D	; 157
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	91 83       	std	Z+1, r25	; 0x01
    30b8:	80 83       	st	Z, r24
				_delay_ms(500);
				CLCD_VoidReset_Display();
    30ba:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_VoidReset_Display>
	CLCD_VoidReset_Display();
	CLCD_VoidGoToXY(0,0);
		CLCD_VoidSendString("I can play      football");
		_delay_ms(5000);
		CLCD_VoidReset_Display();
	for(u8 i=0;i<8;i++)
    30be:	de 01       	movw	r26, r28
    30c0:	a4 5f       	subi	r26, 0xF4	; 244
    30c2:	be 4f       	sbci	r27, 0xFE	; 254
    30c4:	fe 01       	movw	r30, r28
    30c6:	e4 5f       	subi	r30, 0xF4	; 244
    30c8:	fe 4f       	sbci	r31, 0xFE	; 254
    30ca:	80 81       	ld	r24, Z
    30cc:	8f 5f       	subi	r24, 0xFF	; 255
    30ce:	8c 93       	st	X, r24
    30d0:	fe 01       	movw	r30, r28
    30d2:	e4 5f       	subi	r30, 0xF4	; 244
    30d4:	fe 4f       	sbci	r31, 0xFE	; 254
    30d6:	80 81       	ld	r24, Z
    30d8:	88 30       	cpi	r24, 0x08	; 8
    30da:	08 f4       	brcc	.+2      	; 0x30de <main+0x178a>
    30dc:	76 ce       	rjmp	.-788    	; 0x2dca <main+0x1476>
				_delay_ms(500);
				CLCD_VoidReset_Display();
			}


	CLCD_VoidSendString("I would like to tell you a fact");
    30de:	8d ed       	ldi	r24, 0xDD	; 221
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CLCD_VoidSendString>
    30e6:	fe 01       	movw	r30, r28
    30e8:	e1 5a       	subi	r30, 0xA1	; 161
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	90 e4       	ldi	r25, 0x40	; 64
    30f0:	ac e9       	ldi	r26, 0x9C	; 156
    30f2:	b5 e4       	ldi	r27, 0x45	; 69
    30f4:	80 83       	st	Z, r24
    30f6:	91 83       	std	Z+1, r25	; 0x01
    30f8:	a2 83       	std	Z+2, r26	; 0x02
    30fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30fc:	8e 01       	movw	r16, r28
    30fe:	05 5a       	subi	r16, 0xA5	; 165
    3100:	1f 4f       	sbci	r17, 0xFF	; 255
    3102:	fe 01       	movw	r30, r28
    3104:	e1 5a       	subi	r30, 0xA1	; 161
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	60 81       	ld	r22, Z
    310a:	71 81       	ldd	r23, Z+1	; 0x01
    310c:	82 81       	ldd	r24, Z+2	; 0x02
    310e:	93 81       	ldd	r25, Z+3	; 0x03
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e8       	ldi	r19, 0x80	; 128
    3114:	4b e3       	ldi	r20, 0x3B	; 59
    3116:	55 e4       	ldi	r21, 0x45	; 69
    3118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	f8 01       	movw	r30, r16
    3122:	80 83       	st	Z, r24
    3124:	91 83       	std	Z+1, r25	; 0x01
    3126:	a2 83       	std	Z+2, r26	; 0x02
    3128:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    312a:	fe 01       	movw	r30, r28
    312c:	e5 5a       	subi	r30, 0xA5	; 165
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	60 81       	ld	r22, Z
    3132:	71 81       	ldd	r23, Z+1	; 0x01
    3134:	82 81       	ldd	r24, Z+2	; 0x02
    3136:	93 81       	ldd	r25, Z+3	; 0x03
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	40 e8       	ldi	r20, 0x80	; 128
    313e:	5f e3       	ldi	r21, 0x3F	; 63
    3140:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3144:	88 23       	and	r24, r24
    3146:	44 f4       	brge	.+16     	; 0x3158 <main+0x1804>
		__ticks = 1;
    3148:	fe 01       	movw	r30, r28
    314a:	e7 5a       	subi	r30, 0xA7	; 167
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	91 83       	std	Z+1, r25	; 0x01
    3154:	80 83       	st	Z, r24
    3156:	64 c0       	rjmp	.+200    	; 0x3220 <main+0x18cc>
	else if (__tmp > 65535)
    3158:	fe 01       	movw	r30, r28
    315a:	e5 5a       	subi	r30, 0xA5	; 165
    315c:	ff 4f       	sbci	r31, 0xFF	; 255
    315e:	60 81       	ld	r22, Z
    3160:	71 81       	ldd	r23, Z+1	; 0x01
    3162:	82 81       	ldd	r24, Z+2	; 0x02
    3164:	93 81       	ldd	r25, Z+3	; 0x03
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	3f ef       	ldi	r19, 0xFF	; 255
    316a:	4f e7       	ldi	r20, 0x7F	; 127
    316c:	57 e4       	ldi	r21, 0x47	; 71
    316e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3172:	18 16       	cp	r1, r24
    3174:	0c f0       	brlt	.+2      	; 0x3178 <main+0x1824>
    3176:	43 c0       	rjmp	.+134    	; 0x31fe <main+0x18aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3178:	fe 01       	movw	r30, r28
    317a:	e1 5a       	subi	r30, 0xA1	; 161
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	60 81       	ld	r22, Z
    3180:	71 81       	ldd	r23, Z+1	; 0x01
    3182:	82 81       	ldd	r24, Z+2	; 0x02
    3184:	93 81       	ldd	r25, Z+3	; 0x03
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	40 e2       	ldi	r20, 0x20	; 32
    318c:	51 e4       	ldi	r21, 0x41	; 65
    318e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	8e 01       	movw	r16, r28
    3198:	07 5a       	subi	r16, 0xA7	; 167
    319a:	1f 4f       	sbci	r17, 0xFF	; 255
    319c:	bc 01       	movw	r22, r24
    319e:	cd 01       	movw	r24, r26
    31a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	f8 01       	movw	r30, r16
    31aa:	91 83       	std	Z+1, r25	; 0x01
    31ac:	80 83       	st	Z, r24
    31ae:	1f c0       	rjmp	.+62     	; 0x31ee <main+0x189a>
    31b0:	fe 01       	movw	r30, r28
    31b2:	e9 5a       	subi	r30, 0xA9	; 169
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	8c e2       	ldi	r24, 0x2C	; 44
    31b8:	91 e0       	ldi	r25, 0x01	; 1
    31ba:	91 83       	std	Z+1, r25	; 0x01
    31bc:	80 83       	st	Z, r24
    31be:	fe 01       	movw	r30, r28
    31c0:	e9 5a       	subi	r30, 0xA9	; 169
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	80 81       	ld	r24, Z
    31c6:	91 81       	ldd	r25, Z+1	; 0x01
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <main+0x1874>
    31cc:	fe 01       	movw	r30, r28
    31ce:	e9 5a       	subi	r30, 0xA9	; 169
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	91 83       	std	Z+1, r25	; 0x01
    31d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d6:	de 01       	movw	r26, r28
    31d8:	a7 5a       	subi	r26, 0xA7	; 167
    31da:	bf 4f       	sbci	r27, 0xFF	; 255
    31dc:	fe 01       	movw	r30, r28
    31de:	e7 5a       	subi	r30, 0xA7	; 167
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	80 81       	ld	r24, Z
    31e4:	91 81       	ldd	r25, Z+1	; 0x01
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	11 96       	adiw	r26, 0x01	; 1
    31ea:	9c 93       	st	X, r25
    31ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ee:	fe 01       	movw	r30, r28
    31f0:	e7 5a       	subi	r30, 0xA7	; 167
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	80 81       	ld	r24, Z
    31f6:	91 81       	ldd	r25, Z+1	; 0x01
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	d1 f6       	brne	.-76     	; 0x31b0 <main+0x185c>
    31fc:	27 c0       	rjmp	.+78     	; 0x324c <main+0x18f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fe:	8e 01       	movw	r16, r28
    3200:	07 5a       	subi	r16, 0xA7	; 167
    3202:	1f 4f       	sbci	r17, 0xFF	; 255
    3204:	fe 01       	movw	r30, r28
    3206:	e5 5a       	subi	r30, 0xA5	; 165
    3208:	ff 4f       	sbci	r31, 0xFF	; 255
    320a:	60 81       	ld	r22, Z
    320c:	71 81       	ldd	r23, Z+1	; 0x01
    320e:	82 81       	ldd	r24, Z+2	; 0x02
    3210:	93 81       	ldd	r25, Z+3	; 0x03
    3212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	f8 01       	movw	r30, r16
    321c:	91 83       	std	Z+1, r25	; 0x01
    321e:	80 83       	st	Z, r24
    3220:	de 01       	movw	r26, r28
    3222:	ab 5a       	subi	r26, 0xAB	; 171
    3224:	bf 4f       	sbci	r27, 0xFF	; 255
    3226:	fe 01       	movw	r30, r28
    3228:	e7 5a       	subi	r30, 0xA7	; 167
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	80 81       	ld	r24, Z
    322e:	91 81       	ldd	r25, Z+1	; 0x01
    3230:	8d 93       	st	X+, r24
    3232:	9c 93       	st	X, r25
    3234:	fe 01       	movw	r30, r28
    3236:	eb 5a       	subi	r30, 0xAB	; 171
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	80 81       	ld	r24, Z
    323c:	91 81       	ldd	r25, Z+1	; 0x01
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	f1 f7       	brne	.-4      	; 0x323e <main+0x18ea>
    3242:	fe 01       	movw	r30, r28
    3244:	eb 5a       	subi	r30, 0xAB	; 171
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	91 83       	std	Z+1, r25	; 0x01
    324a:	80 83       	st	Z, r24
	_delay_ms(5000);
	CLCD_VoidReset_Display();
    324c:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_VoidReset_Display>

	CLCD_VoidSendString("like the ending of AOT");
    3250:	8d ef       	ldi	r24, 0xFD	; 253
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CLCD_VoidSendString>
    3258:	fe 01       	movw	r30, r28
    325a:	ef 5a       	subi	r30, 0xAF	; 175
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	90 e4       	ldi	r25, 0x40	; 64
    3262:	ac e9       	ldi	r26, 0x9C	; 156
    3264:	b5 e4       	ldi	r27, 0x45	; 69
    3266:	80 83       	st	Z, r24
    3268:	91 83       	std	Z+1, r25	; 0x01
    326a:	a2 83       	std	Z+2, r26	; 0x02
    326c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326e:	8e 01       	movw	r16, r28
    3270:	03 5b       	subi	r16, 0xB3	; 179
    3272:	1f 4f       	sbci	r17, 0xFF	; 255
    3274:	fe 01       	movw	r30, r28
    3276:	ef 5a       	subi	r30, 0xAF	; 175
    3278:	ff 4f       	sbci	r31, 0xFF	; 255
    327a:	60 81       	ld	r22, Z
    327c:	71 81       	ldd	r23, Z+1	; 0x01
    327e:	82 81       	ldd	r24, Z+2	; 0x02
    3280:	93 81       	ldd	r25, Z+3	; 0x03
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e8       	ldi	r19, 0x80	; 128
    3286:	4b e3       	ldi	r20, 0x3B	; 59
    3288:	55 e4       	ldi	r21, 0x45	; 69
    328a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	f8 01       	movw	r30, r16
    3294:	80 83       	st	Z, r24
    3296:	91 83       	std	Z+1, r25	; 0x01
    3298:	a2 83       	std	Z+2, r26	; 0x02
    329a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    329c:	fe 01       	movw	r30, r28
    329e:	e3 5b       	subi	r30, 0xB3	; 179
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	60 81       	ld	r22, Z
    32a4:	71 81       	ldd	r23, Z+1	; 0x01
    32a6:	82 81       	ldd	r24, Z+2	; 0x02
    32a8:	93 81       	ldd	r25, Z+3	; 0x03
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	40 e8       	ldi	r20, 0x80	; 128
    32b0:	5f e3       	ldi	r21, 0x3F	; 63
    32b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32b6:	88 23       	and	r24, r24
    32b8:	44 f4       	brge	.+16     	; 0x32ca <main+0x1976>
		__ticks = 1;
    32ba:	fe 01       	movw	r30, r28
    32bc:	e5 5b       	subi	r30, 0xB5	; 181
    32be:	ff 4f       	sbci	r31, 0xFF	; 255
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	91 83       	std	Z+1, r25	; 0x01
    32c6:	80 83       	st	Z, r24
    32c8:	64 c0       	rjmp	.+200    	; 0x3392 <main+0x1a3e>
	else if (__tmp > 65535)
    32ca:	fe 01       	movw	r30, r28
    32cc:	e3 5b       	subi	r30, 0xB3	; 179
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	60 81       	ld	r22, Z
    32d2:	71 81       	ldd	r23, Z+1	; 0x01
    32d4:	82 81       	ldd	r24, Z+2	; 0x02
    32d6:	93 81       	ldd	r25, Z+3	; 0x03
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	3f ef       	ldi	r19, 0xFF	; 255
    32dc:	4f e7       	ldi	r20, 0x7F	; 127
    32de:	57 e4       	ldi	r21, 0x47	; 71
    32e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32e4:	18 16       	cp	r1, r24
    32e6:	0c f0       	brlt	.+2      	; 0x32ea <main+0x1996>
    32e8:	43 c0       	rjmp	.+134    	; 0x3370 <main+0x1a1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ea:	fe 01       	movw	r30, r28
    32ec:	ef 5a       	subi	r30, 0xAF	; 175
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	82 81       	ldd	r24, Z+2	; 0x02
    32f6:	93 81       	ldd	r25, Z+3	; 0x03
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	40 e2       	ldi	r20, 0x20	; 32
    32fe:	51 e4       	ldi	r21, 0x41	; 65
    3300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	8e 01       	movw	r16, r28
    330a:	05 5b       	subi	r16, 0xB5	; 181
    330c:	1f 4f       	sbci	r17, 0xFF	; 255
    330e:	bc 01       	movw	r22, r24
    3310:	cd 01       	movw	r24, r26
    3312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	f8 01       	movw	r30, r16
    331c:	91 83       	std	Z+1, r25	; 0x01
    331e:	80 83       	st	Z, r24
    3320:	1f c0       	rjmp	.+62     	; 0x3360 <main+0x1a0c>
    3322:	fe 01       	movw	r30, r28
    3324:	e7 5b       	subi	r30, 0xB7	; 183
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	8c e2       	ldi	r24, 0x2C	; 44
    332a:	91 e0       	ldi	r25, 0x01	; 1
    332c:	91 83       	std	Z+1, r25	; 0x01
    332e:	80 83       	st	Z, r24
    3330:	fe 01       	movw	r30, r28
    3332:	e7 5b       	subi	r30, 0xB7	; 183
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	80 81       	ld	r24, Z
    3338:	91 81       	ldd	r25, Z+1	; 0x01
    333a:	01 97       	sbiw	r24, 0x01	; 1
    333c:	f1 f7       	brne	.-4      	; 0x333a <main+0x19e6>
    333e:	fe 01       	movw	r30, r28
    3340:	e7 5b       	subi	r30, 0xB7	; 183
    3342:	ff 4f       	sbci	r31, 0xFF	; 255
    3344:	91 83       	std	Z+1, r25	; 0x01
    3346:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3348:	de 01       	movw	r26, r28
    334a:	a5 5b       	subi	r26, 0xB5	; 181
    334c:	bf 4f       	sbci	r27, 0xFF	; 255
    334e:	fe 01       	movw	r30, r28
    3350:	e5 5b       	subi	r30, 0xB5	; 181
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	80 81       	ld	r24, Z
    3356:	91 81       	ldd	r25, Z+1	; 0x01
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	11 96       	adiw	r26, 0x01	; 1
    335c:	9c 93       	st	X, r25
    335e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3360:	fe 01       	movw	r30, r28
    3362:	e5 5b       	subi	r30, 0xB5	; 181
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	80 81       	ld	r24, Z
    3368:	91 81       	ldd	r25, Z+1	; 0x01
    336a:	00 97       	sbiw	r24, 0x00	; 0
    336c:	d1 f6       	brne	.-76     	; 0x3322 <main+0x19ce>
    336e:	27 c0       	rjmp	.+78     	; 0x33be <main+0x1a6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3370:	8e 01       	movw	r16, r28
    3372:	05 5b       	subi	r16, 0xB5	; 181
    3374:	1f 4f       	sbci	r17, 0xFF	; 255
    3376:	fe 01       	movw	r30, r28
    3378:	e3 5b       	subi	r30, 0xB3	; 179
    337a:	ff 4f       	sbci	r31, 0xFF	; 255
    337c:	60 81       	ld	r22, Z
    337e:	71 81       	ldd	r23, Z+1	; 0x01
    3380:	82 81       	ldd	r24, Z+2	; 0x02
    3382:	93 81       	ldd	r25, Z+3	; 0x03
    3384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	f8 01       	movw	r30, r16
    338e:	91 83       	std	Z+1, r25	; 0x01
    3390:	80 83       	st	Z, r24
    3392:	de 01       	movw	r26, r28
    3394:	a9 5b       	subi	r26, 0xB9	; 185
    3396:	bf 4f       	sbci	r27, 0xFF	; 255
    3398:	fe 01       	movw	r30, r28
    339a:	e5 5b       	subi	r30, 0xB5	; 181
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	80 81       	ld	r24, Z
    33a0:	91 81       	ldd	r25, Z+1	; 0x01
    33a2:	8d 93       	st	X+, r24
    33a4:	9c 93       	st	X, r25
    33a6:	fe 01       	movw	r30, r28
    33a8:	e9 5b       	subi	r30, 0xB9	; 185
    33aa:	ff 4f       	sbci	r31, 0xFF	; 255
    33ac:	80 81       	ld	r24, Z
    33ae:	91 81       	ldd	r25, Z+1	; 0x01
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	f1 f7       	brne	.-4      	; 0x33b0 <main+0x1a5c>
    33b4:	fe 01       	movw	r30, r28
    33b6:	e9 5b       	subi	r30, 0xB9	; 185
    33b8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ba:	91 83       	std	Z+1, r25	; 0x01
    33bc:	80 83       	st	Z, r24
	_delay_ms(5000);
	CLCD_VoidReset_Display();
    33be:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_VoidReset_Display>

	CLCD_VoidSendString("let me tell you");
    33c2:	84 e1       	ldi	r24, 0x14	; 20
    33c4:	91 e0       	ldi	r25, 0x01	; 1
    33c6:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CLCD_VoidSendString>
    33ca:	fe 01       	movw	r30, r28
    33cc:	ed 5b       	subi	r30, 0xBD	; 189
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	90 e4       	ldi	r25, 0x40	; 64
    33d4:	ac e9       	ldi	r26, 0x9C	; 156
    33d6:	b5 e4       	ldi	r27, 0x45	; 69
    33d8:	80 83       	st	Z, r24
    33da:	91 83       	std	Z+1, r25	; 0x01
    33dc:	a2 83       	std	Z+2, r26	; 0x02
    33de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33e0:	8e 01       	movw	r16, r28
    33e2:	01 5c       	subi	r16, 0xC1	; 193
    33e4:	1f 4f       	sbci	r17, 0xFF	; 255
    33e6:	fe 01       	movw	r30, r28
    33e8:	ed 5b       	subi	r30, 0xBD	; 189
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	60 81       	ld	r22, Z
    33ee:	71 81       	ldd	r23, Z+1	; 0x01
    33f0:	82 81       	ldd	r24, Z+2	; 0x02
    33f2:	93 81       	ldd	r25, Z+3	; 0x03
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	30 e8       	ldi	r19, 0x80	; 128
    33f8:	4b e3       	ldi	r20, 0x3B	; 59
    33fa:	55 e4       	ldi	r21, 0x45	; 69
    33fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3400:	dc 01       	movw	r26, r24
    3402:	cb 01       	movw	r24, r22
    3404:	f8 01       	movw	r30, r16
    3406:	80 83       	st	Z, r24
    3408:	91 83       	std	Z+1, r25	; 0x01
    340a:	a2 83       	std	Z+2, r26	; 0x02
    340c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    340e:	fe 01       	movw	r30, r28
    3410:	ff 96       	adiw	r30, 0x3f	; 63
    3412:	60 81       	ld	r22, Z
    3414:	71 81       	ldd	r23, Z+1	; 0x01
    3416:	82 81       	ldd	r24, Z+2	; 0x02
    3418:	93 81       	ldd	r25, Z+3	; 0x03
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	40 e8       	ldi	r20, 0x80	; 128
    3420:	5f e3       	ldi	r21, 0x3F	; 63
    3422:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3426:	88 23       	and	r24, r24
    3428:	2c f4       	brge	.+10     	; 0x3434 <main+0x1ae0>
		__ticks = 1;
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	9e af       	std	Y+62, r25	; 0x3e
    3430:	8d af       	std	Y+61, r24	; 0x3d
    3432:	46 c0       	rjmp	.+140    	; 0x34c0 <main+0x1b6c>
	else if (__tmp > 65535)
    3434:	fe 01       	movw	r30, r28
    3436:	ff 96       	adiw	r30, 0x3f	; 63
    3438:	60 81       	ld	r22, Z
    343a:	71 81       	ldd	r23, Z+1	; 0x01
    343c:	82 81       	ldd	r24, Z+2	; 0x02
    343e:	93 81       	ldd	r25, Z+3	; 0x03
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	3f ef       	ldi	r19, 0xFF	; 255
    3444:	4f e7       	ldi	r20, 0x7F	; 127
    3446:	57 e4       	ldi	r21, 0x47	; 71
    3448:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    344c:	18 16       	cp	r1, r24
    344e:	64 f5       	brge	.+88     	; 0x34a8 <main+0x1b54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3450:	fe 01       	movw	r30, r28
    3452:	ed 5b       	subi	r30, 0xBD	; 189
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	60 81       	ld	r22, Z
    3458:	71 81       	ldd	r23, Z+1	; 0x01
    345a:	82 81       	ldd	r24, Z+2	; 0x02
    345c:	93 81       	ldd	r25, Z+3	; 0x03
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	40 e2       	ldi	r20, 0x20	; 32
    3464:	51 e4       	ldi	r21, 0x41	; 65
    3466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	bc 01       	movw	r22, r24
    3470:	cd 01       	movw	r24, r26
    3472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	9e af       	std	Y+62, r25	; 0x3e
    347c:	8d af       	std	Y+61, r24	; 0x3d
    347e:	0f c0       	rjmp	.+30     	; 0x349e <main+0x1b4a>
    3480:	8c e2       	ldi	r24, 0x2C	; 44
    3482:	91 e0       	ldi	r25, 0x01	; 1
    3484:	9c af       	std	Y+60, r25	; 0x3c
    3486:	8b af       	std	Y+59, r24	; 0x3b
    3488:	8b ad       	ldd	r24, Y+59	; 0x3b
    348a:	9c ad       	ldd	r25, Y+60	; 0x3c
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	f1 f7       	brne	.-4      	; 0x348c <main+0x1b38>
    3490:	9c af       	std	Y+60, r25	; 0x3c
    3492:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3494:	8d ad       	ldd	r24, Y+61	; 0x3d
    3496:	9e ad       	ldd	r25, Y+62	; 0x3e
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	9e af       	std	Y+62, r25	; 0x3e
    349c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    349e:	8d ad       	ldd	r24, Y+61	; 0x3d
    34a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    34a2:	00 97       	sbiw	r24, 0x00	; 0
    34a4:	69 f7       	brne	.-38     	; 0x3480 <main+0x1b2c>
    34a6:	16 c0       	rjmp	.+44     	; 0x34d4 <main+0x1b80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34a8:	fe 01       	movw	r30, r28
    34aa:	ff 96       	adiw	r30, 0x3f	; 63
    34ac:	60 81       	ld	r22, Z
    34ae:	71 81       	ldd	r23, Z+1	; 0x01
    34b0:	82 81       	ldd	r24, Z+2	; 0x02
    34b2:	93 81       	ldd	r25, Z+3	; 0x03
    34b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	9e af       	std	Y+62, r25	; 0x3e
    34be:	8d af       	std	Y+61, r24	; 0x3d
    34c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    34c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    34c4:	9a af       	std	Y+58, r25	; 0x3a
    34c6:	89 af       	std	Y+57, r24	; 0x39
    34c8:	89 ad       	ldd	r24, Y+57	; 0x39
    34ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    34cc:	01 97       	sbiw	r24, 0x01	; 1
    34ce:	f1 f7       	brne	.-4      	; 0x34cc <main+0x1b78>
    34d0:	9a af       	std	Y+58, r25	; 0x3a
    34d2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5000);
	CLCD_VoidReset_Display();
    34d4:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_VoidReset_Display>

	CLCD_VoidSendString("Wait what are   you doing!");
    34d8:	84 e2       	ldi	r24, 0x24	; 36
    34da:	91 e0       	ldi	r25, 0x01	; 1
    34dc:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CLCD_VoidSendString>
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	90 e4       	ldi	r25, 0x40	; 64
    34e4:	ac e9       	ldi	r26, 0x9C	; 156
    34e6:	b5 e4       	ldi	r27, 0x45	; 69
    34e8:	8d ab       	std	Y+53, r24	; 0x35
    34ea:	9e ab       	std	Y+54, r25	; 0x36
    34ec:	af ab       	std	Y+55, r26	; 0x37
    34ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f0:	6d a9       	ldd	r22, Y+53	; 0x35
    34f2:	7e a9       	ldd	r23, Y+54	; 0x36
    34f4:	8f a9       	ldd	r24, Y+55	; 0x37
    34f6:	98 ad       	ldd	r25, Y+56	; 0x38
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	30 e8       	ldi	r19, 0x80	; 128
    34fc:	4b e3       	ldi	r20, 0x3B	; 59
    34fe:	55 e4       	ldi	r21, 0x45	; 69
    3500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	89 ab       	std	Y+49, r24	; 0x31
    350a:	9a ab       	std	Y+50, r25	; 0x32
    350c:	ab ab       	std	Y+51, r26	; 0x33
    350e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3510:	69 a9       	ldd	r22, Y+49	; 0x31
    3512:	7a a9       	ldd	r23, Y+50	; 0x32
    3514:	8b a9       	ldd	r24, Y+51	; 0x33
    3516:	9c a9       	ldd	r25, Y+52	; 0x34
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	40 e8       	ldi	r20, 0x80	; 128
    351e:	5f e3       	ldi	r21, 0x3F	; 63
    3520:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3524:	88 23       	and	r24, r24
    3526:	2c f4       	brge	.+10     	; 0x3532 <main+0x1bde>
		__ticks = 1;
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	98 ab       	std	Y+48, r25	; 0x30
    352e:	8f a7       	std	Y+47, r24	; 0x2f
    3530:	3f c0       	rjmp	.+126    	; 0x35b0 <main+0x1c5c>
	else if (__tmp > 65535)
    3532:	69 a9       	ldd	r22, Y+49	; 0x31
    3534:	7a a9       	ldd	r23, Y+50	; 0x32
    3536:	8b a9       	ldd	r24, Y+51	; 0x33
    3538:	9c a9       	ldd	r25, Y+52	; 0x34
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	3f ef       	ldi	r19, 0xFF	; 255
    353e:	4f e7       	ldi	r20, 0x7F	; 127
    3540:	57 e4       	ldi	r21, 0x47	; 71
    3542:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3546:	18 16       	cp	r1, r24
    3548:	4c f5       	brge	.+82     	; 0x359c <main+0x1c48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354a:	6d a9       	ldd	r22, Y+53	; 0x35
    354c:	7e a9       	ldd	r23, Y+54	; 0x36
    354e:	8f a9       	ldd	r24, Y+55	; 0x37
    3550:	98 ad       	ldd	r25, Y+56	; 0x38
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	40 e2       	ldi	r20, 0x20	; 32
    3558:	51 e4       	ldi	r21, 0x41	; 65
    355a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	bc 01       	movw	r22, r24
    3564:	cd 01       	movw	r24, r26
    3566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	98 ab       	std	Y+48, r25	; 0x30
    3570:	8f a7       	std	Y+47, r24	; 0x2f
    3572:	0f c0       	rjmp	.+30     	; 0x3592 <main+0x1c3e>
    3574:	8c e2       	ldi	r24, 0x2C	; 44
    3576:	91 e0       	ldi	r25, 0x01	; 1
    3578:	9e a7       	std	Y+46, r25	; 0x2e
    357a:	8d a7       	std	Y+45, r24	; 0x2d
    357c:	8d a5       	ldd	r24, Y+45	; 0x2d
    357e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3580:	01 97       	sbiw	r24, 0x01	; 1
    3582:	f1 f7       	brne	.-4      	; 0x3580 <main+0x1c2c>
    3584:	9e a7       	std	Y+46, r25	; 0x2e
    3586:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3588:	8f a5       	ldd	r24, Y+47	; 0x2f
    358a:	98 a9       	ldd	r25, Y+48	; 0x30
    358c:	01 97       	sbiw	r24, 0x01	; 1
    358e:	98 ab       	std	Y+48, r25	; 0x30
    3590:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3592:	8f a5       	ldd	r24, Y+47	; 0x2f
    3594:	98 a9       	ldd	r25, Y+48	; 0x30
    3596:	00 97       	sbiw	r24, 0x00	; 0
    3598:	69 f7       	brne	.-38     	; 0x3574 <main+0x1c20>
    359a:	14 c0       	rjmp	.+40     	; 0x35c4 <main+0x1c70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    359c:	69 a9       	ldd	r22, Y+49	; 0x31
    359e:	7a a9       	ldd	r23, Y+50	; 0x32
    35a0:	8b a9       	ldd	r24, Y+51	; 0x33
    35a2:	9c a9       	ldd	r25, Y+52	; 0x34
    35a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	98 ab       	std	Y+48, r25	; 0x30
    35ae:	8f a7       	std	Y+47, r24	; 0x2f
    35b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    35b2:	98 a9       	ldd	r25, Y+48	; 0x30
    35b4:	9c a7       	std	Y+44, r25	; 0x2c
    35b6:	8b a7       	std	Y+43, r24	; 0x2b
    35b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    35ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    35bc:	01 97       	sbiw	r24, 0x01	; 1
    35be:	f1 f7       	brne	.-4      	; 0x35bc <main+0x1c68>
    35c0:	9c a7       	std	Y+44, r25	; 0x2c
    35c2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5000);
	CLCD_VoidReset_Display();
    35c4:	0e 94 c2 09 	call	0x1384	; 0x1384 <CLCD_VoidReset_Display>



	CLCD_VoidWriteSpecialChar(pattern0_standing,0,1,15);
    35c8:	ce 01       	movw	r24, r28
    35ca:	81 5f       	subi	r24, 0xF1	; 241
    35cc:	9e 4f       	sbci	r25, 0xFE	; 254
    35ce:	60 e0       	ldi	r22, 0x00	; 0
    35d0:	41 e0       	ldi	r20, 0x01	; 1
    35d2:	2f e0       	ldi	r18, 0x0F	; 15
    35d4:	0e 94 bd 08 	call	0x117a	; 0x117a <CLCD_VoidWriteSpecialChar>
	CLCD_VoidWriteSpecialChar(pattern2_gun,5,1,0);
    35d8:	ce 01       	movw	r24, r28
    35da:	81 5e       	subi	r24, 0xE1	; 225
    35dc:	9e 4f       	sbci	r25, 0xFE	; 254
    35de:	65 e0       	ldi	r22, 0x05	; 5
    35e0:	41 e0       	ldi	r20, 0x01	; 1
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	0e 94 bd 08 	call	0x117a	; 0x117a <CLCD_VoidWriteSpecialChar>

	//CLCD_VoidReset_Display();
	for(u8 i=1;i<15;i++)
    35e8:	fe 01       	movw	r30, r28
    35ea:	e5 5f       	subi	r30, 0xF5	; 245
    35ec:	fe 4f       	sbci	r31, 0xFE	; 254
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	80 83       	st	Z, r24
    35f2:	91 c0       	rjmp	.+290    	; 0x3716 <main+0x1dc2>
	{
		//CLCD_VoidWriteSpecialChar(pattern2_gun,5,1,0);

		CLCD_VoidWriteSpecialChar(pattern3_bullet,6,1,i);
    35f4:	ce 01       	movw	r24, r28
    35f6:	89 5d       	subi	r24, 0xD9	; 217
    35f8:	9e 4f       	sbci	r25, 0xFE	; 254
    35fa:	fe 01       	movw	r30, r28
    35fc:	e5 5f       	subi	r30, 0xF5	; 245
    35fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3600:	66 e0       	ldi	r22, 0x06	; 6
    3602:	41 e0       	ldi	r20, 0x01	; 1
    3604:	20 81       	ld	r18, Z
    3606:	0e 94 bd 08 	call	0x117a	; 0x117a <CLCD_VoidWriteSpecialChar>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	a6 e9       	ldi	r26, 0x96	; 150
    3610:	b3 e4       	ldi	r27, 0x43	; 67
    3612:	8f a3       	std	Y+39, r24	; 0x27
    3614:	98 a7       	std	Y+40, r25	; 0x28
    3616:	a9 a7       	std	Y+41, r26	; 0x29
    3618:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    361a:	6f a1       	ldd	r22, Y+39	; 0x27
    361c:	78 a5       	ldd	r23, Y+40	; 0x28
    361e:	89 a5       	ldd	r24, Y+41	; 0x29
    3620:	9a a5       	ldd	r25, Y+42	; 0x2a
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e8       	ldi	r19, 0x80	; 128
    3626:	4b e3       	ldi	r20, 0x3B	; 59
    3628:	55 e4       	ldi	r21, 0x45	; 69
    362a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	8b a3       	std	Y+35, r24	; 0x23
    3634:	9c a3       	std	Y+36, r25	; 0x24
    3636:	ad a3       	std	Y+37, r26	; 0x25
    3638:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    363a:	6b a1       	ldd	r22, Y+35	; 0x23
    363c:	7c a1       	ldd	r23, Y+36	; 0x24
    363e:	8d a1       	ldd	r24, Y+37	; 0x25
    3640:	9e a1       	ldd	r25, Y+38	; 0x26
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	40 e8       	ldi	r20, 0x80	; 128
    3648:	5f e3       	ldi	r21, 0x3F	; 63
    364a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    364e:	88 23       	and	r24, r24
    3650:	2c f4       	brge	.+10     	; 0x365c <main+0x1d08>
		__ticks = 1;
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	9a a3       	std	Y+34, r25	; 0x22
    3658:	89 a3       	std	Y+33, r24	; 0x21
    365a:	3f c0       	rjmp	.+126    	; 0x36da <main+0x1d86>
	else if (__tmp > 65535)
    365c:	6b a1       	ldd	r22, Y+35	; 0x23
    365e:	7c a1       	ldd	r23, Y+36	; 0x24
    3660:	8d a1       	ldd	r24, Y+37	; 0x25
    3662:	9e a1       	ldd	r25, Y+38	; 0x26
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	3f ef       	ldi	r19, 0xFF	; 255
    3668:	4f e7       	ldi	r20, 0x7F	; 127
    366a:	57 e4       	ldi	r21, 0x47	; 71
    366c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3670:	18 16       	cp	r1, r24
    3672:	4c f5       	brge	.+82     	; 0x36c6 <main+0x1d72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3674:	6f a1       	ldd	r22, Y+39	; 0x27
    3676:	78 a5       	ldd	r23, Y+40	; 0x28
    3678:	89 a5       	ldd	r24, Y+41	; 0x29
    367a:	9a a5       	ldd	r25, Y+42	; 0x2a
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	40 e2       	ldi	r20, 0x20	; 32
    3682:	51 e4       	ldi	r21, 0x41	; 65
    3684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	bc 01       	movw	r22, r24
    368e:	cd 01       	movw	r24, r26
    3690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3694:	dc 01       	movw	r26, r24
    3696:	cb 01       	movw	r24, r22
    3698:	9a a3       	std	Y+34, r25	; 0x22
    369a:	89 a3       	std	Y+33, r24	; 0x21
    369c:	0f c0       	rjmp	.+30     	; 0x36bc <main+0x1d68>
    369e:	8c e2       	ldi	r24, 0x2C	; 44
    36a0:	91 e0       	ldi	r25, 0x01	; 1
    36a2:	98 a3       	std	Y+32, r25	; 0x20
    36a4:	8f 8f       	std	Y+31, r24	; 0x1f
    36a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36a8:	98 a1       	ldd	r25, Y+32	; 0x20
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	f1 f7       	brne	.-4      	; 0x36aa <main+0x1d56>
    36ae:	98 a3       	std	Y+32, r25	; 0x20
    36b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b2:	89 a1       	ldd	r24, Y+33	; 0x21
    36b4:	9a a1       	ldd	r25, Y+34	; 0x22
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	9a a3       	std	Y+34, r25	; 0x22
    36ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36bc:	89 a1       	ldd	r24, Y+33	; 0x21
    36be:	9a a1       	ldd	r25, Y+34	; 0x22
    36c0:	00 97       	sbiw	r24, 0x00	; 0
    36c2:	69 f7       	brne	.-38     	; 0x369e <main+0x1d4a>
    36c4:	14 c0       	rjmp	.+40     	; 0x36ee <main+0x1d9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c6:	6b a1       	ldd	r22, Y+35	; 0x23
    36c8:	7c a1       	ldd	r23, Y+36	; 0x24
    36ca:	8d a1       	ldd	r24, Y+37	; 0x25
    36cc:	9e a1       	ldd	r25, Y+38	; 0x26
    36ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	9a a3       	std	Y+34, r25	; 0x22
    36d8:	89 a3       	std	Y+33, r24	; 0x21
    36da:	89 a1       	ldd	r24, Y+33	; 0x21
    36dc:	9a a1       	ldd	r25, Y+34	; 0x22
    36de:	9e 8f       	std	Y+30, r25	; 0x1e
    36e0:	8d 8f       	std	Y+29, r24	; 0x1d
    36e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36e6:	01 97       	sbiw	r24, 0x01	; 1
    36e8:	f1 f7       	brne	.-4      	; 0x36e6 <main+0x1d92>
    36ea:	9e 8f       	std	Y+30, r25	; 0x1e
    36ec:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(300);
		CLCD_VoidGoToXY(1,i);
    36ee:	fe 01       	movw	r30, r28
    36f0:	e5 5f       	subi	r30, 0xF5	; 245
    36f2:	fe 4f       	sbci	r31, 0xFE	; 254
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	60 81       	ld	r22, Z
    36f8:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_VoidGoToXY>
		CLCD_VoidSendString(" ");
    36fc:	8f e3       	ldi	r24, 0x3F	; 63
    36fe:	91 e0       	ldi	r25, 0x01	; 1
    3700:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CLCD_VoidSendString>

	CLCD_VoidWriteSpecialChar(pattern0_standing,0,1,15);
	CLCD_VoidWriteSpecialChar(pattern2_gun,5,1,0);

	//CLCD_VoidReset_Display();
	for(u8 i=1;i<15;i++)
    3704:	de 01       	movw	r26, r28
    3706:	a5 5f       	subi	r26, 0xF5	; 245
    3708:	be 4f       	sbci	r27, 0xFE	; 254
    370a:	fe 01       	movw	r30, r28
    370c:	e5 5f       	subi	r30, 0xF5	; 245
    370e:	fe 4f       	sbci	r31, 0xFE	; 254
    3710:	80 81       	ld	r24, Z
    3712:	8f 5f       	subi	r24, 0xFF	; 255
    3714:	8c 93       	st	X, r24
    3716:	fe 01       	movw	r30, r28
    3718:	e5 5f       	subi	r30, 0xF5	; 245
    371a:	fe 4f       	sbci	r31, 0xFE	; 254
    371c:	80 81       	ld	r24, Z
    371e:	8f 30       	cpi	r24, 0x0F	; 15
    3720:	08 f4       	brcc	.+2      	; 0x3724 <main+0x1dd0>
    3722:	68 cf       	rjmp	.-304    	; 0x35f4 <main+0x1ca0>

		//CLCD_VoidWriteSpecialChar(pattern0_standing,0,1,15);
	}


	CLCD_VoidWriteSpecialChar(pattern4_dead,7,1,15);
    3724:	ce 01       	movw	r24, r28
    3726:	81 5d       	subi	r24, 0xD1	; 209
    3728:	9e 4f       	sbci	r25, 0xFE	; 254
    372a:	67 e0       	ldi	r22, 0x07	; 7
    372c:	41 e0       	ldi	r20, 0x01	; 1
    372e:	2f e0       	ldi	r18, 0x0F	; 15
    3730:	0e 94 bd 08 	call	0x117a	; 0x117a <CLCD_VoidWriteSpecialChar>
	CLCD_VoidGoToXY(0,0);
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	60 e0       	ldi	r22, 0x00	; 0
    3738:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_VoidGoToXY>
	CLCD_VoidSendString("MY HEAD");
    373c:	81 e4       	ldi	r24, 0x41	; 65
    373e:	91 e0       	ldi	r25, 0x01	; 1
    3740:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CLCD_VoidSendString>
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	90 e4       	ldi	r25, 0x40	; 64
    3748:	ac e9       	ldi	r26, 0x9C	; 156
    374a:	b5 e4       	ldi	r27, 0x45	; 69
    374c:	89 8f       	std	Y+25, r24	; 0x19
    374e:	9a 8f       	std	Y+26, r25	; 0x1a
    3750:	ab 8f       	std	Y+27, r26	; 0x1b
    3752:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3754:	69 8d       	ldd	r22, Y+25	; 0x19
    3756:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3758:	8b 8d       	ldd	r24, Y+27	; 0x1b
    375a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e8       	ldi	r19, 0x80	; 128
    3760:	4b e3       	ldi	r20, 0x3B	; 59
    3762:	55 e4       	ldi	r21, 0x45	; 69
    3764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	8d 8b       	std	Y+21, r24	; 0x15
    376e:	9e 8b       	std	Y+22, r25	; 0x16
    3770:	af 8b       	std	Y+23, r26	; 0x17
    3772:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3774:	6d 89       	ldd	r22, Y+21	; 0x15
    3776:	7e 89       	ldd	r23, Y+22	; 0x16
    3778:	8f 89       	ldd	r24, Y+23	; 0x17
    377a:	98 8d       	ldd	r25, Y+24	; 0x18
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	40 e8       	ldi	r20, 0x80	; 128
    3782:	5f e3       	ldi	r21, 0x3F	; 63
    3784:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3788:	88 23       	and	r24, r24
    378a:	2c f4       	brge	.+10     	; 0x3796 <main+0x1e42>
		__ticks = 1;
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	9c 8b       	std	Y+20, r25	; 0x14
    3792:	8b 8b       	std	Y+19, r24	; 0x13
    3794:	3f c0       	rjmp	.+126    	; 0x3814 <main+0x1ec0>
	else if (__tmp > 65535)
    3796:	6d 89       	ldd	r22, Y+21	; 0x15
    3798:	7e 89       	ldd	r23, Y+22	; 0x16
    379a:	8f 89       	ldd	r24, Y+23	; 0x17
    379c:	98 8d       	ldd	r25, Y+24	; 0x18
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	3f ef       	ldi	r19, 0xFF	; 255
    37a2:	4f e7       	ldi	r20, 0x7F	; 127
    37a4:	57 e4       	ldi	r21, 0x47	; 71
    37a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37aa:	18 16       	cp	r1, r24
    37ac:	4c f5       	brge	.+82     	; 0x3800 <main+0x1eac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ae:	69 8d       	ldd	r22, Y+25	; 0x19
    37b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	40 e2       	ldi	r20, 0x20	; 32
    37bc:	51 e4       	ldi	r21, 0x41	; 65
    37be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	bc 01       	movw	r22, r24
    37c8:	cd 01       	movw	r24, r26
    37ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	9c 8b       	std	Y+20, r25	; 0x14
    37d4:	8b 8b       	std	Y+19, r24	; 0x13
    37d6:	0f c0       	rjmp	.+30     	; 0x37f6 <main+0x1ea2>
    37d8:	8c e2       	ldi	r24, 0x2C	; 44
    37da:	91 e0       	ldi	r25, 0x01	; 1
    37dc:	9a 8b       	std	Y+18, r25	; 0x12
    37de:	89 8b       	std	Y+17, r24	; 0x11
    37e0:	89 89       	ldd	r24, Y+17	; 0x11
    37e2:	9a 89       	ldd	r25, Y+18	; 0x12
    37e4:	01 97       	sbiw	r24, 0x01	; 1
    37e6:	f1 f7       	brne	.-4      	; 0x37e4 <main+0x1e90>
    37e8:	9a 8b       	std	Y+18, r25	; 0x12
    37ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ec:	8b 89       	ldd	r24, Y+19	; 0x13
    37ee:	9c 89       	ldd	r25, Y+20	; 0x14
    37f0:	01 97       	sbiw	r24, 0x01	; 1
    37f2:	9c 8b       	std	Y+20, r25	; 0x14
    37f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f6:	8b 89       	ldd	r24, Y+19	; 0x13
    37f8:	9c 89       	ldd	r25, Y+20	; 0x14
    37fa:	00 97       	sbiw	r24, 0x00	; 0
    37fc:	69 f7       	brne	.-38     	; 0x37d8 <main+0x1e84>
    37fe:	14 c0       	rjmp	.+40     	; 0x3828 <main+0x1ed4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3800:	6d 89       	ldd	r22, Y+21	; 0x15
    3802:	7e 89       	ldd	r23, Y+22	; 0x16
    3804:	8f 89       	ldd	r24, Y+23	; 0x17
    3806:	98 8d       	ldd	r25, Y+24	; 0x18
    3808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380c:	dc 01       	movw	r26, r24
    380e:	cb 01       	movw	r24, r22
    3810:	9c 8b       	std	Y+20, r25	; 0x14
    3812:	8b 8b       	std	Y+19, r24	; 0x13
    3814:	8b 89       	ldd	r24, Y+19	; 0x13
    3816:	9c 89       	ldd	r25, Y+20	; 0x14
    3818:	98 8b       	std	Y+16, r25	; 0x10
    381a:	8f 87       	std	Y+15, r24	; 0x0f
    381c:	8f 85       	ldd	r24, Y+15	; 0x0f
    381e:	98 89       	ldd	r25, Y+16	; 0x10
    3820:	01 97       	sbiw	r24, 0x01	; 1
    3822:	f1 f7       	brne	.-4      	; 0x3820 <main+0x1ecc>
    3824:	98 8b       	std	Y+16, r25	; 0x10
    3826:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5000);
	CLCD_VoidGoToXY(0,0);
    3828:	80 e0       	ldi	r24, 0x00	; 0
    382a:	60 e0       	ldi	r22, 0x00	; 0
    382c:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_VoidGoToXY>
	CLCD_VoidSendString("HOW AM I TALKING");
    3830:	89 e4       	ldi	r24, 0x49	; 73
    3832:	91 e0       	ldi	r25, 0x01	; 1
    3834:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CLCD_VoidSendString>
    3838:	80 e0       	ldi	r24, 0x00	; 0
    383a:	90 e4       	ldi	r25, 0x40	; 64
    383c:	ac e9       	ldi	r26, 0x9C	; 156
    383e:	b5 e4       	ldi	r27, 0x45	; 69
    3840:	8b 87       	std	Y+11, r24	; 0x0b
    3842:	9c 87       	std	Y+12, r25	; 0x0c
    3844:	ad 87       	std	Y+13, r26	; 0x0d
    3846:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3848:	6b 85       	ldd	r22, Y+11	; 0x0b
    384a:	7c 85       	ldd	r23, Y+12	; 0x0c
    384c:	8d 85       	ldd	r24, Y+13	; 0x0d
    384e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e8       	ldi	r19, 0x80	; 128
    3854:	4b e3       	ldi	r20, 0x3B	; 59
    3856:	55 e4       	ldi	r21, 0x45	; 69
    3858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	8f 83       	std	Y+7, r24	; 0x07
    3862:	98 87       	std	Y+8, r25	; 0x08
    3864:	a9 87       	std	Y+9, r26	; 0x09
    3866:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3868:	6f 81       	ldd	r22, Y+7	; 0x07
    386a:	78 85       	ldd	r23, Y+8	; 0x08
    386c:	89 85       	ldd	r24, Y+9	; 0x09
    386e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	40 e8       	ldi	r20, 0x80	; 128
    3876:	5f e3       	ldi	r21, 0x3F	; 63
    3878:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    387c:	88 23       	and	r24, r24
    387e:	2c f4       	brge	.+10     	; 0x388a <main+0x1f36>
		__ticks = 1;
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	9e 83       	std	Y+6, r25	; 0x06
    3886:	8d 83       	std	Y+5, r24	; 0x05
    3888:	3f c0       	rjmp	.+126    	; 0x3908 <main+0x1fb4>
	else if (__tmp > 65535)
    388a:	6f 81       	ldd	r22, Y+7	; 0x07
    388c:	78 85       	ldd	r23, Y+8	; 0x08
    388e:	89 85       	ldd	r24, Y+9	; 0x09
    3890:	9a 85       	ldd	r25, Y+10	; 0x0a
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	3f ef       	ldi	r19, 0xFF	; 255
    3896:	4f e7       	ldi	r20, 0x7F	; 127
    3898:	57 e4       	ldi	r21, 0x47	; 71
    389a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    389e:	18 16       	cp	r1, r24
    38a0:	4c f5       	brge	.+82     	; 0x38f4 <main+0x1fa0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    38a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    38a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	40 e2       	ldi	r20, 0x20	; 32
    38b0:	51 e4       	ldi	r21, 0x41	; 65
    38b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b6:	dc 01       	movw	r26, r24
    38b8:	cb 01       	movw	r24, r22
    38ba:	bc 01       	movw	r22, r24
    38bc:	cd 01       	movw	r24, r26
    38be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	9e 83       	std	Y+6, r25	; 0x06
    38c8:	8d 83       	std	Y+5, r24	; 0x05
    38ca:	0f c0       	rjmp	.+30     	; 0x38ea <main+0x1f96>
    38cc:	8c e2       	ldi	r24, 0x2C	; 44
    38ce:	91 e0       	ldi	r25, 0x01	; 1
    38d0:	9c 83       	std	Y+4, r25	; 0x04
    38d2:	8b 83       	std	Y+3, r24	; 0x03
    38d4:	8b 81       	ldd	r24, Y+3	; 0x03
    38d6:	9c 81       	ldd	r25, Y+4	; 0x04
    38d8:	01 97       	sbiw	r24, 0x01	; 1
    38da:	f1 f7       	brne	.-4      	; 0x38d8 <main+0x1f84>
    38dc:	9c 83       	std	Y+4, r25	; 0x04
    38de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e0:	8d 81       	ldd	r24, Y+5	; 0x05
    38e2:	9e 81       	ldd	r25, Y+6	; 0x06
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	9e 83       	std	Y+6, r25	; 0x06
    38e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ea:	8d 81       	ldd	r24, Y+5	; 0x05
    38ec:	9e 81       	ldd	r25, Y+6	; 0x06
    38ee:	00 97       	sbiw	r24, 0x00	; 0
    38f0:	69 f7       	brne	.-38     	; 0x38cc <main+0x1f78>
    38f2:	14 c0       	rjmp	.+40     	; 0x391c <main+0x1fc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f4:	6f 81       	ldd	r22, Y+7	; 0x07
    38f6:	78 85       	ldd	r23, Y+8	; 0x08
    38f8:	89 85       	ldd	r24, Y+9	; 0x09
    38fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    38fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	9e 83       	std	Y+6, r25	; 0x06
    3906:	8d 83       	std	Y+5, r24	; 0x05
    3908:	8d 81       	ldd	r24, Y+5	; 0x05
    390a:	9e 81       	ldd	r25, Y+6	; 0x06
    390c:	9a 83       	std	Y+2, r25	; 0x02
    390e:	89 83       	std	Y+1, r24	; 0x01
    3910:	89 81       	ldd	r24, Y+1	; 0x01
    3912:	9a 81       	ldd	r25, Y+2	; 0x02
    3914:	01 97       	sbiw	r24, 0x01	; 1
    3916:	f1 f7       	brne	.-4      	; 0x3914 <main+0x1fc0>
    3918:	9a 83       	std	Y+2, r25	; 0x02
    391a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5000);
	CLCD_VoidGoToXY(0,0);
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	60 e0       	ldi	r22, 0x00	; 0
    3920:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_VoidGoToXY>
	CLCD_VoidSendString("CODE ME A HEAD  ");
    3924:	8a e5       	ldi	r24, 0x5A	; 90
    3926:	91 e0       	ldi	r25, 0x01	; 1
    3928:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CLCD_VoidSendString>

}
    392c:	ca 58       	subi	r28, 0x8A	; 138
    392e:	de 4f       	sbci	r29, 0xFE	; 254
    3930:	0f b6       	in	r0, 0x3f	; 63
    3932:	f8 94       	cli
    3934:	de bf       	out	0x3e, r29	; 62
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	cd bf       	out	0x3d, r28	; 61
    393a:	cf 91       	pop	r28
    393c:	df 91       	pop	r29
    393e:	1f 91       	pop	r17
    3940:	0f 91       	pop	r16
    3942:	08 95       	ret

00003944 <__mulsi3>:
    3944:	62 9f       	mul	r22, r18
    3946:	d0 01       	movw	r26, r0
    3948:	73 9f       	mul	r23, r19
    394a:	f0 01       	movw	r30, r0
    394c:	82 9f       	mul	r24, r18
    394e:	e0 0d       	add	r30, r0
    3950:	f1 1d       	adc	r31, r1
    3952:	64 9f       	mul	r22, r20
    3954:	e0 0d       	add	r30, r0
    3956:	f1 1d       	adc	r31, r1
    3958:	92 9f       	mul	r25, r18
    395a:	f0 0d       	add	r31, r0
    395c:	83 9f       	mul	r24, r19
    395e:	f0 0d       	add	r31, r0
    3960:	74 9f       	mul	r23, r20
    3962:	f0 0d       	add	r31, r0
    3964:	65 9f       	mul	r22, r21
    3966:	f0 0d       	add	r31, r0
    3968:	99 27       	eor	r25, r25
    396a:	72 9f       	mul	r23, r18
    396c:	b0 0d       	add	r27, r0
    396e:	e1 1d       	adc	r30, r1
    3970:	f9 1f       	adc	r31, r25
    3972:	63 9f       	mul	r22, r19
    3974:	b0 0d       	add	r27, r0
    3976:	e1 1d       	adc	r30, r1
    3978:	f9 1f       	adc	r31, r25
    397a:	bd 01       	movw	r22, r26
    397c:	cf 01       	movw	r24, r30
    397e:	11 24       	eor	r1, r1
    3980:	08 95       	ret

00003982 <__udivmodsi4>:
    3982:	a1 e2       	ldi	r26, 0x21	; 33
    3984:	1a 2e       	mov	r1, r26
    3986:	aa 1b       	sub	r26, r26
    3988:	bb 1b       	sub	r27, r27
    398a:	fd 01       	movw	r30, r26
    398c:	0d c0       	rjmp	.+26     	; 0x39a8 <__udivmodsi4_ep>

0000398e <__udivmodsi4_loop>:
    398e:	aa 1f       	adc	r26, r26
    3990:	bb 1f       	adc	r27, r27
    3992:	ee 1f       	adc	r30, r30
    3994:	ff 1f       	adc	r31, r31
    3996:	a2 17       	cp	r26, r18
    3998:	b3 07       	cpc	r27, r19
    399a:	e4 07       	cpc	r30, r20
    399c:	f5 07       	cpc	r31, r21
    399e:	20 f0       	brcs	.+8      	; 0x39a8 <__udivmodsi4_ep>
    39a0:	a2 1b       	sub	r26, r18
    39a2:	b3 0b       	sbc	r27, r19
    39a4:	e4 0b       	sbc	r30, r20
    39a6:	f5 0b       	sbc	r31, r21

000039a8 <__udivmodsi4_ep>:
    39a8:	66 1f       	adc	r22, r22
    39aa:	77 1f       	adc	r23, r23
    39ac:	88 1f       	adc	r24, r24
    39ae:	99 1f       	adc	r25, r25
    39b0:	1a 94       	dec	r1
    39b2:	69 f7       	brne	.-38     	; 0x398e <__udivmodsi4_loop>
    39b4:	60 95       	com	r22
    39b6:	70 95       	com	r23
    39b8:	80 95       	com	r24
    39ba:	90 95       	com	r25
    39bc:	9b 01       	movw	r18, r22
    39be:	ac 01       	movw	r20, r24
    39c0:	bd 01       	movw	r22, r26
    39c2:	cf 01       	movw	r24, r30
    39c4:	08 95       	ret

000039c6 <__prologue_saves__>:
    39c6:	2f 92       	push	r2
    39c8:	3f 92       	push	r3
    39ca:	4f 92       	push	r4
    39cc:	5f 92       	push	r5
    39ce:	6f 92       	push	r6
    39d0:	7f 92       	push	r7
    39d2:	8f 92       	push	r8
    39d4:	9f 92       	push	r9
    39d6:	af 92       	push	r10
    39d8:	bf 92       	push	r11
    39da:	cf 92       	push	r12
    39dc:	df 92       	push	r13
    39de:	ef 92       	push	r14
    39e0:	ff 92       	push	r15
    39e2:	0f 93       	push	r16
    39e4:	1f 93       	push	r17
    39e6:	cf 93       	push	r28
    39e8:	df 93       	push	r29
    39ea:	cd b7       	in	r28, 0x3d	; 61
    39ec:	de b7       	in	r29, 0x3e	; 62
    39ee:	ca 1b       	sub	r28, r26
    39f0:	db 0b       	sbc	r29, r27
    39f2:	0f b6       	in	r0, 0x3f	; 63
    39f4:	f8 94       	cli
    39f6:	de bf       	out	0x3e, r29	; 62
    39f8:	0f be       	out	0x3f, r0	; 63
    39fa:	cd bf       	out	0x3d, r28	; 61
    39fc:	09 94       	ijmp

000039fe <__epilogue_restores__>:
    39fe:	2a 88       	ldd	r2, Y+18	; 0x12
    3a00:	39 88       	ldd	r3, Y+17	; 0x11
    3a02:	48 88       	ldd	r4, Y+16	; 0x10
    3a04:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a06:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a08:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a10:	b9 84       	ldd	r11, Y+9	; 0x09
    3a12:	c8 84       	ldd	r12, Y+8	; 0x08
    3a14:	df 80       	ldd	r13, Y+7	; 0x07
    3a16:	ee 80       	ldd	r14, Y+6	; 0x06
    3a18:	fd 80       	ldd	r15, Y+5	; 0x05
    3a1a:	0c 81       	ldd	r16, Y+4	; 0x04
    3a1c:	1b 81       	ldd	r17, Y+3	; 0x03
    3a1e:	aa 81       	ldd	r26, Y+2	; 0x02
    3a20:	b9 81       	ldd	r27, Y+1	; 0x01
    3a22:	ce 0f       	add	r28, r30
    3a24:	d1 1d       	adc	r29, r1
    3a26:	0f b6       	in	r0, 0x3f	; 63
    3a28:	f8 94       	cli
    3a2a:	de bf       	out	0x3e, r29	; 62
    3a2c:	0f be       	out	0x3f, r0	; 63
    3a2e:	cd bf       	out	0x3d, r28	; 61
    3a30:	ed 01       	movw	r28, r26
    3a32:	08 95       	ret

00003a34 <_exit>:
    3a34:	f8 94       	cli

00003a36 <__stop_program>:
    3a36:	ff cf       	rjmp	.-2      	; 0x3a36 <__stop_program>
