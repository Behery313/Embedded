
project8_testing_LED_7seg_switch_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e8a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002e8a  00002efe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002010  00000000  00000000  00002f14  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bac  00000000  00000000  00004f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000079c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000088b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000097c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a21f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 56 15 	call	0x2aac	; 0x2aac <main>
      7a:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 28 17 	jmp	0x2e50	; 0x2e50 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 28 17 	jmp	0x2e50	; 0x2e50 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
/**************************************************************************/
/***************setting direction of PIN***********************************/
/**************************************************************************/
u8 DIO_u8SetPinDirection(u8 Copy_u8Port ,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	28 97       	sbiw	r28, 0x08	; 8
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8a 83       	std	Y+2, r24	; 0x02
     b4c:	6b 83       	std	Y+3, r22	; 0x03
     b4e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially set to zero
     b50:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin<=DIO_u8PIN_7)
     b52:	8b 81       	ldd	r24, Y+3	; 0x03
     b54:	88 30       	cpi	r24, 0x08	; 8
     b56:	08 f0       	brcs	.+2      	; 0xb5a <DIO_u8SetPinDirection+0x24>
     b58:	f4 c0       	rjmp	.+488    	; 0xd42 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8INPUT)//if direction is input clear bits
     b5a:	8c 81       	ldd	r24, Y+4	; 0x04
     b5c:	88 23       	and	r24, r24
     b5e:	09 f0       	breq	.+2      	; 0xb62 <DIO_u8SetPinDirection+0x2c>
     b60:	77 c0       	rjmp	.+238    	; 0xc50 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	38 87       	std	Y+8, r19	; 0x08
     b6a:	2f 83       	std	Y+7, r18	; 0x07
     b6c:	8f 81       	ldd	r24, Y+7	; 0x07
     b6e:	98 85       	ldd	r25, Y+8	; 0x08
     b70:	81 30       	cpi	r24, 0x01	; 1
     b72:	91 05       	cpc	r25, r1
     b74:	59 f1       	breq	.+86     	; 0xbcc <DIO_u8SetPinDirection+0x96>
     b76:	2f 81       	ldd	r18, Y+7	; 0x07
     b78:	38 85       	ldd	r19, Y+8	; 0x08
     b7a:	22 30       	cpi	r18, 0x02	; 2
     b7c:	31 05       	cpc	r19, r1
     b7e:	2c f4       	brge	.+10     	; 0xb8a <DIO_u8SetPinDirection+0x54>
     b80:	8f 81       	ldd	r24, Y+7	; 0x07
     b82:	98 85       	ldd	r25, Y+8	; 0x08
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	69 f0       	breq	.+26     	; 0xba2 <DIO_u8SetPinDirection+0x6c>
     b88:	60 c0       	rjmp	.+192    	; 0xc4a <DIO_u8SetPinDirection+0x114>
     b8a:	2f 81       	ldd	r18, Y+7	; 0x07
     b8c:	38 85       	ldd	r19, Y+8	; 0x08
     b8e:	22 30       	cpi	r18, 0x02	; 2
     b90:	31 05       	cpc	r19, r1
     b92:	89 f1       	breq	.+98     	; 0xbf6 <DIO_u8SetPinDirection+0xc0>
     b94:	8f 81       	ldd	r24, Y+7	; 0x07
     b96:	98 85       	ldd	r25, Y+8	; 0x08
     b98:	83 30       	cpi	r24, 0x03	; 3
     b9a:	91 05       	cpc	r25, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <DIO_u8SetPinDirection+0x6a>
     b9e:	40 c0       	rjmp	.+128    	; 0xc20 <DIO_u8SetPinDirection+0xea>
     ba0:	54 c0       	rjmp	.+168    	; 0xc4a <DIO_u8SetPinDirection+0x114>
			{
				case DIO_u8PORTA:
				CLR_BIT(DDRA_reg,Copy_u8Pin);
     ba2:	aa e3       	ldi	r26, 0x3A	; 58
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	ea e3       	ldi	r30, 0x3A	; 58
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	48 2f       	mov	r20, r24
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	28 2f       	mov	r18, r24
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	02 2e       	mov	r0, r18
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <DIO_u8SetPinDirection+0x8a>
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	0a 94       	dec	r0
     bc2:	e2 f7       	brpl	.-8      	; 0xbbc <DIO_u8SetPinDirection+0x86>
     bc4:	80 95       	com	r24
     bc6:	84 23       	and	r24, r20
     bc8:	8c 93       	st	X, r24
     bca:	bd c0       	rjmp	.+378    	; 0xd46 <DIO_u8SetPinDirection+0x210>
				break;
					
				case DIO_u8PORTB:
				CLR_BIT(DDRB_reg,Copy_u8Pin);
     bcc:	a7 e3       	ldi	r26, 0x37	; 55
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e7 e3       	ldi	r30, 0x37	; 55
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	48 2f       	mov	r20, r24
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	02 2e       	mov	r0, r18
     be4:	02 c0       	rjmp	.+4      	; 0xbea <DIO_u8SetPinDirection+0xb4>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	0a 94       	dec	r0
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <DIO_u8SetPinDirection+0xb0>
     bee:	80 95       	com	r24
     bf0:	84 23       	and	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	a8 c0       	rjmp	.+336    	; 0xd46 <DIO_u8SetPinDirection+0x210>
				break;
					
				case DIO_u8PORTC:
				CLR_BIT(DDRC_reg,Copy_u8Pin);
     bf6:	a4 e3       	ldi	r26, 0x34	; 52
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e4 e3       	ldi	r30, 0x34	; 52
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_u8SetPinDirection+0xde>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_u8SetPinDirection+0xda>
     c18:	80 95       	com	r24
     c1a:	84 23       	and	r24, r20
     c1c:	8c 93       	st	X, r24
     c1e:	93 c0       	rjmp	.+294    	; 0xd46 <DIO_u8SetPinDirection+0x210>
				break;
					
				case DIO_u8PORTD:
				CLR_BIT(DDRD_reg,Copy_u8Pin);
     c20:	a1 e3       	ldi	r26, 0x31	; 49
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e1 e3       	ldi	r30, 0x31	; 49
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	48 2f       	mov	r20, r24
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	02 2e       	mov	r0, r18
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <DIO_u8SetPinDirection+0x108>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	0a 94       	dec	r0
     c40:	e2 f7       	brpl	.-8      	; 0xc3a <DIO_u8SetPinDirection+0x104>
     c42:	80 95       	com	r24
     c44:	84 23       	and	r24, r20
     c46:	8c 93       	st	X, r24
     c48:	7e c0       	rjmp	.+252    	; 0xd46 <DIO_u8SetPinDirection+0x210>
				break;
					
				default:
				Local_u8ErrorState=1;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	7b c0       	rjmp	.+246    	; 0xd46 <DIO_u8SetPinDirection+0x210>
				break;
			}
		}
		else if(Copy_u8Direction==DIO_u8OUTPUT)//if direction is output set bits to one
     c50:	8c 81       	ldd	r24, Y+4	; 0x04
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	09 f0       	breq	.+2      	; 0xc58 <DIO_u8SetPinDirection+0x122>
     c56:	72 c0       	rjmp	.+228    	; 0xd3c <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	3e 83       	std	Y+6, r19	; 0x06
     c60:	2d 83       	std	Y+5, r18	; 0x05
     c62:	8d 81       	ldd	r24, Y+5	; 0x05
     c64:	9e 81       	ldd	r25, Y+6	; 0x06
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	91 05       	cpc	r25, r1
     c6a:	49 f1       	breq	.+82     	; 0xcbe <DIO_u8SetPinDirection+0x188>
     c6c:	2d 81       	ldd	r18, Y+5	; 0x05
     c6e:	3e 81       	ldd	r19, Y+6	; 0x06
     c70:	22 30       	cpi	r18, 0x02	; 2
     c72:	31 05       	cpc	r19, r1
     c74:	2c f4       	brge	.+10     	; 0xc80 <DIO_u8SetPinDirection+0x14a>
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	9e 81       	ldd	r25, Y+6	; 0x06
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	61 f0       	breq	.+24     	; 0xc96 <DIO_u8SetPinDirection+0x160>
     c7e:	5b c0       	rjmp	.+182    	; 0xd36 <DIO_u8SetPinDirection+0x200>
     c80:	2d 81       	ldd	r18, Y+5	; 0x05
     c82:	3e 81       	ldd	r19, Y+6	; 0x06
     c84:	22 30       	cpi	r18, 0x02	; 2
     c86:	31 05       	cpc	r19, r1
     c88:	71 f1       	breq	.+92     	; 0xce6 <DIO_u8SetPinDirection+0x1b0>
     c8a:	8d 81       	ldd	r24, Y+5	; 0x05
     c8c:	9e 81       	ldd	r25, Y+6	; 0x06
     c8e:	83 30       	cpi	r24, 0x03	; 3
     c90:	91 05       	cpc	r25, r1
     c92:	e9 f1       	breq	.+122    	; 0xd0e <DIO_u8SetPinDirection+0x1d8>
     c94:	50 c0       	rjmp	.+160    	; 0xd36 <DIO_u8SetPinDirection+0x200>
			{
				case DIO_u8PORTA:
				SET_BIT(DDRA_reg,Copy_u8Pin);
     c96:	aa e3       	ldi	r26, 0x3A	; 58
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	ea e3       	ldi	r30, 0x3A	; 58
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	48 2f       	mov	r20, r24
     ca2:	8b 81       	ldd	r24, Y+3	; 0x03
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	02 2e       	mov	r0, r18
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <DIO_u8SetPinDirection+0x17e>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	0a 94       	dec	r0
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <DIO_u8SetPinDirection+0x17a>
     cb8:	84 2b       	or	r24, r20
     cba:	8c 93       	st	X, r24
     cbc:	44 c0       	rjmp	.+136    	; 0xd46 <DIO_u8SetPinDirection+0x210>
				break;
				
				case DIO_u8PORTB:
				SET_BIT(DDRB_reg,Copy_u8Pin);
     cbe:	a7 e3       	ldi	r26, 0x37	; 55
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e7 e3       	ldi	r30, 0x37	; 55
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	48 2f       	mov	r20, r24
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 2e       	mov	r0, r18
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_u8SetPinDirection+0x1a6>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_u8SetPinDirection+0x1a2>
     ce0:	84 2b       	or	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	30 c0       	rjmp	.+96     	; 0xd46 <DIO_u8SetPinDirection+0x210>
				break;
				
				case DIO_u8PORTC:
				SET_BIT(DDRC_reg,Copy_u8Pin);
     ce6:	a4 e3       	ldi	r26, 0x34	; 52
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e4 e3       	ldi	r30, 0x34	; 52
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_u8SetPinDirection+0x1ce>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_u8SetPinDirection+0x1ca>
     d08:	84 2b       	or	r24, r20
     d0a:	8c 93       	st	X, r24
     d0c:	1c c0       	rjmp	.+56     	; 0xd46 <DIO_u8SetPinDirection+0x210>
				break;
				
				case DIO_u8PORTD:
				SET_BIT(DDRD_reg,Copy_u8Pin);
     d0e:	a1 e3       	ldi	r26, 0x31	; 49
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e1 e3       	ldi	r30, 0x31	; 49
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_u8SetPinDirection+0x1f6>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_u8SetPinDirection+0x1f2>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	08 c0       	rjmp	.+16     	; 0xd46 <DIO_u8SetPinDirection+0x210>
				break;
				
				default:
				Local_u8ErrorState=1;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	05 c0       	rjmp	.+10     	; 0xd46 <DIO_u8SetPinDirection+0x210>
				
			}
		}
		else//direction is neither input nor output return 0
		{
			Local_u8ErrorState=1;//error state set to 1
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	89 83       	std	Y+1, r24	; 0x01
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;//error state set to 1
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     d46:	89 81       	ldd	r24, Y+1	; 0x01
}
     d48:	28 96       	adiw	r28, 0x08	; 8
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <DIO_u8SetPortDirection>:
/***************************************************************************/
/***************setting direction of PORT***********************************/
/***************************************************************************/

u8 DIO_u8SetPortDirection(u8 Copy_u8Port ,u8 Copy_u8Direction)
{
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	27 97       	sbiw	r28, 0x07	; 7
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	8a 83       	std	Y+2, r24	; 0x02
     d70:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;//error state initially zero
     d72:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Direction==DIO_u8INPUT)
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	88 23       	and	r24, r24
     d78:	91 f5       	brne	.+100    	; 0xdde <DIO_u8SetPortDirection+0x84>
	{
		switch (Copy_u8Port)
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	3f 83       	std	Y+7, r19	; 0x07
     d82:	2e 83       	std	Y+6, r18	; 0x06
     d84:	8e 81       	ldd	r24, Y+6	; 0x06
     d86:	9f 81       	ldd	r25, Y+7	; 0x07
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	91 05       	cpc	r25, r1
     d8c:	c9 f0       	breq	.+50     	; 0xdc0 <DIO_u8SetPortDirection+0x66>
     d8e:	2e 81       	ldd	r18, Y+6	; 0x06
     d90:	3f 81       	ldd	r19, Y+7	; 0x07
     d92:	22 30       	cpi	r18, 0x02	; 2
     d94:	31 05       	cpc	r19, r1
     d96:	2c f4       	brge	.+10     	; 0xda2 <DIO_u8SetPortDirection+0x48>
     d98:	8e 81       	ldd	r24, Y+6	; 0x06
     d9a:	9f 81       	ldd	r25, Y+7	; 0x07
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	61 f0       	breq	.+24     	; 0xdb8 <DIO_u8SetPortDirection+0x5e>
     da0:	1b c0       	rjmp	.+54     	; 0xdd8 <DIO_u8SetPortDirection+0x7e>
     da2:	2e 81       	ldd	r18, Y+6	; 0x06
     da4:	3f 81       	ldd	r19, Y+7	; 0x07
     da6:	22 30       	cpi	r18, 0x02	; 2
     da8:	31 05       	cpc	r19, r1
     daa:	71 f0       	breq	.+28     	; 0xdc8 <DIO_u8SetPortDirection+0x6e>
     dac:	8e 81       	ldd	r24, Y+6	; 0x06
     dae:	9f 81       	ldd	r25, Y+7	; 0x07
     db0:	83 30       	cpi	r24, 0x03	; 3
     db2:	91 05       	cpc	r25, r1
     db4:	69 f0       	breq	.+26     	; 0xdd0 <DIO_u8SetPortDirection+0x76>
     db6:	10 c0       	rjmp	.+32     	; 0xdd8 <DIO_u8SetPortDirection+0x7e>
		{	
			case DIO_u8PORTA:
			DDRA_reg=0;
     db8:	ea e3       	ldi	r30, 0x3A	; 58
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	10 82       	st	Z, r1
     dbe:	4a c0       	rjmp	.+148    	; 0xe54 <DIO_u8SetPortDirection+0xfa>
			break;
			
			case DIO_u8PORTB:
			DDRB_reg=0;
     dc0:	e7 e3       	ldi	r30, 0x37	; 55
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	10 82       	st	Z, r1
     dc6:	46 c0       	rjmp	.+140    	; 0xe54 <DIO_u8SetPortDirection+0xfa>
			break;
			
			case DIO_u8PORTC:
			DDRC_reg=0;
     dc8:	e4 e3       	ldi	r30, 0x34	; 52
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	10 82       	st	Z, r1
     dce:	42 c0       	rjmp	.+132    	; 0xe54 <DIO_u8SetPortDirection+0xfa>
			break;
			
			case DIO_u8PORTD:
			DDRD_reg=0;
     dd0:	e1 e3       	ldi	r30, 0x31	; 49
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	10 82       	st	Z, r1
     dd6:	3e c0       	rjmp	.+124    	; 0xe54 <DIO_u8SetPortDirection+0xfa>
			break;
			
			default:
			Local_u8ErrorState=1;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	89 83       	std	Y+1, r24	; 0x01
     ddc:	3b c0       	rjmp	.+118    	; 0xe54 <DIO_u8SetPortDirection+0xfa>
			break;
		}
	}	
	else if(Copy_u8Direction==DIO_u8OUTPUT)
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	b1 f5       	brne	.+108    	; 0xe50 <DIO_u8SetPortDirection+0xf6>
	{
		switch (Copy_u8Port)
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	3d 83       	std	Y+5, r19	; 0x05
     dec:	2c 83       	std	Y+4, r18	; 0x04
     dee:	8c 81       	ldd	r24, Y+4	; 0x04
     df0:	9d 81       	ldd	r25, Y+5	; 0x05
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	91 05       	cpc	r25, r1
     df6:	d1 f0       	breq	.+52     	; 0xe2c <DIO_u8SetPortDirection+0xd2>
     df8:	2c 81       	ldd	r18, Y+4	; 0x04
     dfa:	3d 81       	ldd	r19, Y+5	; 0x05
     dfc:	22 30       	cpi	r18, 0x02	; 2
     dfe:	31 05       	cpc	r19, r1
     e00:	2c f4       	brge	.+10     	; 0xe0c <DIO_u8SetPortDirection+0xb2>
     e02:	8c 81       	ldd	r24, Y+4	; 0x04
     e04:	9d 81       	ldd	r25, Y+5	; 0x05
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	61 f0       	breq	.+24     	; 0xe22 <DIO_u8SetPortDirection+0xc8>
     e0a:	1f c0       	rjmp	.+62     	; 0xe4a <DIO_u8SetPortDirection+0xf0>
     e0c:	2c 81       	ldd	r18, Y+4	; 0x04
     e0e:	3d 81       	ldd	r19, Y+5	; 0x05
     e10:	22 30       	cpi	r18, 0x02	; 2
     e12:	31 05       	cpc	r19, r1
     e14:	81 f0       	breq	.+32     	; 0xe36 <DIO_u8SetPortDirection+0xdc>
     e16:	8c 81       	ldd	r24, Y+4	; 0x04
     e18:	9d 81       	ldd	r25, Y+5	; 0x05
     e1a:	83 30       	cpi	r24, 0x03	; 3
     e1c:	91 05       	cpc	r25, r1
     e1e:	81 f0       	breq	.+32     	; 0xe40 <DIO_u8SetPortDirection+0xe6>
     e20:	14 c0       	rjmp	.+40     	; 0xe4a <DIO_u8SetPortDirection+0xf0>
		{	
			case DIO_u8PORTA:
			DDRA_reg=0xff;
     e22:	ea e3       	ldi	r30, 0x3A	; 58
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	8f ef       	ldi	r24, 0xFF	; 255
     e28:	80 83       	st	Z, r24
     e2a:	14 c0       	rjmp	.+40     	; 0xe54 <DIO_u8SetPortDirection+0xfa>
			break;
			
			case DIO_u8PORTB:
			DDRB_reg=0xff;
     e2c:	e7 e3       	ldi	r30, 0x37	; 55
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	80 83       	st	Z, r24
     e34:	0f c0       	rjmp	.+30     	; 0xe54 <DIO_u8SetPortDirection+0xfa>
			break;
			
			case DIO_u8PORTC:
			DDRC_reg=0xff;
     e36:	e4 e3       	ldi	r30, 0x34	; 52
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	80 83       	st	Z, r24
     e3e:	0a c0       	rjmp	.+20     	; 0xe54 <DIO_u8SetPortDirection+0xfa>
			break;
			
			case DIO_u8PORTD:
			DDRD_reg=0xff;
     e40:	e1 e3       	ldi	r30, 0x31	; 49
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	80 83       	st	Z, r24
     e48:	05 c0       	rjmp	.+10     	; 0xe54 <DIO_u8SetPortDirection+0xfa>
			break;
			
			default:
			Local_u8ErrorState=1;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	89 83       	std	Y+1, r24	; 0x01
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <DIO_u8SetPortDirection+0xfa>
			break;
		}
	}
	else 		//incorrect direction
	{
		Local_u8ErrorState=1;	 //error incorrect input
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	89 83       	std	Y+1, r24	; 0x01
	}	
	return Local_u8ErrorState;
     e54:	89 81       	ldd	r24, Y+1	; 0x01
}
     e56:	27 96       	adiw	r28, 0x07	; 7
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <DIO_u8SetPinValue>:
/******************************************************************************/
/***********************Setting pin value**************************************/
/******************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin,u8 Copy_u8Value)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	28 97       	sbiw	r28, 0x08	; 8
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	8a 83       	std	Y+2, r24	; 0x02
     e7e:	6b 83       	std	Y+3, r22	; 0x03
     e80:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially zero
     e82:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN_7)
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	88 30       	cpi	r24, 0x08	; 8
     e88:	08 f0       	brcs	.+2      	; 0xe8c <DIO_u8SetPinValue+0x24>
     e8a:	ed c0       	rjmp	.+474    	; 0x1066 <DIO_u8SetPinValue+0x1fe>
	{
		if (Copy_u8Value)//if value is 1 SET the required PIN
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	88 23       	and	r24, r24
     e90:	09 f4       	brne	.+2      	; 0xe94 <DIO_u8SetPinValue+0x2c>
     e92:	72 c0       	rjmp	.+228    	; 0xf78 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	38 87       	std	Y+8, r19	; 0x08
     e9c:	2f 83       	std	Y+7, r18	; 0x07
     e9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ea0:	98 85       	ldd	r25, Y+8	; 0x08
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	91 05       	cpc	r25, r1
     ea6:	49 f1       	breq	.+82     	; 0xefa <DIO_u8SetPinValue+0x92>
     ea8:	2f 81       	ldd	r18, Y+7	; 0x07
     eaa:	38 85       	ldd	r19, Y+8	; 0x08
     eac:	22 30       	cpi	r18, 0x02	; 2
     eae:	31 05       	cpc	r19, r1
     eb0:	2c f4       	brge	.+10     	; 0xebc <DIO_u8SetPinValue+0x54>
     eb2:	8f 81       	ldd	r24, Y+7	; 0x07
     eb4:	98 85       	ldd	r25, Y+8	; 0x08
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	61 f0       	breq	.+24     	; 0xed2 <DIO_u8SetPinValue+0x6a>
     eba:	5b c0       	rjmp	.+182    	; 0xf72 <DIO_u8SetPinValue+0x10a>
     ebc:	2f 81       	ldd	r18, Y+7	; 0x07
     ebe:	38 85       	ldd	r19, Y+8	; 0x08
     ec0:	22 30       	cpi	r18, 0x02	; 2
     ec2:	31 05       	cpc	r19, r1
     ec4:	71 f1       	breq	.+92     	; 0xf22 <DIO_u8SetPinValue+0xba>
     ec6:	8f 81       	ldd	r24, Y+7	; 0x07
     ec8:	98 85       	ldd	r25, Y+8	; 0x08
     eca:	83 30       	cpi	r24, 0x03	; 3
     ecc:	91 05       	cpc	r25, r1
     ece:	e9 f1       	breq	.+122    	; 0xf4a <DIO_u8SetPinValue+0xe2>
     ed0:	50 c0       	rjmp	.+160    	; 0xf72 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA:
				SET_BIT(PORTA_reg,Copy_u8Pin);
     ed2:	ab e3       	ldi	r26, 0x3B	; 59
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	eb e3       	ldi	r30, 0x3B	; 59
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_u8SetPinValue+0x88>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_u8SetPinValue+0x84>
     ef4:	84 2b       	or	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	b8 c0       	rjmp	.+368    	; 0x106a <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTB:
				SET_BIT(PORTB_reg,Copy_u8Pin);
     efa:	a8 e3       	ldi	r26, 0x38	; 56
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e8 e3       	ldi	r30, 0x38	; 56
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 2e       	mov	r0, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <DIO_u8SetPinValue+0xb0>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <DIO_u8SetPinValue+0xac>
     f1c:	84 2b       	or	r24, r20
     f1e:	8c 93       	st	X, r24
     f20:	a4 c0       	rjmp	.+328    	; 0x106a <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTC:
				SET_BIT(PORTC_reg,Copy_u8Pin);
     f22:	a5 e3       	ldi	r26, 0x35	; 53
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e5 e3       	ldi	r30, 0x35	; 53
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	48 2f       	mov	r20, r24
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 2e       	mov	r0, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <DIO_u8SetPinValue+0xd8>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	0a 94       	dec	r0
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <DIO_u8SetPinValue+0xd4>
     f44:	84 2b       	or	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	90 c0       	rjmp	.+288    	; 0x106a <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTD:
				SET_BIT(PORTD_reg,Copy_u8Pin);
     f4a:	a2 e3       	ldi	r26, 0x32	; 50
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e2 e3       	ldi	r30, 0x32	; 50
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_u8SetPinValue+0x100>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_u8SetPinValue+0xfc>
     f6c:	84 2b       	or	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	7c c0       	rjmp	.+248    	; 0x106a <DIO_u8SetPinValue+0x202>
				break;
			
				default:
				Local_u8ErrorState=1;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	79 c0       	rjmp	.+242    	; 0x106a <DIO_u8SetPinValue+0x202>
				break;
			}
		}
		else//value is 0 so we clear the bits
		{
			switch(Copy_u8Port)
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	3e 83       	std	Y+6, r19	; 0x06
     f80:	2d 83       	std	Y+5, r18	; 0x05
     f82:	8d 81       	ldd	r24, Y+5	; 0x05
     f84:	9e 81       	ldd	r25, Y+6	; 0x06
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	91 05       	cpc	r25, r1
     f8a:	59 f1       	breq	.+86     	; 0xfe2 <DIO_u8SetPinValue+0x17a>
     f8c:	2d 81       	ldd	r18, Y+5	; 0x05
     f8e:	3e 81       	ldd	r19, Y+6	; 0x06
     f90:	22 30       	cpi	r18, 0x02	; 2
     f92:	31 05       	cpc	r19, r1
     f94:	2c f4       	brge	.+10     	; 0xfa0 <DIO_u8SetPinValue+0x138>
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	9e 81       	ldd	r25, Y+6	; 0x06
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	69 f0       	breq	.+26     	; 0xfb8 <DIO_u8SetPinValue+0x150>
     f9e:	60 c0       	rjmp	.+192    	; 0x1060 <DIO_u8SetPinValue+0x1f8>
     fa0:	2d 81       	ldd	r18, Y+5	; 0x05
     fa2:	3e 81       	ldd	r19, Y+6	; 0x06
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	89 f1       	breq	.+98     	; 0x100c <DIO_u8SetPinValue+0x1a4>
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	9e 81       	ldd	r25, Y+6	; 0x06
     fae:	83 30       	cpi	r24, 0x03	; 3
     fb0:	91 05       	cpc	r25, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <DIO_u8SetPinValue+0x14e>
     fb4:	40 c0       	rjmp	.+128    	; 0x1036 <DIO_u8SetPinValue+0x1ce>
     fb6:	54 c0       	rjmp	.+168    	; 0x1060 <DIO_u8SetPinValue+0x1f8>
			{
				case DIO_u8PORTA:
				CLR_BIT(PORTA_reg,Copy_u8Pin);
     fb8:	ab e3       	ldi	r26, 0x3B	; 59
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	eb e3       	ldi	r30, 0x3B	; 59
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_u8SetPinValue+0x16e>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_u8SetPinValue+0x16a>
     fda:	80 95       	com	r24
     fdc:	84 23       	and	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	44 c0       	rjmp	.+136    	; 0x106a <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTB:
				CLR_BIT(PORTB_reg,Copy_u8Pin);
     fe2:	a8 e3       	ldi	r26, 0x38	; 56
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e8 e3       	ldi	r30, 0x38	; 56
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_u8SetPinValue+0x198>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_u8SetPinValue+0x194>
    1004:	80 95       	com	r24
    1006:	84 23       	and	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	2f c0       	rjmp	.+94     	; 0x106a <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTC:
				CLR_BIT(PORTC_reg,Copy_u8Pin);
    100c:	a5 e3       	ldi	r26, 0x35	; 53
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e5 e3       	ldi	r30, 0x35	; 53
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <DIO_u8SetPinValue+0x1c2>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <DIO_u8SetPinValue+0x1be>
    102e:	80 95       	com	r24
    1030:	84 23       	and	r24, r20
    1032:	8c 93       	st	X, r24
    1034:	1a c0       	rjmp	.+52     	; 0x106a <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTD:
				CLR_BIT(PORTD_reg,Copy_u8Pin);
    1036:	a2 e3       	ldi	r26, 0x32	; 50
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e2 e3       	ldi	r30, 0x32	; 50
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_u8SetPinValue+0x1ec>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_u8SetPinValue+0x1e8>
    1058:	80 95       	com	r24
    105a:	84 23       	and	r24, r20
    105c:	8c 93       	st	X, r24
    105e:	05 c0       	rjmp	.+10     	; 0x106a <DIO_u8SetPinValue+0x202>
				break;
				
				default:
				Local_u8ErrorState=1;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_u8SetPinValue+0x202>
			}
		}
	}
	else //incorrect input
	{
		Local_u8ErrorState=1;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	89 83       	std	Y+1, r24	; 0x01
	}	
	return Local_u8ErrorState;
    106a:	89 81       	ldd	r24, Y+1	; 0x01
}
    106c:	28 96       	adiw	r28, 0x08	; 8
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <DIO_u8SetPortValue>:
/******************************************************************************/
/***********************Setting port value*************************************/
/******************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port ,u8 Copy_u8Value)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <DIO_u8SetPortValue+0x6>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <DIO_u8SetPortValue+0x8>
    1086:	0f 92       	push	r0
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	8a 83       	std	Y+2, r24	; 0x02
    108e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;//error state initially zero
    1090:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	3d 83       	std	Y+5, r19	; 0x05
    109a:	2c 83       	std	Y+4, r18	; 0x04
    109c:	8c 81       	ldd	r24, Y+4	; 0x04
    109e:	9d 81       	ldd	r25, Y+5	; 0x05
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	91 05       	cpc	r25, r1
    10a4:	d1 f0       	breq	.+52     	; 0x10da <DIO_u8SetPortValue+0x5c>
    10a6:	2c 81       	ldd	r18, Y+4	; 0x04
    10a8:	3d 81       	ldd	r19, Y+5	; 0x05
    10aa:	22 30       	cpi	r18, 0x02	; 2
    10ac:	31 05       	cpc	r19, r1
    10ae:	2c f4       	brge	.+10     	; 0x10ba <DIO_u8SetPortValue+0x3c>
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	9d 81       	ldd	r25, Y+5	; 0x05
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	61 f0       	breq	.+24     	; 0x10d0 <DIO_u8SetPortValue+0x52>
    10b8:	1f c0       	rjmp	.+62     	; 0x10f8 <DIO_u8SetPortValue+0x7a>
    10ba:	2c 81       	ldd	r18, Y+4	; 0x04
    10bc:	3d 81       	ldd	r19, Y+5	; 0x05
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	81 f0       	breq	.+32     	; 0x10e4 <DIO_u8SetPortValue+0x66>
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	9d 81       	ldd	r25, Y+5	; 0x05
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	91 05       	cpc	r25, r1
    10cc:	81 f0       	breq	.+32     	; 0x10ee <DIO_u8SetPortValue+0x70>
    10ce:	14 c0       	rjmp	.+40     	; 0x10f8 <DIO_u8SetPortValue+0x7a>
		{
			case DIO_u8PORTA:
			PORTA_reg=Copy_u8Value;
    10d0:	eb e3       	ldi	r30, 0x3B	; 59
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	80 83       	st	Z, r24
    10d8:	11 c0       	rjmp	.+34     	; 0x10fc <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTB:
			PORTB_reg=Copy_u8Value;
    10da:	e8 e3       	ldi	r30, 0x38	; 56
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	80 83       	st	Z, r24
    10e2:	0c c0       	rjmp	.+24     	; 0x10fc <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTC:
			PORTC_reg=Copy_u8Value;
    10e4:	e5 e3       	ldi	r30, 0x35	; 53
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	80 83       	st	Z, r24
    10ec:	07 c0       	rjmp	.+14     	; 0x10fc <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTD:
			PORTD_reg=Copy_u8Value;
    10ee:	e2 e3       	ldi	r30, 0x32	; 50
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	80 83       	st	Z, r24
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_u8SetPortValue+0x7e>
			break;
			
			default:
			Local_u8ErrorState=1;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_u8ErrorState;//incorrect input
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <DIO_u8GetPinValue>:
/******************************************************************************/
/***********************Getting PIN value**************************************/
/******************************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	27 97       	sbiw	r28, 0x07	; 7
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	8a 83       	std	Y+2, r24	; 0x02
    1124:	6b 83       	std	Y+3, r22	; 0x03
    1126:	5d 83       	std	Y+5, r21	; 0x05
    1128:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially zero
    112a:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL)&&Copy_u8Pin<=DIO_u8PIN_7)//check if ptr not null and correct input pin
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	9d 81       	ldd	r25, Y+5	; 0x05
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	09 f4       	brne	.+2      	; 0x1136 <DIO_u8GetPinValue+0x28>
    1134:	78 c0       	rjmp	.+240    	; 0x1226 <DIO_u8GetPinValue+0x118>
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	88 30       	cpi	r24, 0x08	; 8
    113a:	08 f0       	brcs	.+2      	; 0x113e <DIO_u8GetPinValue+0x30>
    113c:	74 c0       	rjmp	.+232    	; 0x1226 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	3f 83       	std	Y+7, r19	; 0x07
    1146:	2e 83       	std	Y+6, r18	; 0x06
    1148:	4e 81       	ldd	r20, Y+6	; 0x06
    114a:	5f 81       	ldd	r21, Y+7	; 0x07
    114c:	41 30       	cpi	r20, 0x01	; 1
    114e:	51 05       	cpc	r21, r1
    1150:	59 f1       	breq	.+86     	; 0x11a8 <DIO_u8GetPinValue+0x9a>
    1152:	8e 81       	ldd	r24, Y+6	; 0x06
    1154:	9f 81       	ldd	r25, Y+7	; 0x07
    1156:	82 30       	cpi	r24, 0x02	; 2
    1158:	91 05       	cpc	r25, r1
    115a:	34 f4       	brge	.+12     	; 0x1168 <DIO_u8GetPinValue+0x5a>
    115c:	2e 81       	ldd	r18, Y+6	; 0x06
    115e:	3f 81       	ldd	r19, Y+7	; 0x07
    1160:	21 15       	cp	r18, r1
    1162:	31 05       	cpc	r19, r1
    1164:	69 f0       	breq	.+26     	; 0x1180 <DIO_u8GetPinValue+0x72>
    1166:	5c c0       	rjmp	.+184    	; 0x1220 <DIO_u8GetPinValue+0x112>
    1168:	4e 81       	ldd	r20, Y+6	; 0x06
    116a:	5f 81       	ldd	r21, Y+7	; 0x07
    116c:	42 30       	cpi	r20, 0x02	; 2
    116e:	51 05       	cpc	r21, r1
    1170:	79 f1       	breq	.+94     	; 0x11d0 <DIO_u8GetPinValue+0xc2>
    1172:	8e 81       	ldd	r24, Y+6	; 0x06
    1174:	9f 81       	ldd	r25, Y+7	; 0x07
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	91 05       	cpc	r25, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <DIO_u8GetPinValue+0x70>
    117c:	3d c0       	rjmp	.+122    	; 0x11f8 <DIO_u8GetPinValue+0xea>
    117e:	50 c0       	rjmp	.+160    	; 0x1220 <DIO_u8GetPinValue+0x112>
		{
			case DIO_u8PORTA:
			*Copy_pu8Value=GET_BIT(PINA_reg,Copy_u8Pin);
    1180:	e9 e3       	ldi	r30, 0x39	; 57
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a9 01       	movw	r20, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_u8GetPinValue+0x8a>
    1194:	55 95       	asr	r21
    1196:	47 95       	ror	r20
    1198:	8a 95       	dec	r24
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <DIO_u8GetPinValue+0x86>
    119c:	ca 01       	movw	r24, r20
    119e:	81 70       	andi	r24, 0x01	; 1
    11a0:	ec 81       	ldd	r30, Y+4	; 0x04
    11a2:	fd 81       	ldd	r31, Y+5	; 0x05
    11a4:	80 83       	st	Z, r24
    11a6:	41 c0       	rjmp	.+130    	; 0x122a <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTB:
			*Copy_pu8Value=GET_BIT(PINB_reg,Copy_u8Pin);
    11a8:	e6 e3       	ldi	r30, 0x36	; 54
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a9 01       	movw	r20, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_u8GetPinValue+0xb2>
    11bc:	55 95       	asr	r21
    11be:	47 95       	ror	r20
    11c0:	8a 95       	dec	r24
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_u8GetPinValue+0xae>
    11c4:	ca 01       	movw	r24, r20
    11c6:	81 70       	andi	r24, 0x01	; 1
    11c8:	ec 81       	ldd	r30, Y+4	; 0x04
    11ca:	fd 81       	ldd	r31, Y+5	; 0x05
    11cc:	80 83       	st	Z, r24
    11ce:	2d c0       	rjmp	.+90     	; 0x122a <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTC:
			*Copy_pu8Value=GET_BIT(PINC_reg,Copy_u8Pin);
    11d0:	e3 e3       	ldi	r30, 0x33	; 51
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a9 01       	movw	r20, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_u8GetPinValue+0xda>
    11e4:	55 95       	asr	r21
    11e6:	47 95       	ror	r20
    11e8:	8a 95       	dec	r24
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_u8GetPinValue+0xd6>
    11ec:	ca 01       	movw	r24, r20
    11ee:	81 70       	andi	r24, 0x01	; 1
    11f0:	ec 81       	ldd	r30, Y+4	; 0x04
    11f2:	fd 81       	ldd	r31, Y+5	; 0x05
    11f4:	80 83       	st	Z, r24
    11f6:	19 c0       	rjmp	.+50     	; 0x122a <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTD:
			*Copy_pu8Value=GET_BIT(PIND_reg,Copy_u8Pin);
    11f8:	e0 e3       	ldi	r30, 0x30	; 48
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	a9 01       	movw	r20, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_u8GetPinValue+0x102>
    120c:	55 95       	asr	r21
    120e:	47 95       	ror	r20
    1210:	8a 95       	dec	r24
    1212:	e2 f7       	brpl	.-8      	; 0x120c <DIO_u8GetPinValue+0xfe>
    1214:	ca 01       	movw	r24, r20
    1216:	81 70       	andi	r24, 0x01	; 1
    1218:	ec 81       	ldd	r30, Y+4	; 0x04
    121a:	fd 81       	ldd	r31, Y+5	; 0x05
    121c:	80 83       	st	Z, r24
    121e:	05 c0       	rjmp	.+10     	; 0x122a <DIO_u8GetPinValue+0x11c>
			break;
			
			default:
			Local_u8ErrorState=1;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_u8GetPinValue+0x11c>
			break;
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	27 96       	adiw	r28, 0x07	; 7
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <LED_u8TurnON>:

/*****************************************************************/
/**************************TURN ON********************************/
/*****************************************************************/
u8 LED_u8TurnON(LED_t *ptrStructLEDn)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	27 97       	sbiw	r28, 0x07	; 7
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	9b 83       	std	Y+3, r25	; 0x03
    1254:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
    1256:	19 82       	std	Y+1, r1	; 0x01
	
	if((ptrStructLEDn->LED_u8Pin)<=DIO_u8PIN_7)
    1258:	ea 81       	ldd	r30, Y+2	; 0x02
    125a:	fb 81       	ldd	r31, Y+3	; 0x03
    125c:	81 81       	ldd	r24, Z+1	; 0x01
    125e:	88 30       	cpi	r24, 0x08	; 8
    1260:	08 f0       	brcs	.+2      	; 0x1264 <LED_u8TurnON+0x26>
    1262:	df c0       	rjmp	.+446    	; 0x1422 <LED_u8TurnON+0x1e4>
	{
		if((ptrStructLEDn->LED_u8Conn)==LED_u8ConnSource)
    1264:	ea 81       	ldd	r30, Y+2	; 0x02
    1266:	fb 81       	ldd	r31, Y+3	; 0x03
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	09 f0       	breq	.+2      	; 0x1270 <LED_u8TurnON+0x32>
    126e:	68 c0       	rjmp	.+208    	; 0x1340 <LED_u8TurnON+0x102>
		{	switch(ptrStructLEDn->LED_u8Port)
    1270:	ea 81       	ldd	r30, Y+2	; 0x02
    1272:	fb 81       	ldd	r31, Y+3	; 0x03
    1274:	80 81       	ld	r24, Z
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3f 83       	std	Y+7, r19	; 0x07
    127c:	2e 83       	std	Y+6, r18	; 0x06
    127e:	8e 81       	ldd	r24, Y+6	; 0x06
    1280:	9f 81       	ldd	r25, Y+7	; 0x07
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	91 05       	cpc	r25, r1
    1286:	31 f1       	breq	.+76     	; 0x12d4 <LED_u8TurnON+0x96>
    1288:	2e 81       	ldd	r18, Y+6	; 0x06
    128a:	3f 81       	ldd	r19, Y+7	; 0x07
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	31 05       	cpc	r19, r1
    1290:	2c f4       	brge	.+10     	; 0x129c <LED_u8TurnON+0x5e>
    1292:	8e 81       	ldd	r24, Y+6	; 0x06
    1294:	9f 81       	ldd	r25, Y+7	; 0x07
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	61 f0       	breq	.+24     	; 0x12b2 <LED_u8TurnON+0x74>
    129a:	4f c0       	rjmp	.+158    	; 0x133a <LED_u8TurnON+0xfc>
    129c:	2e 81       	ldd	r18, Y+6	; 0x06
    129e:	3f 81       	ldd	r19, Y+7	; 0x07
    12a0:	22 30       	cpi	r18, 0x02	; 2
    12a2:	31 05       	cpc	r19, r1
    12a4:	41 f1       	breq	.+80     	; 0x12f6 <LED_u8TurnON+0xb8>
    12a6:	8e 81       	ldd	r24, Y+6	; 0x06
    12a8:	9f 81       	ldd	r25, Y+7	; 0x07
    12aa:	83 30       	cpi	r24, 0x03	; 3
    12ac:	91 05       	cpc	r25, r1
    12ae:	a1 f1       	breq	.+104    	; 0x1318 <LED_u8TurnON+0xda>
    12b0:	44 c0       	rjmp	.+136    	; 0x133a <LED_u8TurnON+0xfc>
			{
				case DIO_u8PORTA:
				DIO_u8SetPinDirection(DIO_u8PORTA,(ptrStructLEDn->LED_u8Pin),DIO_u8OUTPUT);//set PIN to output
    12b2:	ea 81       	ldd	r30, Y+2	; 0x02
    12b4:	fb 81       	ldd	r31, Y+3	; 0x03
    12b6:	91 81       	ldd	r25, Z+1	; 0x01
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	69 2f       	mov	r22, r25
    12bc:	41 e0       	ldi	r20, 0x01	; 1
    12be:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTA,(ptrStructLEDn->LED_u8Pin),DIO_u8HIGH);
    12c2:	ea 81       	ldd	r30, Y+2	; 0x02
    12c4:	fb 81       	ldd	r31, Y+3	; 0x03
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	69 2f       	mov	r22, r25
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    12d2:	a9 c0       	rjmp	.+338    	; 0x1426 <LED_u8TurnON+0x1e8>
				break;
				
				case DIO_u8PORTB:
				DIO_u8SetPinDirection(DIO_u8PORTB,(ptrStructLEDn->LED_u8Pin),DIO_u8OUTPUT);//set PIN to output
    12d4:	ea 81       	ldd	r30, Y+2	; 0x02
    12d6:	fb 81       	ldd	r31, Y+3	; 0x03
    12d8:	91 81       	ldd	r25, Z+1	; 0x01
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	69 2f       	mov	r22, r25
    12de:	41 e0       	ldi	r20, 0x01	; 1
    12e0:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTB,(ptrStructLEDn->LED_u8Pin),DIO_u8HIGH);
    12e4:	ea 81       	ldd	r30, Y+2	; 0x02
    12e6:	fb 81       	ldd	r31, Y+3	; 0x03
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	69 2f       	mov	r22, r25
    12ee:	41 e0       	ldi	r20, 0x01	; 1
    12f0:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    12f4:	98 c0       	rjmp	.+304    	; 0x1426 <LED_u8TurnON+0x1e8>
				break;
				
				case DIO_u8PORTC:
				DIO_u8SetPinDirection(DIO_u8PORTC,(ptrStructLEDn->LED_u8Pin),DIO_u8OUTPUT);//set PIN to output
    12f6:	ea 81       	ldd	r30, Y+2	; 0x02
    12f8:	fb 81       	ldd	r31, Y+3	; 0x03
    12fa:	91 81       	ldd	r25, Z+1	; 0x01
    12fc:	82 e0       	ldi	r24, 0x02	; 2
    12fe:	69 2f       	mov	r22, r25
    1300:	41 e0       	ldi	r20, 0x01	; 1
    1302:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTC,(ptrStructLEDn->LED_u8Pin),DIO_u8HIGH);
    1306:	ea 81       	ldd	r30, Y+2	; 0x02
    1308:	fb 81       	ldd	r31, Y+3	; 0x03
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	69 2f       	mov	r22, r25
    1310:	41 e0       	ldi	r20, 0x01	; 1
    1312:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1316:	87 c0       	rjmp	.+270    	; 0x1426 <LED_u8TurnON+0x1e8>
				break;
				
				case DIO_u8PORTD:
				DIO_u8SetPinDirection(DIO_u8PORTD,(ptrStructLEDn->LED_u8Pin),DIO_u8OUTPUT);//set PIN to output
    1318:	ea 81       	ldd	r30, Y+2	; 0x02
    131a:	fb 81       	ldd	r31, Y+3	; 0x03
    131c:	91 81       	ldd	r25, Z+1	; 0x01
    131e:	83 e0       	ldi	r24, 0x03	; 3
    1320:	69 2f       	mov	r22, r25
    1322:	41 e0       	ldi	r20, 0x01	; 1
    1324:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTD,(ptrStructLEDn->LED_u8Pin),DIO_u8HIGH);
    1328:	ea 81       	ldd	r30, Y+2	; 0x02
    132a:	fb 81       	ldd	r31, Y+3	; 0x03
    132c:	91 81       	ldd	r25, Z+1	; 0x01
    132e:	83 e0       	ldi	r24, 0x03	; 3
    1330:	69 2f       	mov	r22, r25
    1332:	41 e0       	ldi	r20, 0x01	; 1
    1334:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1338:	76 c0       	rjmp	.+236    	; 0x1426 <LED_u8TurnON+0x1e8>
				break;
				
				default://Port argument error
				Local_u8ErrorState=1;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	73 c0       	rjmp	.+230    	; 0x1426 <LED_u8TurnON+0x1e8>
			}
		}
		else if((ptrStructLEDn->LED_u8Conn)==LED_u8ConnSink)
    1340:	ea 81       	ldd	r30, Y+2	; 0x02
    1342:	fb 81       	ldd	r31, Y+3	; 0x03
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	88 23       	and	r24, r24
    1348:	09 f0       	breq	.+2      	; 0x134c <LED_u8TurnON+0x10e>
    134a:	68 c0       	rjmp	.+208    	; 0x141c <LED_u8TurnON+0x1de>
		{
			switch(ptrStructLEDn->LED_u8Port)
    134c:	ea 81       	ldd	r30, Y+2	; 0x02
    134e:	fb 81       	ldd	r31, Y+3	; 0x03
    1350:	80 81       	ld	r24, Z
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	3d 83       	std	Y+5, r19	; 0x05
    1358:	2c 83       	std	Y+4, r18	; 0x04
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	9d 81       	ldd	r25, Y+5	; 0x05
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	91 05       	cpc	r25, r1
    1362:	31 f1       	breq	.+76     	; 0x13b0 <LED_u8TurnON+0x172>
    1364:	2c 81       	ldd	r18, Y+4	; 0x04
    1366:	3d 81       	ldd	r19, Y+5	; 0x05
    1368:	22 30       	cpi	r18, 0x02	; 2
    136a:	31 05       	cpc	r19, r1
    136c:	2c f4       	brge	.+10     	; 0x1378 <LED_u8TurnON+0x13a>
    136e:	8c 81       	ldd	r24, Y+4	; 0x04
    1370:	9d 81       	ldd	r25, Y+5	; 0x05
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	61 f0       	breq	.+24     	; 0x138e <LED_u8TurnON+0x150>
    1376:	4f c0       	rjmp	.+158    	; 0x1416 <LED_u8TurnON+0x1d8>
    1378:	2c 81       	ldd	r18, Y+4	; 0x04
    137a:	3d 81       	ldd	r19, Y+5	; 0x05
    137c:	22 30       	cpi	r18, 0x02	; 2
    137e:	31 05       	cpc	r19, r1
    1380:	41 f1       	breq	.+80     	; 0x13d2 <LED_u8TurnON+0x194>
    1382:	8c 81       	ldd	r24, Y+4	; 0x04
    1384:	9d 81       	ldd	r25, Y+5	; 0x05
    1386:	83 30       	cpi	r24, 0x03	; 3
    1388:	91 05       	cpc	r25, r1
    138a:	a1 f1       	breq	.+104    	; 0x13f4 <LED_u8TurnON+0x1b6>
    138c:	44 c0       	rjmp	.+136    	; 0x1416 <LED_u8TurnON+0x1d8>
			{
				case DIO_u8PORTA:
				DIO_u8SetPinDirection(DIO_u8PORTA,(ptrStructLEDn->LED_u8Pin),DIO_u8OUTPUT);//set PIN to output
    138e:	ea 81       	ldd	r30, Y+2	; 0x02
    1390:	fb 81       	ldd	r31, Y+3	; 0x03
    1392:	91 81       	ldd	r25, Z+1	; 0x01
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	69 2f       	mov	r22, r25
    1398:	41 e0       	ldi	r20, 0x01	; 1
    139a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTA,(ptrStructLEDn->LED_u8Pin),DIO_u8LOW);
    139e:	ea 81       	ldd	r30, Y+2	; 0x02
    13a0:	fb 81       	ldd	r31, Y+3	; 0x03
    13a2:	91 81       	ldd	r25, Z+1	; 0x01
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	69 2f       	mov	r22, r25
    13a8:	40 e0       	ldi	r20, 0x00	; 0
    13aa:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    13ae:	3b c0       	rjmp	.+118    	; 0x1426 <LED_u8TurnON+0x1e8>
				break;
				
				case DIO_u8PORTB:
				DIO_u8SetPinDirection(DIO_u8PORTB,(ptrStructLEDn->LED_u8Pin),DIO_u8OUTPUT);//set PIN to output
    13b0:	ea 81       	ldd	r30, Y+2	; 0x02
    13b2:	fb 81       	ldd	r31, Y+3	; 0x03
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	69 2f       	mov	r22, r25
    13ba:	41 e0       	ldi	r20, 0x01	; 1
    13bc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTB,(ptrStructLEDn->LED_u8Pin),DIO_u8LOW);
    13c0:	ea 81       	ldd	r30, Y+2	; 0x02
    13c2:	fb 81       	ldd	r31, Y+3	; 0x03
    13c4:	91 81       	ldd	r25, Z+1	; 0x01
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	69 2f       	mov	r22, r25
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    13d0:	2a c0       	rjmp	.+84     	; 0x1426 <LED_u8TurnON+0x1e8>
				break;
				
				case DIO_u8PORTC:
				DIO_u8SetPinDirection(DIO_u8PORTC,(ptrStructLEDn->LED_u8Pin),DIO_u8OUTPUT);//set PIN to output
    13d2:	ea 81       	ldd	r30, Y+2	; 0x02
    13d4:	fb 81       	ldd	r31, Y+3	; 0x03
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	82 e0       	ldi	r24, 0x02	; 2
    13da:	69 2f       	mov	r22, r25
    13dc:	41 e0       	ldi	r20, 0x01	; 1
    13de:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTC,(ptrStructLEDn->LED_u8Pin),DIO_u8LOW);
    13e2:	ea 81       	ldd	r30, Y+2	; 0x02
    13e4:	fb 81       	ldd	r31, Y+3	; 0x03
    13e6:	91 81       	ldd	r25, Z+1	; 0x01
    13e8:	82 e0       	ldi	r24, 0x02	; 2
    13ea:	69 2f       	mov	r22, r25
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    13f2:	19 c0       	rjmp	.+50     	; 0x1426 <LED_u8TurnON+0x1e8>
				break;
				
				case DIO_u8PORTD:
				DIO_u8SetPinDirection(DIO_u8PORTD,(ptrStructLEDn->LED_u8Pin),DIO_u8OUTPUT);//set PIN to output
    13f4:	ea 81       	ldd	r30, Y+2	; 0x02
    13f6:	fb 81       	ldd	r31, Y+3	; 0x03
    13f8:	91 81       	ldd	r25, Z+1	; 0x01
    13fa:	83 e0       	ldi	r24, 0x03	; 3
    13fc:	69 2f       	mov	r22, r25
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTD,(ptrStructLEDn->LED_u8Pin),DIO_u8LOW);
    1404:	ea 81       	ldd	r30, Y+2	; 0x02
    1406:	fb 81       	ldd	r31, Y+3	; 0x03
    1408:	91 81       	ldd	r25, Z+1	; 0x01
    140a:	83 e0       	ldi	r24, 0x03	; 3
    140c:	69 2f       	mov	r22, r25
    140e:	40 e0       	ldi	r20, 0x00	; 0
    1410:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1414:	08 c0       	rjmp	.+16     	; 0x1426 <LED_u8TurnON+0x1e8>
				break;
				
				default://Port argument error
				Local_u8ErrorState=1;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <LED_u8TurnON+0x1e8>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <LED_u8TurnON+0x1e8>
		}
	}
	else
	{
		Local_u8ErrorState=1;//input argument error
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_u8ErrorState;
    1426:	89 81       	ldd	r24, Y+1	; 0x01
}
    1428:	27 96       	adiw	r28, 0x07	; 7
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <LED_u8TurnOFF>:

/*****************************************************************/
/**************************TURN OFF*******************************/
/*****************************************************************/
u8 LED_u8TurnOFF(LED_t *ptrStructLEDn)
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	27 97       	sbiw	r28, 0x07	; 7
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	9b 83       	std	Y+3, r25	; 0x03
    1450:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
    1452:	19 82       	std	Y+1, r1	; 0x01
	
	if((ptrStructLEDn->LED_u8Pin)<=DIO_u8PIN_7)
    1454:	ea 81       	ldd	r30, Y+2	; 0x02
    1456:	fb 81       	ldd	r31, Y+3	; 0x03
    1458:	81 81       	ldd	r24, Z+1	; 0x01
    145a:	88 30       	cpi	r24, 0x08	; 8
    145c:	08 f0       	brcs	.+2      	; 0x1460 <LED_u8TurnOFF+0x26>
    145e:	df c0       	rjmp	.+446    	; 0x161e <LED_u8TurnOFF+0x1e4>
	{
		if((ptrStructLEDn->LED_u8Conn)==LED_u8ConnSource)
    1460:	ea 81       	ldd	r30, Y+2	; 0x02
    1462:	fb 81       	ldd	r31, Y+3	; 0x03
    1464:	82 81       	ldd	r24, Z+2	; 0x02
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	09 f0       	breq	.+2      	; 0x146c <LED_u8TurnOFF+0x32>
    146a:	68 c0       	rjmp	.+208    	; 0x153c <LED_u8TurnOFF+0x102>
		{	switch(ptrStructLEDn->LED_u8Port)
    146c:	ea 81       	ldd	r30, Y+2	; 0x02
    146e:	fb 81       	ldd	r31, Y+3	; 0x03
    1470:	80 81       	ld	r24, Z
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3f 83       	std	Y+7, r19	; 0x07
    1478:	2e 83       	std	Y+6, r18	; 0x06
    147a:	8e 81       	ldd	r24, Y+6	; 0x06
    147c:	9f 81       	ldd	r25, Y+7	; 0x07
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	91 05       	cpc	r25, r1
    1482:	31 f1       	breq	.+76     	; 0x14d0 <LED_u8TurnOFF+0x96>
    1484:	2e 81       	ldd	r18, Y+6	; 0x06
    1486:	3f 81       	ldd	r19, Y+7	; 0x07
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	2c f4       	brge	.+10     	; 0x1498 <LED_u8TurnOFF+0x5e>
    148e:	8e 81       	ldd	r24, Y+6	; 0x06
    1490:	9f 81       	ldd	r25, Y+7	; 0x07
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	61 f0       	breq	.+24     	; 0x14ae <LED_u8TurnOFF+0x74>
    1496:	4f c0       	rjmp	.+158    	; 0x1536 <LED_u8TurnOFF+0xfc>
    1498:	2e 81       	ldd	r18, Y+6	; 0x06
    149a:	3f 81       	ldd	r19, Y+7	; 0x07
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	41 f1       	breq	.+80     	; 0x14f2 <LED_u8TurnOFF+0xb8>
    14a2:	8e 81       	ldd	r24, Y+6	; 0x06
    14a4:	9f 81       	ldd	r25, Y+7	; 0x07
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	91 05       	cpc	r25, r1
    14aa:	a1 f1       	breq	.+104    	; 0x1514 <LED_u8TurnOFF+0xda>
    14ac:	44 c0       	rjmp	.+136    	; 0x1536 <LED_u8TurnOFF+0xfc>
			{
				case DIO_u8PORTA:
				DIO_u8SetPinDirection(DIO_u8PORTA,(ptrStructLEDn->LED_u8Pin),DIO_u8OUTPUT);//set PIN to output
    14ae:	ea 81       	ldd	r30, Y+2	; 0x02
    14b0:	fb 81       	ldd	r31, Y+3	; 0x03
    14b2:	91 81       	ldd	r25, Z+1	; 0x01
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	69 2f       	mov	r22, r25
    14b8:	41 e0       	ldi	r20, 0x01	; 1
    14ba:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTA,(ptrStructLEDn->LED_u8Pin),DIO_u8LOW);
    14be:	ea 81       	ldd	r30, Y+2	; 0x02
    14c0:	fb 81       	ldd	r31, Y+3	; 0x03
    14c2:	91 81       	ldd	r25, Z+1	; 0x01
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	69 2f       	mov	r22, r25
    14c8:	40 e0       	ldi	r20, 0x00	; 0
    14ca:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    14ce:	a9 c0       	rjmp	.+338    	; 0x1622 <LED_u8TurnOFF+0x1e8>
				break;
				
				case DIO_u8PORTB:
				DIO_u8SetPinDirection(DIO_u8PORTB,(ptrStructLEDn->LED_u8Pin),DIO_u8OUTPUT);//set PIN to output
    14d0:	ea 81       	ldd	r30, Y+2	; 0x02
    14d2:	fb 81       	ldd	r31, Y+3	; 0x03
    14d4:	91 81       	ldd	r25, Z+1	; 0x01
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	69 2f       	mov	r22, r25
    14da:	41 e0       	ldi	r20, 0x01	; 1
    14dc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTB,(ptrStructLEDn->LED_u8Pin),DIO_u8LOW);
    14e0:	ea 81       	ldd	r30, Y+2	; 0x02
    14e2:	fb 81       	ldd	r31, Y+3	; 0x03
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	69 2f       	mov	r22, r25
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    14f0:	98 c0       	rjmp	.+304    	; 0x1622 <LED_u8TurnOFF+0x1e8>
				break;
				
				case DIO_u8PORTC:
				DIO_u8SetPinDirection(DIO_u8PORTC,(ptrStructLEDn->LED_u8Pin),DIO_u8OUTPUT);//set PIN to output
    14f2:	ea 81       	ldd	r30, Y+2	; 0x02
    14f4:	fb 81       	ldd	r31, Y+3	; 0x03
    14f6:	91 81       	ldd	r25, Z+1	; 0x01
    14f8:	82 e0       	ldi	r24, 0x02	; 2
    14fa:	69 2f       	mov	r22, r25
    14fc:	41 e0       	ldi	r20, 0x01	; 1
    14fe:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTC,(ptrStructLEDn->LED_u8Pin),DIO_u8LOW);
    1502:	ea 81       	ldd	r30, Y+2	; 0x02
    1504:	fb 81       	ldd	r31, Y+3	; 0x03
    1506:	91 81       	ldd	r25, Z+1	; 0x01
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	69 2f       	mov	r22, r25
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1512:	87 c0       	rjmp	.+270    	; 0x1622 <LED_u8TurnOFF+0x1e8>
				break;
				
				case DIO_u8PORTD:
				DIO_u8SetPinDirection(DIO_u8PORTD,(ptrStructLEDn->LED_u8Pin),DIO_u8OUTPUT);//set PIN to output
    1514:	ea 81       	ldd	r30, Y+2	; 0x02
    1516:	fb 81       	ldd	r31, Y+3	; 0x03
    1518:	91 81       	ldd	r25, Z+1	; 0x01
    151a:	83 e0       	ldi	r24, 0x03	; 3
    151c:	69 2f       	mov	r22, r25
    151e:	41 e0       	ldi	r20, 0x01	; 1
    1520:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTD,(ptrStructLEDn->LED_u8Pin),DIO_u8LOW);
    1524:	ea 81       	ldd	r30, Y+2	; 0x02
    1526:	fb 81       	ldd	r31, Y+3	; 0x03
    1528:	91 81       	ldd	r25, Z+1	; 0x01
    152a:	83 e0       	ldi	r24, 0x03	; 3
    152c:	69 2f       	mov	r22, r25
    152e:	40 e0       	ldi	r20, 0x00	; 0
    1530:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1534:	76 c0       	rjmp	.+236    	; 0x1622 <LED_u8TurnOFF+0x1e8>
				break;
				
				default://Port argument error
				Local_u8ErrorState=1;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	73 c0       	rjmp	.+230    	; 0x1622 <LED_u8TurnOFF+0x1e8>
			}
		}
		else if((ptrStructLEDn->LED_u8Conn)==LED_u8ConnSink)
    153c:	ea 81       	ldd	r30, Y+2	; 0x02
    153e:	fb 81       	ldd	r31, Y+3	; 0x03
    1540:	82 81       	ldd	r24, Z+2	; 0x02
    1542:	88 23       	and	r24, r24
    1544:	09 f0       	breq	.+2      	; 0x1548 <LED_u8TurnOFF+0x10e>
    1546:	68 c0       	rjmp	.+208    	; 0x1618 <LED_u8TurnOFF+0x1de>
		{
			switch(ptrStructLEDn->LED_u8Port)
    1548:	ea 81       	ldd	r30, Y+2	; 0x02
    154a:	fb 81       	ldd	r31, Y+3	; 0x03
    154c:	80 81       	ld	r24, Z
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3d 83       	std	Y+5, r19	; 0x05
    1554:	2c 83       	std	Y+4, r18	; 0x04
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	9d 81       	ldd	r25, Y+5	; 0x05
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	91 05       	cpc	r25, r1
    155e:	31 f1       	breq	.+76     	; 0x15ac <LED_u8TurnOFF+0x172>
    1560:	2c 81       	ldd	r18, Y+4	; 0x04
    1562:	3d 81       	ldd	r19, Y+5	; 0x05
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	2c f4       	brge	.+10     	; 0x1574 <LED_u8TurnOFF+0x13a>
    156a:	8c 81       	ldd	r24, Y+4	; 0x04
    156c:	9d 81       	ldd	r25, Y+5	; 0x05
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	61 f0       	breq	.+24     	; 0x158a <LED_u8TurnOFF+0x150>
    1572:	4f c0       	rjmp	.+158    	; 0x1612 <LED_u8TurnOFF+0x1d8>
    1574:	2c 81       	ldd	r18, Y+4	; 0x04
    1576:	3d 81       	ldd	r19, Y+5	; 0x05
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	41 f1       	breq	.+80     	; 0x15ce <LED_u8TurnOFF+0x194>
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	9d 81       	ldd	r25, Y+5	; 0x05
    1582:	83 30       	cpi	r24, 0x03	; 3
    1584:	91 05       	cpc	r25, r1
    1586:	a1 f1       	breq	.+104    	; 0x15f0 <LED_u8TurnOFF+0x1b6>
    1588:	44 c0       	rjmp	.+136    	; 0x1612 <LED_u8TurnOFF+0x1d8>
			{
				case DIO_u8PORTA:
				DIO_u8SetPinDirection(DIO_u8PORTA,(ptrStructLEDn->LED_u8Pin),DIO_u8OUTPUT);//set PIN to output
    158a:	ea 81       	ldd	r30, Y+2	; 0x02
    158c:	fb 81       	ldd	r31, Y+3	; 0x03
    158e:	91 81       	ldd	r25, Z+1	; 0x01
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	69 2f       	mov	r22, r25
    1594:	41 e0       	ldi	r20, 0x01	; 1
    1596:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTA,(ptrStructLEDn->LED_u8Pin),DIO_u8HIGH);
    159a:	ea 81       	ldd	r30, Y+2	; 0x02
    159c:	fb 81       	ldd	r31, Y+3	; 0x03
    159e:	91 81       	ldd	r25, Z+1	; 0x01
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	69 2f       	mov	r22, r25
    15a4:	41 e0       	ldi	r20, 0x01	; 1
    15a6:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    15aa:	3b c0       	rjmp	.+118    	; 0x1622 <LED_u8TurnOFF+0x1e8>
				break;
				
				case DIO_u8PORTB:
				DIO_u8SetPinDirection(DIO_u8PORTB,(ptrStructLEDn->LED_u8Pin),DIO_u8OUTPUT);//set PIN to output
    15ac:	ea 81       	ldd	r30, Y+2	; 0x02
    15ae:	fb 81       	ldd	r31, Y+3	; 0x03
    15b0:	91 81       	ldd	r25, Z+1	; 0x01
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	69 2f       	mov	r22, r25
    15b6:	41 e0       	ldi	r20, 0x01	; 1
    15b8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTB,(ptrStructLEDn->LED_u8Pin),DIO_u8HIGH);
    15bc:	ea 81       	ldd	r30, Y+2	; 0x02
    15be:	fb 81       	ldd	r31, Y+3	; 0x03
    15c0:	91 81       	ldd	r25, Z+1	; 0x01
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	69 2f       	mov	r22, r25
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    15cc:	2a c0       	rjmp	.+84     	; 0x1622 <LED_u8TurnOFF+0x1e8>
				break;
				
				case DIO_u8PORTC:
				DIO_u8SetPinDirection(DIO_u8PORTC,(ptrStructLEDn->LED_u8Pin),DIO_u8OUTPUT);//set PIN to output
    15ce:	ea 81       	ldd	r30, Y+2	; 0x02
    15d0:	fb 81       	ldd	r31, Y+3	; 0x03
    15d2:	91 81       	ldd	r25, Z+1	; 0x01
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	69 2f       	mov	r22, r25
    15d8:	41 e0       	ldi	r20, 0x01	; 1
    15da:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTC,(ptrStructLEDn->LED_u8Pin),DIO_u8HIGH);
    15de:	ea 81       	ldd	r30, Y+2	; 0x02
    15e0:	fb 81       	ldd	r31, Y+3	; 0x03
    15e2:	91 81       	ldd	r25, Z+1	; 0x01
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	69 2f       	mov	r22, r25
    15e8:	41 e0       	ldi	r20, 0x01	; 1
    15ea:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    15ee:	19 c0       	rjmp	.+50     	; 0x1622 <LED_u8TurnOFF+0x1e8>
				break;
				
				case DIO_u8PORTD:
				DIO_u8SetPinDirection(DIO_u8PORTD,(ptrStructLEDn->LED_u8Pin),DIO_u8OUTPUT);//set PIN to output
    15f0:	ea 81       	ldd	r30, Y+2	; 0x02
    15f2:	fb 81       	ldd	r31, Y+3	; 0x03
    15f4:	91 81       	ldd	r25, Z+1	; 0x01
    15f6:	83 e0       	ldi	r24, 0x03	; 3
    15f8:	69 2f       	mov	r22, r25
    15fa:	41 e0       	ldi	r20, 0x01	; 1
    15fc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTD,(ptrStructLEDn->LED_u8Pin),DIO_u8HIGH);
    1600:	ea 81       	ldd	r30, Y+2	; 0x02
    1602:	fb 81       	ldd	r31, Y+3	; 0x03
    1604:	91 81       	ldd	r25, Z+1	; 0x01
    1606:	83 e0       	ldi	r24, 0x03	; 3
    1608:	69 2f       	mov	r22, r25
    160a:	41 e0       	ldi	r20, 0x01	; 1
    160c:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1610:	08 c0       	rjmp	.+16     	; 0x1622 <LED_u8TurnOFF+0x1e8>
				break;
				
				default://Port argument error
				Local_u8ErrorState=1;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	05 c0       	rjmp	.+10     	; 0x1622 <LED_u8TurnOFF+0x1e8>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <LED_u8TurnOFF+0x1e8>
		}
	}
	else
	{
		Local_u8ErrorState=1;//input argument error
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_u8ErrorState;	
    1622:	89 81       	ldd	r24, Y+1	; 0x01
}
    1624:	27 96       	adiw	r28, 0x07	; 7
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <SSD_u8ShowNumber>:
#include "STD_TYPES.h"
#include "DIO_interface.h"
#include "SSD_interface.h"

u8 SSD_u8ShowNumber(SSD_t* pstruct_SSDn,u8 SSD_u8Number)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	6b 97       	sbiw	r28, 0x1b	; 27
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	9d 87       	std	Y+13, r25	; 0x0d
    164c:	8c 87       	std	Y+12, r24	; 0x0c
    164e:	6e 87       	std	Y+14, r22	; 0x0e
	u8 Local_u8ErrorState=0;
    1650:	19 82       	std	Y+1, r1	; 0x01
	if(((pstruct_SSDn->SSD_u8EnablePin)<=DIO_u8PIN_7)&&SSD_u8Number<=9)
    1652:	ec 85       	ldd	r30, Y+12	; 0x0c
    1654:	fd 85       	ldd	r31, Y+13	; 0x0d
    1656:	83 81       	ldd	r24, Z+3	; 0x03
    1658:	88 30       	cpi	r24, 0x08	; 8
    165a:	08 f0       	brcs	.+2      	; 0x165e <SSD_u8ShowNumber+0x28>
    165c:	e4 c1       	rjmp	.+968    	; 0x1a26 <SSD_u8ShowNumber+0x3f0>
    165e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1660:	8a 30       	cpi	r24, 0x0A	; 10
    1662:	08 f0       	brcs	.+2      	; 0x1666 <SSD_u8ShowNumber+0x30>
    1664:	e0 c1       	rjmp	.+960    	; 0x1a26 <SSD_u8ShowNumber+0x3f0>
	{
		//array used to show numbers FOR COMMON ANODE SSD
		u8 SSD_u8ArrNums[]={0b10100000,0b11111001,0b11000100,0b11010000,0b10011001,0b10010010,0b10000011,0b11111000,0b10000000,0b10011000};
    1666:	9e 01       	movw	r18, r28
    1668:	2e 5f       	subi	r18, 0xFE	; 254
    166a:	3f 4f       	sbci	r19, 0xFF	; 255
    166c:	38 8f       	std	Y+24, r19	; 0x18
    166e:	2f 8b       	std	Y+23, r18	; 0x17
    1670:	88 e6       	ldi	r24, 0x68	; 104
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	9a 8f       	std	Y+26, r25	; 0x1a
    1676:	89 8f       	std	Y+25, r24	; 0x19
    1678:	9a e0       	ldi	r25, 0x0A	; 10
    167a:	9b 8f       	std	Y+27, r25	; 0x1b
    167c:	e9 8d       	ldd	r30, Y+25	; 0x19
    167e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1680:	00 80       	ld	r0, Z
    1682:	29 8d       	ldd	r18, Y+25	; 0x19
    1684:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1686:	2f 5f       	subi	r18, 0xFF	; 255
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	3a 8f       	std	Y+26, r19	; 0x1a
    168c:	29 8f       	std	Y+25, r18	; 0x19
    168e:	ef 89       	ldd	r30, Y+23	; 0x17
    1690:	f8 8d       	ldd	r31, Y+24	; 0x18
    1692:	00 82       	st	Z, r0
    1694:	2f 89       	ldd	r18, Y+23	; 0x17
    1696:	38 8d       	ldd	r19, Y+24	; 0x18
    1698:	2f 5f       	subi	r18, 0xFF	; 255
    169a:	3f 4f       	sbci	r19, 0xFF	; 255
    169c:	38 8f       	std	Y+24, r19	; 0x18
    169e:	2f 8b       	std	Y+23, r18	; 0x17
    16a0:	3b 8d       	ldd	r19, Y+27	; 0x1b
    16a2:	31 50       	subi	r19, 0x01	; 1
    16a4:	3b 8f       	std	Y+27, r19	; 0x1b
    16a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a8:	88 23       	and	r24, r24
    16aa:	41 f7       	brne	.-48     	; 0x167c <SSD_u8ShowNumber+0x46>
		///////////////////////////////////////////////////////////////////////////////////////////////		
		///////////////////////////////////Common anode////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////
		if((pstruct_SSDn->SSD_u8Common)==SSD_u8CommonAnode)//for common anode
    16ac:	ec 85       	ldd	r30, Y+12	; 0x0c
    16ae:	fd 85       	ldd	r31, Y+13	; 0x0d
    16b0:	81 81       	ldd	r24, Z+1	; 0x01
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <SSD_u8ShowNumber+0x82>
    16b6:	d3 c0       	rjmp	.+422    	; 0x185e <SSD_u8ShowNumber+0x228>
		{
			///////////////////////////setting up enable pin /////////////////////////////////////
			switch(pstruct_SSDn->SSD_u8EnablePort)
    16b8:	ec 85       	ldd	r30, Y+12	; 0x0c
    16ba:	fd 85       	ldd	r31, Y+13	; 0x0d
    16bc:	82 81       	ldd	r24, Z+2	; 0x02
    16be:	e8 2f       	mov	r30, r24
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	fe 8b       	std	Y+22, r31	; 0x16
    16c4:	ed 8b       	std	Y+21, r30	; 0x15
    16c6:	2d 89       	ldd	r18, Y+21	; 0x15
    16c8:	3e 89       	ldd	r19, Y+22	; 0x16
    16ca:	21 30       	cpi	r18, 0x01	; 1
    16cc:	31 05       	cpc	r19, r1
    16ce:	31 f1       	breq	.+76     	; 0x171c <SSD_u8ShowNumber+0xe6>
    16d0:	8d 89       	ldd	r24, Y+21	; 0x15
    16d2:	9e 89       	ldd	r25, Y+22	; 0x16
    16d4:	82 30       	cpi	r24, 0x02	; 2
    16d6:	91 05       	cpc	r25, r1
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <SSD_u8ShowNumber+0xae>
    16da:	ed 89       	ldd	r30, Y+21	; 0x15
    16dc:	fe 89       	ldd	r31, Y+22	; 0x16
    16de:	30 97       	sbiw	r30, 0x00	; 0
    16e0:	61 f0       	breq	.+24     	; 0x16fa <SSD_u8ShowNumber+0xc4>
    16e2:	4f c0       	rjmp	.+158    	; 0x1782 <SSD_u8ShowNumber+0x14c>
    16e4:	2d 89       	ldd	r18, Y+21	; 0x15
    16e6:	3e 89       	ldd	r19, Y+22	; 0x16
    16e8:	22 30       	cpi	r18, 0x02	; 2
    16ea:	31 05       	cpc	r19, r1
    16ec:	41 f1       	breq	.+80     	; 0x173e <SSD_u8ShowNumber+0x108>
    16ee:	8d 89       	ldd	r24, Y+21	; 0x15
    16f0:	9e 89       	ldd	r25, Y+22	; 0x16
    16f2:	83 30       	cpi	r24, 0x03	; 3
    16f4:	91 05       	cpc	r25, r1
    16f6:	a1 f1       	breq	.+104    	; 0x1760 <SSD_u8ShowNumber+0x12a>
    16f8:	44 c0       	rjmp	.+136    	; 0x1782 <SSD_u8ShowNumber+0x14c>
			{
				case DIO_u8PORTA:
				DIO_u8SetPinDirection(DIO_u8PORTA,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8OUTPUT);//set enable pin to output
    16fa:	ec 85       	ldd	r30, Y+12	; 0x0c
    16fc:	fd 85       	ldd	r31, Y+13	; 0x0d
    16fe:	93 81       	ldd	r25, Z+3	; 0x03
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	69 2f       	mov	r22, r25
    1704:	41 e0       	ldi	r20, 0x01	; 1
    1706:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTA,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8HIGH);		//set enable pin to HIGH			
    170a:	ec 85       	ldd	r30, Y+12	; 0x0c
    170c:	fd 85       	ldd	r31, Y+13	; 0x0d
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	69 2f       	mov	r22, r25
    1714:	41 e0       	ldi	r20, 0x01	; 1
    1716:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    171a:	35 c0       	rjmp	.+106    	; 0x1786 <SSD_u8ShowNumber+0x150>
				break;
				
				case DIO_u8PORTB:
				DIO_u8SetPinDirection(DIO_u8PORTB,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8OUTPUT);//set enable pin to output
    171c:	ec 85       	ldd	r30, Y+12	; 0x0c
    171e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1720:	93 81       	ldd	r25, Z+3	; 0x03
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	69 2f       	mov	r22, r25
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTB,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8HIGH);		//set enable pin to HIGH	
    172c:	ec 85       	ldd	r30, Y+12	; 0x0c
    172e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1730:	93 81       	ldd	r25, Z+3	; 0x03
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	69 2f       	mov	r22, r25
    1736:	41 e0       	ldi	r20, 0x01	; 1
    1738:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    173c:	24 c0       	rjmp	.+72     	; 0x1786 <SSD_u8ShowNumber+0x150>
			
				break;
				
				case DIO_u8PORTC:
				DIO_u8SetPinDirection(DIO_u8PORTC,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8OUTPUT);//set enable pin to output
    173e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1740:	fd 85       	ldd	r31, Y+13	; 0x0d
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	69 2f       	mov	r22, r25
    1748:	41 e0       	ldi	r20, 0x01	; 1
    174a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTC,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8HIGH);		//set enable pin to HIGH	
    174e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1750:	fd 85       	ldd	r31, Y+13	; 0x0d
    1752:	93 81       	ldd	r25, Z+3	; 0x03
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	69 2f       	mov	r22, r25
    1758:	41 e0       	ldi	r20, 0x01	; 1
    175a:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    175e:	13 c0       	rjmp	.+38     	; 0x1786 <SSD_u8ShowNumber+0x150>
			
				break;
				
				case DIO_u8PORTD:
				DIO_u8SetPinDirection(DIO_u8PORTD,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8OUTPUT);//set enable pin to output
    1760:	ec 85       	ldd	r30, Y+12	; 0x0c
    1762:	fd 85       	ldd	r31, Y+13	; 0x0d
    1764:	93 81       	ldd	r25, Z+3	; 0x03
    1766:	83 e0       	ldi	r24, 0x03	; 3
    1768:	69 2f       	mov	r22, r25
    176a:	41 e0       	ldi	r20, 0x01	; 1
    176c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTD,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8HIGH);		//set enable pin to HIGH	
    1770:	ec 85       	ldd	r30, Y+12	; 0x0c
    1772:	fd 85       	ldd	r31, Y+13	; 0x0d
    1774:	93 81       	ldd	r25, Z+3	; 0x03
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	69 2f       	mov	r22, r25
    177a:	41 e0       	ldi	r20, 0x01	; 1
    177c:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <SSD_u8ShowNumber+0x150>
		
				break;
				
				default://error in enable port
				Local_u8ErrorState=1;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	89 83       	std	Y+1, r24	; 0x01
			}
			/////////////////////////////setting up output port ///////////////////////////////////////////
			switch(pstruct_SSDn->SSD_u8OutputPort)
    1786:	ec 85       	ldd	r30, Y+12	; 0x0c
    1788:	fd 85       	ldd	r31, Y+13	; 0x0d
    178a:	80 81       	ld	r24, Z
    178c:	e8 2f       	mov	r30, r24
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	fc 8b       	std	Y+20, r31	; 0x14
    1792:	eb 8b       	std	Y+19, r30	; 0x13
    1794:	2b 89       	ldd	r18, Y+19	; 0x13
    1796:	3c 89       	ldd	r19, Y+20	; 0x14
    1798:	21 30       	cpi	r18, 0x01	; 1
    179a:	31 05       	cpc	r19, r1
    179c:	39 f1       	breq	.+78     	; 0x17ec <SSD_u8ShowNumber+0x1b6>
    179e:	8b 89       	ldd	r24, Y+19	; 0x13
    17a0:	9c 89       	ldd	r25, Y+20	; 0x14
    17a2:	82 30       	cpi	r24, 0x02	; 2
    17a4:	91 05       	cpc	r25, r1
    17a6:	2c f4       	brge	.+10     	; 0x17b2 <SSD_u8ShowNumber+0x17c>
    17a8:	eb 89       	ldd	r30, Y+19	; 0x13
    17aa:	fc 89       	ldd	r31, Y+20	; 0x14
    17ac:	30 97       	sbiw	r30, 0x00	; 0
    17ae:	61 f0       	breq	.+24     	; 0x17c8 <SSD_u8ShowNumber+0x192>
    17b0:	53 c0       	rjmp	.+166    	; 0x1858 <SSD_u8ShowNumber+0x222>
    17b2:	2b 89       	ldd	r18, Y+19	; 0x13
    17b4:	3c 89       	ldd	r19, Y+20	; 0x14
    17b6:	22 30       	cpi	r18, 0x02	; 2
    17b8:	31 05       	cpc	r19, r1
    17ba:	51 f1       	breq	.+84     	; 0x1810 <SSD_u8ShowNumber+0x1da>
    17bc:	8b 89       	ldd	r24, Y+19	; 0x13
    17be:	9c 89       	ldd	r25, Y+20	; 0x14
    17c0:	83 30       	cpi	r24, 0x03	; 3
    17c2:	91 05       	cpc	r25, r1
    17c4:	b9 f1       	breq	.+110    	; 0x1834 <SSD_u8ShowNumber+0x1fe>
    17c6:	48 c0       	rjmp	.+144    	; 0x1858 <SSD_u8ShowNumber+0x222>
			{
				case DIO_u8PORTA:
				DIO_u8SetPortDirection(DIO_u8PORTA,DIO_u8OUTPUT);								//set output port direction to output
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	0e 94 ad 06 	call	0xd5a	; 0xd5a <DIO_u8SetPortDirection>
				DIO_u8SetPortValue(DIO_u8PORTA,SSD_u8ArrNums[SSD_u8Number]);					//set output port value to the required number					
    17d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	ce 01       	movw	r24, r28
    17d8:	02 96       	adiw	r24, 0x02	; 2
    17da:	fc 01       	movw	r30, r24
    17dc:	e2 0f       	add	r30, r18
    17de:	f3 1f       	adc	r31, r19
    17e0:	90 81       	ld	r25, Z
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	69 2f       	mov	r22, r25
    17e6:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_u8SetPortValue>
    17ea:	1f c1       	rjmp	.+574    	; 0x1a2a <SSD_u8ShowNumber+0x3f4>
				break;
				
				case DIO_u8PORTB:
				DIO_u8SetPortDirection(DIO_u8PORTB,DIO_u8OUTPUT);								//set output port direction to output
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	0e 94 ad 06 	call	0xd5a	; 0xd5a <DIO_u8SetPortDirection>
				DIO_u8SetPortValue(DIO_u8PORTB,SSD_u8ArrNums[SSD_u8Number]);					//set output port value to the required number		
    17f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	ce 01       	movw	r24, r28
    17fc:	02 96       	adiw	r24, 0x02	; 2
    17fe:	fc 01       	movw	r30, r24
    1800:	e2 0f       	add	r30, r18
    1802:	f3 1f       	adc	r31, r19
    1804:	90 81       	ld	r25, Z
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	69 2f       	mov	r22, r25
    180a:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_u8SetPortValue>
    180e:	0d c1       	rjmp	.+538    	; 0x1a2a <SSD_u8ShowNumber+0x3f4>
				break;
				
				case DIO_u8PORTC:
				DIO_u8SetPortDirection(DIO_u8PORTC,DIO_u8OUTPUT);								//set output port direction to output
    1810:	82 e0       	ldi	r24, 0x02	; 2
    1812:	61 e0       	ldi	r22, 0x01	; 1
    1814:	0e 94 ad 06 	call	0xd5a	; 0xd5a <DIO_u8SetPortDirection>
				DIO_u8SetPortValue(DIO_u8PORTC,SSD_u8ArrNums[SSD_u8Number]);					//set output port value to the required number		
    1818:	8e 85       	ldd	r24, Y+14	; 0x0e
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	ce 01       	movw	r24, r28
    1820:	02 96       	adiw	r24, 0x02	; 2
    1822:	fc 01       	movw	r30, r24
    1824:	e2 0f       	add	r30, r18
    1826:	f3 1f       	adc	r31, r19
    1828:	90 81       	ld	r25, Z
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	69 2f       	mov	r22, r25
    182e:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_u8SetPortValue>
    1832:	fb c0       	rjmp	.+502    	; 0x1a2a <SSD_u8ShowNumber+0x3f4>
				break;
				
				case DIO_u8PORTD:
				DIO_u8SetPortDirection(DIO_u8PORTD,DIO_u8OUTPUT);								//set output port direction to output
    1834:	83 e0       	ldi	r24, 0x03	; 3
    1836:	61 e0       	ldi	r22, 0x01	; 1
    1838:	0e 94 ad 06 	call	0xd5a	; 0xd5a <DIO_u8SetPortDirection>
				DIO_u8SetPortValue(DIO_u8PORTD,SSD_u8ArrNums[SSD_u8Number]);					//set output port value to the required number		
    183c:	8e 85       	ldd	r24, Y+14	; 0x0e
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	ce 01       	movw	r24, r28
    1844:	02 96       	adiw	r24, 0x02	; 2
    1846:	fc 01       	movw	r30, r24
    1848:	e2 0f       	add	r30, r18
    184a:	f3 1f       	adc	r31, r19
    184c:	90 81       	ld	r25, Z
    184e:	83 e0       	ldi	r24, 0x03	; 3
    1850:	69 2f       	mov	r22, r25
    1852:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_u8SetPortValue>
    1856:	e9 c0       	rjmp	.+466    	; 0x1a2a <SSD_u8ShowNumber+0x3f4>
				break;
				
				default://error in output port
				Local_u8ErrorState=1;
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	e6 c0       	rjmp	.+460    	; 0x1a2a <SSD_u8ShowNumber+0x3f4>
			}
		}
		///////////////////////////////////////////////////////////////////////////////////////////////		
		///////////////////////////////////Common cathode////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////
		else if((pstruct_SSDn->SSD_u8Common)==SSD_u8CommonCathode)
    185e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1860:	fd 85       	ldd	r31, Y+13	; 0x0d
    1862:	81 81       	ldd	r24, Z+1	; 0x01
    1864:	88 23       	and	r24, r24
    1866:	09 f0       	breq	.+2      	; 0x186a <SSD_u8ShowNumber+0x234>
    1868:	db c0       	rjmp	.+438    	; 0x1a20 <SSD_u8ShowNumber+0x3ea>
		{
			///////////////////////////setting up enable pin /////////////////////////////////////
			switch(pstruct_SSDn->SSD_u8EnablePort)
    186a:	ec 85       	ldd	r30, Y+12	; 0x0c
    186c:	fd 85       	ldd	r31, Y+13	; 0x0d
    186e:	82 81       	ldd	r24, Z+2	; 0x02
    1870:	e8 2f       	mov	r30, r24
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	fa 8b       	std	Y+18, r31	; 0x12
    1876:	e9 8b       	std	Y+17, r30	; 0x11
    1878:	29 89       	ldd	r18, Y+17	; 0x11
    187a:	3a 89       	ldd	r19, Y+18	; 0x12
    187c:	21 30       	cpi	r18, 0x01	; 1
    187e:	31 05       	cpc	r19, r1
    1880:	31 f1       	breq	.+76     	; 0x18ce <SSD_u8ShowNumber+0x298>
    1882:	89 89       	ldd	r24, Y+17	; 0x11
    1884:	9a 89       	ldd	r25, Y+18	; 0x12
    1886:	82 30       	cpi	r24, 0x02	; 2
    1888:	91 05       	cpc	r25, r1
    188a:	2c f4       	brge	.+10     	; 0x1896 <SSD_u8ShowNumber+0x260>
    188c:	e9 89       	ldd	r30, Y+17	; 0x11
    188e:	fa 89       	ldd	r31, Y+18	; 0x12
    1890:	30 97       	sbiw	r30, 0x00	; 0
    1892:	61 f0       	breq	.+24     	; 0x18ac <SSD_u8ShowNumber+0x276>
    1894:	4f c0       	rjmp	.+158    	; 0x1934 <SSD_u8ShowNumber+0x2fe>
    1896:	29 89       	ldd	r18, Y+17	; 0x11
    1898:	3a 89       	ldd	r19, Y+18	; 0x12
    189a:	22 30       	cpi	r18, 0x02	; 2
    189c:	31 05       	cpc	r19, r1
    189e:	41 f1       	breq	.+80     	; 0x18f0 <SSD_u8ShowNumber+0x2ba>
    18a0:	89 89       	ldd	r24, Y+17	; 0x11
    18a2:	9a 89       	ldd	r25, Y+18	; 0x12
    18a4:	83 30       	cpi	r24, 0x03	; 3
    18a6:	91 05       	cpc	r25, r1
    18a8:	a1 f1       	breq	.+104    	; 0x1912 <SSD_u8ShowNumber+0x2dc>
    18aa:	44 c0       	rjmp	.+136    	; 0x1934 <SSD_u8ShowNumber+0x2fe>
			{
				case DIO_u8PORTA:
				DIO_u8SetPinDirection(DIO_u8PORTA,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8OUTPUT);//set enable pin to output
    18ac:	ec 85       	ldd	r30, Y+12	; 0x0c
    18ae:	fd 85       	ldd	r31, Y+13	; 0x0d
    18b0:	93 81       	ldd	r25, Z+3	; 0x03
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	69 2f       	mov	r22, r25
    18b6:	41 e0       	ldi	r20, 0x01	; 1
    18b8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTA,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8LOW);		//set enable pin to HIGH			
    18bc:	ec 85       	ldd	r30, Y+12	; 0x0c
    18be:	fd 85       	ldd	r31, Y+13	; 0x0d
    18c0:	93 81       	ldd	r25, Z+3	; 0x03
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	69 2f       	mov	r22, r25
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    18cc:	35 c0       	rjmp	.+106    	; 0x1938 <SSD_u8ShowNumber+0x302>
				break;
				
				case DIO_u8PORTB:
				DIO_u8SetPinDirection(DIO_u8PORTB,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8OUTPUT);//set enable pin to output
    18ce:	ec 85       	ldd	r30, Y+12	; 0x0c
    18d0:	fd 85       	ldd	r31, Y+13	; 0x0d
    18d2:	93 81       	ldd	r25, Z+3	; 0x03
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	69 2f       	mov	r22, r25
    18d8:	41 e0       	ldi	r20, 0x01	; 1
    18da:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTB,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8LOW);		//set enable pin to HIGH	
    18de:	ec 85       	ldd	r30, Y+12	; 0x0c
    18e0:	fd 85       	ldd	r31, Y+13	; 0x0d
    18e2:	93 81       	ldd	r25, Z+3	; 0x03
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	69 2f       	mov	r22, r25
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    18ee:	24 c0       	rjmp	.+72     	; 0x1938 <SSD_u8ShowNumber+0x302>
			
				break;
				
				case DIO_u8PORTC:
				DIO_u8SetPinDirection(DIO_u8PORTC,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8OUTPUT);//set enable pin to output
    18f0:	ec 85       	ldd	r30, Y+12	; 0x0c
    18f2:	fd 85       	ldd	r31, Y+13	; 0x0d
    18f4:	93 81       	ldd	r25, Z+3	; 0x03
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	69 2f       	mov	r22, r25
    18fa:	41 e0       	ldi	r20, 0x01	; 1
    18fc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTC,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8LOW);		//set enable pin to HIGH	
    1900:	ec 85       	ldd	r30, Y+12	; 0x0c
    1902:	fd 85       	ldd	r31, Y+13	; 0x0d
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	69 2f       	mov	r22, r25
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1910:	13 c0       	rjmp	.+38     	; 0x1938 <SSD_u8ShowNumber+0x302>
			
				break;
				
				case DIO_u8PORTD:
				DIO_u8SetPinDirection(DIO_u8PORTD,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8OUTPUT);//set enable pin to output
    1912:	ec 85       	ldd	r30, Y+12	; 0x0c
    1914:	fd 85       	ldd	r31, Y+13	; 0x0d
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	83 e0       	ldi	r24, 0x03	; 3
    191a:	69 2f       	mov	r22, r25
    191c:	41 e0       	ldi	r20, 0x01	; 1
    191e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(DIO_u8PORTD,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8LOW);		//set enable pin to HIGH	
    1922:	ec 85       	ldd	r30, Y+12	; 0x0c
    1924:	fd 85       	ldd	r31, Y+13	; 0x0d
    1926:	93 81       	ldd	r25, Z+3	; 0x03
    1928:	83 e0       	ldi	r24, 0x03	; 3
    192a:	69 2f       	mov	r22, r25
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <SSD_u8ShowNumber+0x302>
		
				break;
				
				default://error in enable port
				Local_u8ErrorState=1;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	89 83       	std	Y+1, r24	; 0x01
			}
			/////////////////////////////setting up output port ///////////////////////////////////////////
			switch(pstruct_SSDn->SSD_u8OutputPort)
    1938:	ec 85       	ldd	r30, Y+12	; 0x0c
    193a:	fd 85       	ldd	r31, Y+13	; 0x0d
    193c:	80 81       	ld	r24, Z
    193e:	e8 2f       	mov	r30, r24
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	f8 8b       	std	Y+16, r31	; 0x10
    1944:	ef 87       	std	Y+15, r30	; 0x0f
    1946:	2f 85       	ldd	r18, Y+15	; 0x0f
    1948:	38 89       	ldd	r19, Y+16	; 0x10
    194a:	21 30       	cpi	r18, 0x01	; 1
    194c:	31 05       	cpc	r19, r1
    194e:	49 f1       	breq	.+82     	; 0x19a2 <SSD_u8ShowNumber+0x36c>
    1950:	8f 85       	ldd	r24, Y+15	; 0x0f
    1952:	98 89       	ldd	r25, Y+16	; 0x10
    1954:	82 30       	cpi	r24, 0x02	; 2
    1956:	91 05       	cpc	r25, r1
    1958:	2c f4       	brge	.+10     	; 0x1964 <SSD_u8ShowNumber+0x32e>
    195a:	ef 85       	ldd	r30, Y+15	; 0x0f
    195c:	f8 89       	ldd	r31, Y+16	; 0x10
    195e:	30 97       	sbiw	r30, 0x00	; 0
    1960:	61 f0       	breq	.+24     	; 0x197a <SSD_u8ShowNumber+0x344>
    1962:	5b c0       	rjmp	.+182    	; 0x1a1a <SSD_u8ShowNumber+0x3e4>
    1964:	2f 85       	ldd	r18, Y+15	; 0x0f
    1966:	38 89       	ldd	r19, Y+16	; 0x10
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	71 f1       	breq	.+92     	; 0x19ca <SSD_u8ShowNumber+0x394>
    196e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1970:	98 89       	ldd	r25, Y+16	; 0x10
    1972:	83 30       	cpi	r24, 0x03	; 3
    1974:	91 05       	cpc	r25, r1
    1976:	e9 f1       	breq	.+122    	; 0x19f2 <SSD_u8ShowNumber+0x3bc>
    1978:	50 c0       	rjmp	.+160    	; 0x1a1a <SSD_u8ShowNumber+0x3e4>
			{
				case DIO_u8PORTA:
				DIO_u8SetPortDirection(DIO_u8PORTA,DIO_u8OUTPUT);								//set output port direction to output
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	61 e0       	ldi	r22, 0x01	; 1
    197e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <DIO_u8SetPortDirection>
				DIO_u8SetPortValue(DIO_u8PORTA,~(SSD_u8ArrNums[SSD_u8Number]));					//set output port value to the required number					
    1982:	8e 85       	ldd	r24, Y+14	; 0x0e
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	ce 01       	movw	r24, r28
    198a:	02 96       	adiw	r24, 0x02	; 2
    198c:	fc 01       	movw	r30, r24
    198e:	e2 0f       	add	r30, r18
    1990:	f3 1f       	adc	r31, r19
    1992:	80 81       	ld	r24, Z
    1994:	98 2f       	mov	r25, r24
    1996:	90 95       	com	r25
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	69 2f       	mov	r22, r25
    199c:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_u8SetPortValue>
    19a0:	44 c0       	rjmp	.+136    	; 0x1a2a <SSD_u8ShowNumber+0x3f4>
				break;
				
				case DIO_u8PORTB:
				DIO_u8SetPortDirection(DIO_u8PORTB,DIO_u8OUTPUT);								//set output port direction to output
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	61 e0       	ldi	r22, 0x01	; 1
    19a6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <DIO_u8SetPortDirection>
				DIO_u8SetPortValue(DIO_u8PORTB,~(SSD_u8ArrNums[SSD_u8Number]));					//set output port value to the required number		
    19aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	ce 01       	movw	r24, r28
    19b2:	02 96       	adiw	r24, 0x02	; 2
    19b4:	fc 01       	movw	r30, r24
    19b6:	e2 0f       	add	r30, r18
    19b8:	f3 1f       	adc	r31, r19
    19ba:	80 81       	ld	r24, Z
    19bc:	98 2f       	mov	r25, r24
    19be:	90 95       	com	r25
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	69 2f       	mov	r22, r25
    19c4:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_u8SetPortValue>
    19c8:	30 c0       	rjmp	.+96     	; 0x1a2a <SSD_u8ShowNumber+0x3f4>
				break;
				
				case DIO_u8PORTC:
				DIO_u8SetPortDirection(DIO_u8PORTC,DIO_u8OUTPUT);								//set output port direction to output
    19ca:	82 e0       	ldi	r24, 0x02	; 2
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	0e 94 ad 06 	call	0xd5a	; 0xd5a <DIO_u8SetPortDirection>
				DIO_u8SetPortValue(DIO_u8PORTC,~(SSD_u8ArrNums[SSD_u8Number]));					//set output port value to the required number		
    19d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	ce 01       	movw	r24, r28
    19da:	02 96       	adiw	r24, 0x02	; 2
    19dc:	fc 01       	movw	r30, r24
    19de:	e2 0f       	add	r30, r18
    19e0:	f3 1f       	adc	r31, r19
    19e2:	80 81       	ld	r24, Z
    19e4:	98 2f       	mov	r25, r24
    19e6:	90 95       	com	r25
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	69 2f       	mov	r22, r25
    19ec:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_u8SetPortValue>
    19f0:	1c c0       	rjmp	.+56     	; 0x1a2a <SSD_u8ShowNumber+0x3f4>
				break;
				
				case DIO_u8PORTD:
				DIO_u8SetPortDirection(DIO_u8PORTD,DIO_u8OUTPUT);								//set output port direction to output
    19f2:	83 e0       	ldi	r24, 0x03	; 3
    19f4:	61 e0       	ldi	r22, 0x01	; 1
    19f6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <DIO_u8SetPortDirection>
				DIO_u8SetPortValue(DIO_u8PORTD,~(SSD_u8ArrNums[SSD_u8Number]));					//set output port value to the required number		
    19fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	ce 01       	movw	r24, r28
    1a02:	02 96       	adiw	r24, 0x02	; 2
    1a04:	fc 01       	movw	r30, r24
    1a06:	e2 0f       	add	r30, r18
    1a08:	f3 1f       	adc	r31, r19
    1a0a:	80 81       	ld	r24, Z
    1a0c:	98 2f       	mov	r25, r24
    1a0e:	90 95       	com	r25
    1a10:	83 e0       	ldi	r24, 0x03	; 3
    1a12:	69 2f       	mov	r22, r25
    1a14:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_u8SetPortValue>
    1a18:	08 c0       	rjmp	.+16     	; 0x1a2a <SSD_u8ShowNumber+0x3f4>
				break;
				
				default://error in output port
				Local_u8ErrorState=1;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	05 c0       	rjmp	.+10     	; 0x1a2a <SSD_u8ShowNumber+0x3f4>
			}			
		}
		else//error in Common type
		{
			Local_u8ErrorState=1;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <SSD_u8ShowNumber+0x3f4>
		}
	}
	else//error in enable pin or number to be shown
	{
		Local_u8ErrorState=1;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a2c:	6b 96       	adiw	r28, 0x1b	; 27
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	f8 94       	cli
    1a32:	de bf       	out	0x3e, r29	; 62
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	cd bf       	out	0x3d, r28	; 61
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <SSD_u8Shutdown>:
u8 SSD_u8Shutdown(SSD_t* pstruct_SSDn)
{
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	27 97       	sbiw	r28, 0x07	; 7
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	9b 83       	std	Y+3, r25	; 0x03
    1a54:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
    1a56:	19 82       	std	Y+1, r1	; 0x01
	if((pstruct_SSDn->SSD_u8EnablePin)<=DIO_u8PIN_7)
    1a58:	ea 81       	ldd	r30, Y+2	; 0x02
    1a5a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a5c:	83 81       	ldd	r24, Z+3	; 0x03
    1a5e:	88 30       	cpi	r24, 0x08	; 8
    1a60:	08 f0       	brcs	.+2      	; 0x1a64 <SSD_u8Shutdown+0x26>
    1a62:	9f c0       	rjmp	.+318    	; 0x1ba2 <SSD_u8Shutdown+0x164>
	{
		if((pstruct_SSDn->SSD_u8Common)==SSD_u8CommonAnode)
    1a64:	ea 81       	ldd	r30, Y+2	; 0x02
    1a66:	fb 81       	ldd	r31, Y+3	; 0x03
    1a68:	81 81       	ldd	r24, Z+1	; 0x01
    1a6a:	81 30       	cpi	r24, 0x01	; 1
    1a6c:	09 f0       	breq	.+2      	; 0x1a70 <SSD_u8Shutdown+0x32>
    1a6e:	48 c0       	rjmp	.+144    	; 0x1b00 <SSD_u8Shutdown+0xc2>
		{
			switch(pstruct_SSDn->SSD_u8EnablePort)
    1a70:	ea 81       	ldd	r30, Y+2	; 0x02
    1a72:	fb 81       	ldd	r31, Y+3	; 0x03
    1a74:	82 81       	ldd	r24, Z+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	3f 83       	std	Y+7, r19	; 0x07
    1a7c:	2e 83       	std	Y+6, r18	; 0x06
    1a7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a80:	9f 81       	ldd	r25, Y+7	; 0x07
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	91 05       	cpc	r25, r1
    1a86:	f1 f0       	breq	.+60     	; 0x1ac4 <SSD_u8Shutdown+0x86>
    1a88:	2e 81       	ldd	r18, Y+6	; 0x06
    1a8a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a8c:	22 30       	cpi	r18, 0x02	; 2
    1a8e:	31 05       	cpc	r19, r1
    1a90:	2c f4       	brge	.+10     	; 0x1a9c <SSD_u8Shutdown+0x5e>
    1a92:	8e 81       	ldd	r24, Y+6	; 0x06
    1a94:	9f 81       	ldd	r25, Y+7	; 0x07
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	61 f0       	breq	.+24     	; 0x1ab2 <SSD_u8Shutdown+0x74>
    1a9a:	2f c0       	rjmp	.+94     	; 0x1afa <SSD_u8Shutdown+0xbc>
    1a9c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a9e:	3f 81       	ldd	r19, Y+7	; 0x07
    1aa0:	22 30       	cpi	r18, 0x02	; 2
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	c1 f0       	breq	.+48     	; 0x1ad6 <SSD_u8Shutdown+0x98>
    1aa6:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aaa:	83 30       	cpi	r24, 0x03	; 3
    1aac:	91 05       	cpc	r25, r1
    1aae:	e1 f0       	breq	.+56     	; 0x1ae8 <SSD_u8Shutdown+0xaa>
    1ab0:	24 c0       	rjmp	.+72     	; 0x1afa <SSD_u8Shutdown+0xbc>
			{
				case DIO_u8PORTA:
				DIO_u8SetPinValue(DIO_u8PORTA,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8LOW);
    1ab2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ab4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ab6:	93 81       	ldd	r25, Z+3	; 0x03
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	69 2f       	mov	r22, r25
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1ac2:	71 c0       	rjmp	.+226    	; 0x1ba6 <SSD_u8Shutdown+0x168>
				break;	
				case DIO_u8PORTB:
				DIO_u8SetPinValue(DIO_u8PORTB,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8LOW);				
    1ac4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ac6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ac8:	93 81       	ldd	r25, Z+3	; 0x03
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	69 2f       	mov	r22, r25
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1ad4:	68 c0       	rjmp	.+208    	; 0x1ba6 <SSD_u8Shutdown+0x168>
				break;			
				case DIO_u8PORTC:
				DIO_u8SetPinValue(DIO_u8PORTC,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8LOW);				
    1ad6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad8:	fb 81       	ldd	r31, Y+3	; 0x03
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	82 e0       	ldi	r24, 0x02	; 2
    1ade:	69 2f       	mov	r22, r25
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1ae6:	5f c0       	rjmp	.+190    	; 0x1ba6 <SSD_u8Shutdown+0x168>
				break;
				case DIO_u8PORTD:
				DIO_u8SetPinValue(DIO_u8PORTD,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8LOW);				
    1ae8:	ea 81       	ldd	r30, Y+2	; 0x02
    1aea:	fb 81       	ldd	r31, Y+3	; 0x03
    1aec:	93 81       	ldd	r25, Z+3	; 0x03
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	69 2f       	mov	r22, r25
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1af8:	56 c0       	rjmp	.+172    	; 0x1ba6 <SSD_u8Shutdown+0x168>
				break;
				
				default://error in enable port
				Local_u8ErrorState=1;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	53 c0       	rjmp	.+166    	; 0x1ba6 <SSD_u8Shutdown+0x168>
				
			}
		}
		else if((pstruct_SSDn->SSD_u8Common)==SSD_u8CommonCathode)
    1b00:	ea 81       	ldd	r30, Y+2	; 0x02
    1b02:	fb 81       	ldd	r31, Y+3	; 0x03
    1b04:	81 81       	ldd	r24, Z+1	; 0x01
    1b06:	88 23       	and	r24, r24
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <SSD_u8Shutdown+0xce>
    1b0a:	48 c0       	rjmp	.+144    	; 0x1b9c <SSD_u8Shutdown+0x15e>
		{
			switch(pstruct_SSDn->SSD_u8EnablePort)
    1b0c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b0e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	3d 83       	std	Y+5, r19	; 0x05
    1b18:	2c 83       	std	Y+4, r18	; 0x04
    1b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1e:	81 30       	cpi	r24, 0x01	; 1
    1b20:	91 05       	cpc	r25, r1
    1b22:	f1 f0       	breq	.+60     	; 0x1b60 <SSD_u8Shutdown+0x122>
    1b24:	2c 81       	ldd	r18, Y+4	; 0x04
    1b26:	3d 81       	ldd	r19, Y+5	; 0x05
    1b28:	22 30       	cpi	r18, 0x02	; 2
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	2c f4       	brge	.+10     	; 0x1b38 <SSD_u8Shutdown+0xfa>
    1b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b30:	9d 81       	ldd	r25, Y+5	; 0x05
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	61 f0       	breq	.+24     	; 0x1b4e <SSD_u8Shutdown+0x110>
    1b36:	2f c0       	rjmp	.+94     	; 0x1b96 <SSD_u8Shutdown+0x158>
    1b38:	2c 81       	ldd	r18, Y+4	; 0x04
    1b3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b3c:	22 30       	cpi	r18, 0x02	; 2
    1b3e:	31 05       	cpc	r19, r1
    1b40:	c1 f0       	breq	.+48     	; 0x1b72 <SSD_u8Shutdown+0x134>
    1b42:	8c 81       	ldd	r24, Y+4	; 0x04
    1b44:	9d 81       	ldd	r25, Y+5	; 0x05
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	91 05       	cpc	r25, r1
    1b4a:	e1 f0       	breq	.+56     	; 0x1b84 <SSD_u8Shutdown+0x146>
    1b4c:	24 c0       	rjmp	.+72     	; 0x1b96 <SSD_u8Shutdown+0x158>
				{
					case DIO_u8PORTA:
					DIO_u8SetPinValue(DIO_u8PORTA,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8HIGH);
    1b4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b50:	fb 81       	ldd	r31, Y+3	; 0x03
    1b52:	93 81       	ldd	r25, Z+3	; 0x03
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	69 2f       	mov	r22, r25
    1b58:	41 e0       	ldi	r20, 0x01	; 1
    1b5a:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1b5e:	23 c0       	rjmp	.+70     	; 0x1ba6 <SSD_u8Shutdown+0x168>
					break;
					case DIO_u8PORTB:
					DIO_u8SetPinValue(DIO_u8PORTB,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8HIGH);
    1b60:	ea 81       	ldd	r30, Y+2	; 0x02
    1b62:	fb 81       	ldd	r31, Y+3	; 0x03
    1b64:	93 81       	ldd	r25, Z+3	; 0x03
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	69 2f       	mov	r22, r25
    1b6a:	41 e0       	ldi	r20, 0x01	; 1
    1b6c:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1b70:	1a c0       	rjmp	.+52     	; 0x1ba6 <SSD_u8Shutdown+0x168>
					break;
					case DIO_u8PORTC:
					DIO_u8SetPinValue(DIO_u8PORTC,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8HIGH);
    1b72:	ea 81       	ldd	r30, Y+2	; 0x02
    1b74:	fb 81       	ldd	r31, Y+3	; 0x03
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	82 e0       	ldi	r24, 0x02	; 2
    1b7a:	69 2f       	mov	r22, r25
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1b82:	11 c0       	rjmp	.+34     	; 0x1ba6 <SSD_u8Shutdown+0x168>
					break;
					case DIO_u8PORTD:
					DIO_u8SetPinValue(DIO_u8PORTD,(pstruct_SSDn->SSD_u8EnablePin),DIO_u8HIGH);
    1b84:	ea 81       	ldd	r30, Y+2	; 0x02
    1b86:	fb 81       	ldd	r31, Y+3	; 0x03
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	83 e0       	ldi	r24, 0x03	; 3
    1b8c:	69 2f       	mov	r22, r25
    1b8e:	41 e0       	ldi	r20, 0x01	; 1
    1b90:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
    1b94:	08 c0       	rjmp	.+16     	; 0x1ba6 <SSD_u8Shutdown+0x168>
					break;
					default://error in enable port
					Local_u8ErrorState=1;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	05 c0       	rjmp	.+10     	; 0x1ba6 <SSD_u8Shutdown+0x168>
				}
		}
		else//error in common type
		{
			Local_u8ErrorState=1;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <SSD_u8Shutdown+0x168>
		}
	}
	else//error in enable pin
	{
		Local_u8ErrorState=1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba8:	27 96       	adiw	r28, 0x07	; 7
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <SW_u8GetState>:
#include "DIO_interface.h"
#include "SWITCH_interface.h"
#include <util/delay.h>
/**********************Getting state*****************************/
u8 SW_u8GetState(SW_t* pstruct_SWn , u8* pu8_SwitchState)
{
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	c9 57       	subi	r28, 0x79	; 121
    1bc8:	d0 40       	sbci	r29, 0x00	; 0
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	ee 58       	subi	r30, 0x8E	; 142
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	80 83       	st	Z, r24
    1bde:	fe 01       	movw	r30, r28
    1be0:	ec 58       	subi	r30, 0x8C	; 140
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	71 83       	std	Z+1, r23	; 0x01
    1be6:	60 83       	st	Z, r22
	u8 Local_u8ErrorState=0;
    1be8:	fe 01       	movw	r30, r28
    1bea:	ef 58       	subi	r30, 0x8F	; 143
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	10 82       	st	Z, r1
	if(pstruct_SWn!=NULL&&pu8_SwitchState!=NULL)//checking that we don't work on null pointer
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	ee 58       	subi	r30, 0x8E	; 142
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	80 81       	ld	r24, Z
    1bf8:	91 81       	ldd	r25, Z+1	; 0x01
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <SW_u8GetState+0x46>
    1bfe:	41 c7       	rjmp	.+3714   	; 0x2a82 <SW_u8GetState+0xec8>
    1c00:	fe 01       	movw	r30, r28
    1c02:	ec 58       	subi	r30, 0x8C	; 140
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <SW_u8GetState+0x56>
    1c0e:	39 c7       	rjmp	.+3698   	; 0x2a82 <SW_u8GetState+0xec8>
	{
		/***********************************************************************************/
		/******************************PULLUP***********************************************/
		/***********************************************************************************/	
		if(pstruct_SWn->SW_u8Pulltype==SW_u8Pullup)//internal pullup
    1c10:	fe 01       	movw	r30, r28
    1c12:	ee 58       	subi	r30, 0x8E	; 142
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	01 90       	ld	r0, Z+
    1c18:	f0 81       	ld	r31, Z
    1c1a:	e0 2d       	mov	r30, r0
    1c1c:	83 81       	ldd	r24, Z+3	; 0x03
    1c1e:	81 30       	cpi	r24, 0x01	; 1
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <SW_u8GetState+0x6a>
    1c22:	fc c3       	rjmp	.+2040   	; 0x241c <SW_u8GetState+0x862>
		{
			if(((pstruct_SWn->SW_u8PIN)<=DIO_u8PIN_7))
    1c24:	fe 01       	movw	r30, r28
    1c26:	ee 58       	subi	r30, 0x8E	; 142
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	01 90       	ld	r0, Z+
    1c2c:	f0 81       	ld	r31, Z
    1c2e:	e0 2d       	mov	r30, r0
    1c30:	81 81       	ldd	r24, Z+1	; 0x01
    1c32:	88 30       	cpi	r24, 0x08	; 8
    1c34:	08 f0       	brcs	.+2      	; 0x1c38 <SW_u8GetState+0x7e>
    1c36:	ec c3       	rjmp	.+2008   	; 0x2410 <SW_u8GetState+0x856>
			{
					switch(pstruct_SWn->SW_u8Port)
    1c38:	fe 01       	movw	r30, r28
    1c3a:	ee 58       	subi	r30, 0x8E	; 142
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	01 90       	ld	r0, Z+
    1c40:	f0 81       	ld	r31, Z
    1c42:	e0 2d       	mov	r30, r0
    1c44:	80 81       	ld	r24, Z
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	ea 96       	adiw	r28, 0x3a	; 58
    1c4c:	3f af       	std	Y+63, r19	; 0x3f
    1c4e:	2e af       	std	Y+62, r18	; 0x3e
    1c50:	ea 97       	sbiw	r28, 0x3a	; 58
    1c52:	ea 96       	adiw	r28, 0x3a	; 58
    1c54:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c56:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c58:	ea 97       	sbiw	r28, 0x3a	; 58
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <SW_u8GetState+0xa8>
    1c60:	18 c1       	rjmp	.+560    	; 0x1e92 <SW_u8GetState+0x2d8>
    1c62:	ea 96       	adiw	r28, 0x3a	; 58
    1c64:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c66:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c68:	ea 97       	sbiw	r28, 0x3a	; 58
    1c6a:	e2 30       	cpi	r30, 0x02	; 2
    1c6c:	f1 05       	cpc	r31, r1
    1c6e:	44 f4       	brge	.+16     	; 0x1c80 <SW_u8GetState+0xc6>
    1c70:	ea 96       	adiw	r28, 0x3a	; 58
    1c72:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c74:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c76:	ea 97       	sbiw	r28, 0x3a	; 58
    1c78:	21 15       	cp	r18, r1
    1c7a:	31 05       	cpc	r19, r1
    1c7c:	91 f0       	breq	.+36     	; 0x1ca2 <SW_u8GetState+0xe8>
    1c7e:	c2 c3       	rjmp	.+1924   	; 0x2404 <SW_u8GetState+0x84a>
    1c80:	ea 96       	adiw	r28, 0x3a	; 58
    1c82:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c84:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c86:	ea 97       	sbiw	r28, 0x3a	; 58
    1c88:	82 30       	cpi	r24, 0x02	; 2
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <SW_u8GetState+0xd6>
    1c8e:	f9 c1       	rjmp	.+1010   	; 0x2082 <SW_u8GetState+0x4c8>
    1c90:	ea 96       	adiw	r28, 0x3a	; 58
    1c92:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c94:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c96:	ea 97       	sbiw	r28, 0x3a	; 58
    1c98:	e3 30       	cpi	r30, 0x03	; 3
    1c9a:	f1 05       	cpc	r31, r1
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <SW_u8GetState+0xe6>
    1c9e:	e9 c2       	rjmp	.+1490   	; 0x2272 <SW_u8GetState+0x6b8>
    1ca0:	b1 c3       	rjmp	.+1890   	; 0x2404 <SW_u8GetState+0x84a>
				{
					/******************************PORTA************************************************/
					case DIO_u8PORTA :
					DIO_u8SetPinDirection(DIO_u8PORTA,(pstruct_SWn->SW_u8PIN),DIO_u8INPUT);//set pin direction
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	ee 58       	subi	r30, 0x8E	; 142
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	01 90       	ld	r0, Z+
    1caa:	f0 81       	ld	r31, Z
    1cac:	e0 2d       	mov	r30, r0
    1cae:	91 81       	ldd	r25, Z+1	; 0x01
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	69 2f       	mov	r22, r25
    1cb4:	40 e0       	ldi	r20, 0x00	; 0
    1cb6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
					DIO_u8SetPinValue(DIO_u8PORTA,(pstruct_SWn->SW_u8PIN),DIO_u8HIGH);//set pin value to high for internal pullup
    1cba:	fe 01       	movw	r30, r28
    1cbc:	ee 58       	subi	r30, 0x8E	; 142
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	01 90       	ld	r0, Z+
    1cc2:	f0 81       	ld	r31, Z
    1cc4:	e0 2d       	mov	r30, r0
    1cc6:	91 81       	ldd	r25, Z+1	; 0x01
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	69 2f       	mov	r22, r25
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
					DIO_u8GetPinValue(DIO_u8PORTA,(pstruct_SWn->SW_u8PIN),pu8_SwitchState);//get the value of specified pin
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	ee 58       	subi	r30, 0x8E	; 142
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	01 90       	ld	r0, Z+
    1cda:	f0 81       	ld	r31, Z
    1cdc:	e0 2d       	mov	r30, r0
    1cde:	91 81       	ldd	r25, Z+1	; 0x01
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	ec 58       	subi	r30, 0x8C	; 140
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	20 81       	ld	r18, Z
    1ce8:	31 81       	ldd	r19, Z+1	; 0x01
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	69 2f       	mov	r22, r25
    1cee:	a9 01       	movw	r20, r18
    1cf0:	0e 94 87 08 	call	0x110e	; 0x110e <DIO_u8GetPinValue>
					if((pstruct_SWn->SW_u8SelfLockingType)==SW_u8Maintained)
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	ee 58       	subi	r30, 0x8E	; 142
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	01 90       	ld	r0, Z+
    1cfc:	f0 81       	ld	r31, Z
    1cfe:	e0 2d       	mov	r30, r0
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	88 23       	and	r24, r24
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <SW_u8GetState+0x14e>
    1d06:	c2 c6       	rjmp	.+3460   	; 0x2a8c <SW_u8GetState+0xed2>
					{
						//do nothing
					}
					else if((pstruct_SWn->SW_u8SelfLockingType)==SW_u8Temporary)//Debouncing technique
    1d08:	fe 01       	movw	r30, r28
    1d0a:	ee 58       	subi	r30, 0x8E	; 142
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	01 90       	ld	r0, Z+
    1d10:	f0 81       	ld	r31, Z
    1d12:	e0 2d       	mov	r30, r0
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	81 30       	cpi	r24, 0x01	; 1
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <SW_u8GetState+0x162>
    1d1a:	b5 c0       	rjmp	.+362    	; 0x1e86 <SW_u8GetState+0x2cc>
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	e3 59       	subi	r30, 0x93	; 147
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	aa e7       	ldi	r26, 0x7A	; 122
    1d28:	b3 e4       	ldi	r27, 0x43	; 67
    1d2a:	80 83       	st	Z, r24
    1d2c:	91 83       	std	Z+1, r25	; 0x01
    1d2e:	a2 83       	std	Z+2, r26	; 0x02
    1d30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d32:	8e 01       	movw	r16, r28
    1d34:	07 59       	subi	r16, 0x97	; 151
    1d36:	1f 4f       	sbci	r17, 0xFF	; 255
    1d38:	fe 01       	movw	r30, r28
    1d3a:	e3 59       	subi	r30, 0x93	; 147
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	60 81       	ld	r22, Z
    1d40:	71 81       	ldd	r23, Z+1	; 0x01
    1d42:	82 81       	ldd	r24, Z+2	; 0x02
    1d44:	93 81       	ldd	r25, Z+3	; 0x03
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e8       	ldi	r19, 0x80	; 128
    1d4a:	4b e3       	ldi	r20, 0x3B	; 59
    1d4c:	55 e4       	ldi	r21, 0x45	; 69
    1d4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	f8 01       	movw	r30, r16
    1d58:	80 83       	st	Z, r24
    1d5a:	91 83       	std	Z+1, r25	; 0x01
    1d5c:	a2 83       	std	Z+2, r26	; 0x02
    1d5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d60:	fe 01       	movw	r30, r28
    1d62:	e7 59       	subi	r30, 0x97	; 151
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	60 81       	ld	r22, Z
    1d68:	71 81       	ldd	r23, Z+1	; 0x01
    1d6a:	82 81       	ldd	r24, Z+2	; 0x02
    1d6c:	93 81       	ldd	r25, Z+3	; 0x03
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e8       	ldi	r20, 0x80	; 128
    1d74:	5f e3       	ldi	r21, 0x3F	; 63
    1d76:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d7a:	88 23       	and	r24, r24
    1d7c:	44 f4       	brge	.+16     	; 0x1d8e <SW_u8GetState+0x1d4>
		__ticks = 1;
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e9 59       	subi	r30, 0x99	; 153
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	80 83       	st	Z, r24
    1d8c:	64 c0       	rjmp	.+200    	; 0x1e56 <SW_u8GetState+0x29c>
	else if (__tmp > 65535)
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e7 59       	subi	r30, 0x97	; 151
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	60 81       	ld	r22, Z
    1d96:	71 81       	ldd	r23, Z+1	; 0x01
    1d98:	82 81       	ldd	r24, Z+2	; 0x02
    1d9a:	93 81       	ldd	r25, Z+3	; 0x03
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1da8:	18 16       	cp	r1, r24
    1daa:	0c f0       	brlt	.+2      	; 0x1dae <SW_u8GetState+0x1f4>
    1dac:	43 c0       	rjmp	.+134    	; 0x1e34 <SW_u8GetState+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dae:	fe 01       	movw	r30, r28
    1db0:	e3 59       	subi	r30, 0x93	; 147
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	60 81       	ld	r22, Z
    1db6:	71 81       	ldd	r23, Z+1	; 0x01
    1db8:	82 81       	ldd	r24, Z+2	; 0x02
    1dba:	93 81       	ldd	r25, Z+3	; 0x03
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e2       	ldi	r20, 0x20	; 32
    1dc2:	51 e4       	ldi	r21, 0x41	; 65
    1dc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	8e 01       	movw	r16, r28
    1dce:	09 59       	subi	r16, 0x99	; 153
    1dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd2:	bc 01       	movw	r22, r24
    1dd4:	cd 01       	movw	r24, r26
    1dd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	f8 01       	movw	r30, r16
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	80 83       	st	Z, r24
    1de4:	1f c0       	rjmp	.+62     	; 0x1e24 <SW_u8GetState+0x26a>
    1de6:	fe 01       	movw	r30, r28
    1de8:	eb 59       	subi	r30, 0x9B	; 155
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	8c e2       	ldi	r24, 0x2C	; 44
    1dee:	91 e0       	ldi	r25, 0x01	; 1
    1df0:	91 83       	std	Z+1, r25	; 0x01
    1df2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1df4:	fe 01       	movw	r30, r28
    1df6:	eb 59       	subi	r30, 0x9B	; 155
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	80 81       	ld	r24, Z
    1dfc:	91 81       	ldd	r25, Z+1	; 0x01
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <SW_u8GetState+0x244>
    1e02:	fe 01       	movw	r30, r28
    1e04:	eb 59       	subi	r30, 0x9B	; 155
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0c:	de 01       	movw	r26, r28
    1e0e:	a9 59       	subi	r26, 0x99	; 153
    1e10:	bf 4f       	sbci	r27, 0xFF	; 255
    1e12:	fe 01       	movw	r30, r28
    1e14:	e9 59       	subi	r30, 0x99	; 153
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 81       	ld	r24, Z
    1e1a:	91 81       	ldd	r25, Z+1	; 0x01
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	11 96       	adiw	r26, 0x01	; 1
    1e20:	9c 93       	st	X, r25
    1e22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e24:	fe 01       	movw	r30, r28
    1e26:	e9 59       	subi	r30, 0x99	; 153
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	80 81       	ld	r24, Z
    1e2c:	91 81       	ldd	r25, Z+1	; 0x01
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	d1 f6       	brne	.-76     	; 0x1de6 <SW_u8GetState+0x22c>
    1e32:	2c c6       	rjmp	.+3160   	; 0x2a8c <SW_u8GetState+0xed2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e34:	8e 01       	movw	r16, r28
    1e36:	09 59       	subi	r16, 0x99	; 153
    1e38:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e7 59       	subi	r30, 0x97	; 151
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	60 81       	ld	r22, Z
    1e42:	71 81       	ldd	r23, Z+1	; 0x01
    1e44:	82 81       	ldd	r24, Z+2	; 0x02
    1e46:	93 81       	ldd	r25, Z+3	; 0x03
    1e48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	f8 01       	movw	r30, r16
    1e52:	91 83       	std	Z+1, r25	; 0x01
    1e54:	80 83       	st	Z, r24
    1e56:	de 01       	movw	r26, r28
    1e58:	ad 59       	subi	r26, 0x9D	; 157
    1e5a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e9 59       	subi	r30, 0x99	; 153
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 81       	ld	r24, Z
    1e64:	91 81       	ldd	r25, Z+1	; 0x01
    1e66:	11 96       	adiw	r26, 0x01	; 1
    1e68:	9c 93       	st	X, r25
    1e6a:	8e 93       	st	-X, r24
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	ed 59       	subi	r30, 0x9D	; 157
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 81       	ld	r24, Z
    1e74:	91 81       	ldd	r25, Z+1	; 0x01
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	f1 f7       	brne	.-4      	; 0x1e76 <SW_u8GetState+0x2bc>
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	ed 59       	subi	r30, 0x9D	; 157
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	80 83       	st	Z, r24
    1e84:	03 c6       	rjmp	.+3078   	; 0x2a8c <SW_u8GetState+0xed2>
					{
						_delay_ms(250);//use delay (bad solution) until bouncing stops
					}
					else//error due to invalid Self Locking Type
					{
						Local_u8ErrorState=1;
    1e86:	fe 01       	movw	r30, r28
    1e88:	ef 58       	subi	r30, 0x8F	; 143
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	80 83       	st	Z, r24
    1e90:	fd c5       	rjmp	.+3066   	; 0x2a8c <SW_u8GetState+0xed2>
					}
					break;

					/******************************PORTB************************************************/
					case DIO_u8PORTB :
					DIO_u8SetPinDirection(DIO_u8PORTB,(pstruct_SWn->SW_u8PIN),DIO_u8INPUT);//set pin direction
    1e92:	fe 01       	movw	r30, r28
    1e94:	ee 58       	subi	r30, 0x8E	; 142
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	01 90       	ld	r0, Z+
    1e9a:	f0 81       	ld	r31, Z
    1e9c:	e0 2d       	mov	r30, r0
    1e9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	69 2f       	mov	r22, r25
    1ea4:	40 e0       	ldi	r20, 0x00	; 0
    1ea6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
					DIO_u8SetPinValue(DIO_u8PORTB,(pstruct_SWn->SW_u8PIN),DIO_u8HIGH);//set pin value to high for internal pullup
    1eaa:	fe 01       	movw	r30, r28
    1eac:	ee 58       	subi	r30, 0x8E	; 142
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	01 90       	ld	r0, Z+
    1eb2:	f0 81       	ld	r31, Z
    1eb4:	e0 2d       	mov	r30, r0
    1eb6:	91 81       	ldd	r25, Z+1	; 0x01
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	69 2f       	mov	r22, r25
    1ebc:	41 e0       	ldi	r20, 0x01	; 1
    1ebe:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
					DIO_u8GetPinValue(DIO_u8PORTB,(pstruct_SWn->SW_u8PIN),pu8_SwitchState);//get the value of specified pin
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	ee 58       	subi	r30, 0x8E	; 142
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	01 90       	ld	r0, Z+
    1eca:	f0 81       	ld	r31, Z
    1ecc:	e0 2d       	mov	r30, r0
    1ece:	91 81       	ldd	r25, Z+1	; 0x01
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	ec 58       	subi	r30, 0x8C	; 140
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	20 81       	ld	r18, Z
    1ed8:	31 81       	ldd	r19, Z+1	; 0x01
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	69 2f       	mov	r22, r25
    1ede:	a9 01       	movw	r20, r18
    1ee0:	0e 94 87 08 	call	0x110e	; 0x110e <DIO_u8GetPinValue>
					if((pstruct_SWn->SW_u8SelfLockingType)==SW_u8Maintained)
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	ee 58       	subi	r30, 0x8E	; 142
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	01 90       	ld	r0, Z+
    1eec:	f0 81       	ld	r31, Z
    1eee:	e0 2d       	mov	r30, r0
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	88 23       	and	r24, r24
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <SW_u8GetState+0x33e>
    1ef6:	ca c5       	rjmp	.+2964   	; 0x2a8c <SW_u8GetState+0xed2>
					{
						//do nothing
					}
					else if((pstruct_SWn->SW_u8SelfLockingType)==SW_u8Temporary)//Debouncing technique
    1ef8:	fe 01       	movw	r30, r28
    1efa:	ee 58       	subi	r30, 0x8E	; 142
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	01 90       	ld	r0, Z+
    1f00:	f0 81       	ld	r31, Z
    1f02:	e0 2d       	mov	r30, r0
    1f04:	82 81       	ldd	r24, Z+2	; 0x02
    1f06:	81 30       	cpi	r24, 0x01	; 1
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <SW_u8GetState+0x352>
    1f0a:	b5 c0       	rjmp	.+362    	; 0x2076 <SW_u8GetState+0x4bc>
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	e1 5a       	subi	r30, 0xA1	; 161
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	aa e7       	ldi	r26, 0x7A	; 122
    1f18:	b3 e4       	ldi	r27, 0x43	; 67
    1f1a:	80 83       	st	Z, r24
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	a2 83       	std	Z+2, r26	; 0x02
    1f20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f22:	8e 01       	movw	r16, r28
    1f24:	05 5a       	subi	r16, 0xA5	; 165
    1f26:	1f 4f       	sbci	r17, 0xFF	; 255
    1f28:	fe 01       	movw	r30, r28
    1f2a:	e1 5a       	subi	r30, 0xA1	; 161
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	60 81       	ld	r22, Z
    1f30:	71 81       	ldd	r23, Z+1	; 0x01
    1f32:	82 81       	ldd	r24, Z+2	; 0x02
    1f34:	93 81       	ldd	r25, Z+3	; 0x03
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e8       	ldi	r19, 0x80	; 128
    1f3a:	4b e3       	ldi	r20, 0x3B	; 59
    1f3c:	55 e4       	ldi	r21, 0x45	; 69
    1f3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	f8 01       	movw	r30, r16
    1f48:	80 83       	st	Z, r24
    1f4a:	91 83       	std	Z+1, r25	; 0x01
    1f4c:	a2 83       	std	Z+2, r26	; 0x02
    1f4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f50:	fe 01       	movw	r30, r28
    1f52:	e5 5a       	subi	r30, 0xA5	; 165
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	60 81       	ld	r22, Z
    1f58:	71 81       	ldd	r23, Z+1	; 0x01
    1f5a:	82 81       	ldd	r24, Z+2	; 0x02
    1f5c:	93 81       	ldd	r25, Z+3	; 0x03
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e8       	ldi	r20, 0x80	; 128
    1f64:	5f e3       	ldi	r21, 0x3F	; 63
    1f66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f6a:	88 23       	and	r24, r24
    1f6c:	44 f4       	brge	.+16     	; 0x1f7e <SW_u8GetState+0x3c4>
		__ticks = 1;
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e7 5a       	subi	r30, 0xA7	; 167
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	91 83       	std	Z+1, r25	; 0x01
    1f7a:	80 83       	st	Z, r24
    1f7c:	64 c0       	rjmp	.+200    	; 0x2046 <SW_u8GetState+0x48c>
	else if (__tmp > 65535)
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e5 5a       	subi	r30, 0xA5	; 165
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	3f ef       	ldi	r19, 0xFF	; 255
    1f90:	4f e7       	ldi	r20, 0x7F	; 127
    1f92:	57 e4       	ldi	r21, 0x47	; 71
    1f94:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f98:	18 16       	cp	r1, r24
    1f9a:	0c f0       	brlt	.+2      	; 0x1f9e <SW_u8GetState+0x3e4>
    1f9c:	43 c0       	rjmp	.+134    	; 0x2024 <SW_u8GetState+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e1 5a       	subi	r30, 0xA1	; 161
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	60 81       	ld	r22, Z
    1fa6:	71 81       	ldd	r23, Z+1	; 0x01
    1fa8:	82 81       	ldd	r24, Z+2	; 0x02
    1faa:	93 81       	ldd	r25, Z+3	; 0x03
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e2       	ldi	r20, 0x20	; 32
    1fb2:	51 e4       	ldi	r21, 0x41	; 65
    1fb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	8e 01       	movw	r16, r28
    1fbe:	07 5a       	subi	r16, 0xA7	; 167
    1fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	f8 01       	movw	r30, r16
    1fd0:	91 83       	std	Z+1, r25	; 0x01
    1fd2:	80 83       	st	Z, r24
    1fd4:	1f c0       	rjmp	.+62     	; 0x2014 <SW_u8GetState+0x45a>
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e9 5a       	subi	r30, 0xA9	; 169
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	8c e2       	ldi	r24, 0x2C	; 44
    1fde:	91 e0       	ldi	r25, 0x01	; 1
    1fe0:	91 83       	std	Z+1, r25	; 0x01
    1fe2:	80 83       	st	Z, r24
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	e9 5a       	subi	r30, 0xA9	; 169
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	80 81       	ld	r24, Z
    1fec:	91 81       	ldd	r25, Z+1	; 0x01
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <SW_u8GetState+0x434>
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e9 5a       	subi	r30, 0xA9	; 169
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	91 83       	std	Z+1, r25	; 0x01
    1ffa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffc:	de 01       	movw	r26, r28
    1ffe:	a7 5a       	subi	r26, 0xA7	; 167
    2000:	bf 4f       	sbci	r27, 0xFF	; 255
    2002:	fe 01       	movw	r30, r28
    2004:	e7 5a       	subi	r30, 0xA7	; 167
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	80 81       	ld	r24, Z
    200a:	91 81       	ldd	r25, Z+1	; 0x01
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	11 96       	adiw	r26, 0x01	; 1
    2010:	9c 93       	st	X, r25
    2012:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2014:	fe 01       	movw	r30, r28
    2016:	e7 5a       	subi	r30, 0xA7	; 167
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 81       	ld	r24, Z
    201c:	91 81       	ldd	r25, Z+1	; 0x01
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	d1 f6       	brne	.-76     	; 0x1fd6 <SW_u8GetState+0x41c>
    2022:	34 c5       	rjmp	.+2664   	; 0x2a8c <SW_u8GetState+0xed2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2024:	8e 01       	movw	r16, r28
    2026:	07 5a       	subi	r16, 0xA7	; 167
    2028:	1f 4f       	sbci	r17, 0xFF	; 255
    202a:	fe 01       	movw	r30, r28
    202c:	e5 5a       	subi	r30, 0xA5	; 165
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	60 81       	ld	r22, Z
    2032:	71 81       	ldd	r23, Z+1	; 0x01
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	f8 01       	movw	r30, r16
    2042:	91 83       	std	Z+1, r25	; 0x01
    2044:	80 83       	st	Z, r24
    2046:	de 01       	movw	r26, r28
    2048:	ab 5a       	subi	r26, 0xAB	; 171
    204a:	bf 4f       	sbci	r27, 0xFF	; 255
    204c:	fe 01       	movw	r30, r28
    204e:	e7 5a       	subi	r30, 0xA7	; 167
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	80 81       	ld	r24, Z
    2054:	91 81       	ldd	r25, Z+1	; 0x01
    2056:	11 96       	adiw	r26, 0x01	; 1
    2058:	9c 93       	st	X, r25
    205a:	8e 93       	st	-X, r24
    205c:	fe 01       	movw	r30, r28
    205e:	eb 5a       	subi	r30, 0xAB	; 171
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	80 81       	ld	r24, Z
    2064:	91 81       	ldd	r25, Z+1	; 0x01
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <SW_u8GetState+0x4ac>
    206a:	fe 01       	movw	r30, r28
    206c:	eb 5a       	subi	r30, 0xAB	; 171
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	91 83       	std	Z+1, r25	; 0x01
    2072:	80 83       	st	Z, r24
    2074:	0b c5       	rjmp	.+2582   	; 0x2a8c <SW_u8GetState+0xed2>
					{
						_delay_ms(250);//use delay (bad solution) until bouncing stops
					}
					else//error due to invalid Self Locking Type
					{
						Local_u8ErrorState=1;
    2076:	fe 01       	movw	r30, r28
    2078:	ef 58       	subi	r30, 0x8F	; 143
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	80 83       	st	Z, r24
    2080:	05 c5       	rjmp	.+2570   	; 0x2a8c <SW_u8GetState+0xed2>
					}
					break;

					/******************************PORTC************************************************/
					case DIO_u8PORTC :
					DIO_u8SetPinDirection(DIO_u8PORTC,(pstruct_SWn->SW_u8PIN),DIO_u8INPUT);//set pin direction
    2082:	fe 01       	movw	r30, r28
    2084:	ee 58       	subi	r30, 0x8E	; 142
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	01 90       	ld	r0, Z+
    208a:	f0 81       	ld	r31, Z
    208c:	e0 2d       	mov	r30, r0
    208e:	91 81       	ldd	r25, Z+1	; 0x01
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	69 2f       	mov	r22, r25
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
					DIO_u8SetPinValue(DIO_u8PORTC,(pstruct_SWn->SW_u8PIN),DIO_u8HIGH);//set pin value to high for internal pullup
    209a:	fe 01       	movw	r30, r28
    209c:	ee 58       	subi	r30, 0x8E	; 142
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	01 90       	ld	r0, Z+
    20a2:	f0 81       	ld	r31, Z
    20a4:	e0 2d       	mov	r30, r0
    20a6:	91 81       	ldd	r25, Z+1	; 0x01
    20a8:	82 e0       	ldi	r24, 0x02	; 2
    20aa:	69 2f       	mov	r22, r25
    20ac:	41 e0       	ldi	r20, 0x01	; 1
    20ae:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
					DIO_u8GetPinValue(DIO_u8PORTC,(pstruct_SWn->SW_u8PIN),pu8_SwitchState);//get the value of specified pin
    20b2:	fe 01       	movw	r30, r28
    20b4:	ee 58       	subi	r30, 0x8E	; 142
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	01 90       	ld	r0, Z+
    20ba:	f0 81       	ld	r31, Z
    20bc:	e0 2d       	mov	r30, r0
    20be:	91 81       	ldd	r25, Z+1	; 0x01
    20c0:	fe 01       	movw	r30, r28
    20c2:	ec 58       	subi	r30, 0x8C	; 140
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	20 81       	ld	r18, Z
    20c8:	31 81       	ldd	r19, Z+1	; 0x01
    20ca:	82 e0       	ldi	r24, 0x02	; 2
    20cc:	69 2f       	mov	r22, r25
    20ce:	a9 01       	movw	r20, r18
    20d0:	0e 94 87 08 	call	0x110e	; 0x110e <DIO_u8GetPinValue>
					if((pstruct_SWn->SW_u8SelfLockingType)==SW_u8Maintained)
    20d4:	fe 01       	movw	r30, r28
    20d6:	ee 58       	subi	r30, 0x8E	; 142
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	01 90       	ld	r0, Z+
    20dc:	f0 81       	ld	r31, Z
    20de:	e0 2d       	mov	r30, r0
    20e0:	82 81       	ldd	r24, Z+2	; 0x02
    20e2:	88 23       	and	r24, r24
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <SW_u8GetState+0x52e>
    20e6:	d2 c4       	rjmp	.+2468   	; 0x2a8c <SW_u8GetState+0xed2>
					{
						//do nothing
					}
					else if((pstruct_SWn->SW_u8SelfLockingType)==SW_u8Temporary)//Debouncing technique
    20e8:	fe 01       	movw	r30, r28
    20ea:	ee 58       	subi	r30, 0x8E	; 142
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	01 90       	ld	r0, Z+
    20f0:	f0 81       	ld	r31, Z
    20f2:	e0 2d       	mov	r30, r0
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	81 30       	cpi	r24, 0x01	; 1
    20f8:	09 f0       	breq	.+2      	; 0x20fc <SW_u8GetState+0x542>
    20fa:	b5 c0       	rjmp	.+362    	; 0x2266 <SW_u8GetState+0x6ac>
    20fc:	fe 01       	movw	r30, r28
    20fe:	ef 5a       	subi	r30, 0xAF	; 175
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	aa e7       	ldi	r26, 0x7A	; 122
    2108:	b3 e4       	ldi	r27, 0x43	; 67
    210a:	80 83       	st	Z, r24
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	a2 83       	std	Z+2, r26	; 0x02
    2110:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	8e 01       	movw	r16, r28
    2114:	03 5b       	subi	r16, 0xB3	; 179
    2116:	1f 4f       	sbci	r17, 0xFF	; 255
    2118:	fe 01       	movw	r30, r28
    211a:	ef 5a       	subi	r30, 0xAF	; 175
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e8       	ldi	r19, 0x80	; 128
    212a:	4b e3       	ldi	r20, 0x3B	; 59
    212c:	55 e4       	ldi	r21, 0x45	; 69
    212e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	f8 01       	movw	r30, r16
    2138:	80 83       	st	Z, r24
    213a:	91 83       	std	Z+1, r25	; 0x01
    213c:	a2 83       	std	Z+2, r26	; 0x02
    213e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2140:	fe 01       	movw	r30, r28
    2142:	e3 5b       	subi	r30, 0xB3	; 179
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e8       	ldi	r20, 0x80	; 128
    2154:	5f e3       	ldi	r21, 0x3F	; 63
    2156:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    215a:	88 23       	and	r24, r24
    215c:	44 f4       	brge	.+16     	; 0x216e <SW_u8GetState+0x5b4>
		__ticks = 1;
    215e:	fe 01       	movw	r30, r28
    2160:	e5 5b       	subi	r30, 0xB5	; 181
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	91 83       	std	Z+1, r25	; 0x01
    216a:	80 83       	st	Z, r24
    216c:	64 c0       	rjmp	.+200    	; 0x2236 <SW_u8GetState+0x67c>
	else if (__tmp > 65535)
    216e:	fe 01       	movw	r30, r28
    2170:	e3 5b       	subi	r30, 0xB3	; 179
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	60 81       	ld	r22, Z
    2176:	71 81       	ldd	r23, Z+1	; 0x01
    2178:	82 81       	ldd	r24, Z+2	; 0x02
    217a:	93 81       	ldd	r25, Z+3	; 0x03
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2188:	18 16       	cp	r1, r24
    218a:	0c f0       	brlt	.+2      	; 0x218e <SW_u8GetState+0x5d4>
    218c:	43 c0       	rjmp	.+134    	; 0x2214 <SW_u8GetState+0x65a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218e:	fe 01       	movw	r30, r28
    2190:	ef 5a       	subi	r30, 0xAF	; 175
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	82 81       	ldd	r24, Z+2	; 0x02
    219a:	93 81       	ldd	r25, Z+3	; 0x03
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	8e 01       	movw	r16, r28
    21ae:	05 5b       	subi	r16, 0xB5	; 181
    21b0:	1f 4f       	sbci	r17, 0xFF	; 255
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	f8 01       	movw	r30, r16
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	80 83       	st	Z, r24
    21c4:	1f c0       	rjmp	.+62     	; 0x2204 <SW_u8GetState+0x64a>
    21c6:	fe 01       	movw	r30, r28
    21c8:	e7 5b       	subi	r30, 0xB7	; 183
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	8c e2       	ldi	r24, 0x2C	; 44
    21ce:	91 e0       	ldi	r25, 0x01	; 1
    21d0:	91 83       	std	Z+1, r25	; 0x01
    21d2:	80 83       	st	Z, r24
    21d4:	fe 01       	movw	r30, r28
    21d6:	e7 5b       	subi	r30, 0xB7	; 183
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	80 81       	ld	r24, Z
    21dc:	91 81       	ldd	r25, Z+1	; 0x01
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <SW_u8GetState+0x624>
    21e2:	fe 01       	movw	r30, r28
    21e4:	e7 5b       	subi	r30, 0xB7	; 183
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ec:	de 01       	movw	r26, r28
    21ee:	a5 5b       	subi	r26, 0xB5	; 181
    21f0:	bf 4f       	sbci	r27, 0xFF	; 255
    21f2:	fe 01       	movw	r30, r28
    21f4:	e5 5b       	subi	r30, 0xB5	; 181
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	11 96       	adiw	r26, 0x01	; 1
    2200:	9c 93       	st	X, r25
    2202:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2204:	fe 01       	movw	r30, r28
    2206:	e5 5b       	subi	r30, 0xB5	; 181
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	80 81       	ld	r24, Z
    220c:	91 81       	ldd	r25, Z+1	; 0x01
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	d1 f6       	brne	.-76     	; 0x21c6 <SW_u8GetState+0x60c>
    2212:	3c c4       	rjmp	.+2168   	; 0x2a8c <SW_u8GetState+0xed2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2214:	8e 01       	movw	r16, r28
    2216:	05 5b       	subi	r16, 0xB5	; 181
    2218:	1f 4f       	sbci	r17, 0xFF	; 255
    221a:	fe 01       	movw	r30, r28
    221c:	e3 5b       	subi	r30, 0xB3	; 179
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	60 81       	ld	r22, Z
    2222:	71 81       	ldd	r23, Z+1	; 0x01
    2224:	82 81       	ldd	r24, Z+2	; 0x02
    2226:	93 81       	ldd	r25, Z+3	; 0x03
    2228:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	f8 01       	movw	r30, r16
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
    2236:	de 01       	movw	r26, r28
    2238:	a9 5b       	subi	r26, 0xB9	; 185
    223a:	bf 4f       	sbci	r27, 0xFF	; 255
    223c:	fe 01       	movw	r30, r28
    223e:	e5 5b       	subi	r30, 0xB5	; 181
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 81       	ld	r24, Z
    2244:	91 81       	ldd	r25, Z+1	; 0x01
    2246:	11 96       	adiw	r26, 0x01	; 1
    2248:	9c 93       	st	X, r25
    224a:	8e 93       	st	-X, r24
    224c:	fe 01       	movw	r30, r28
    224e:	e9 5b       	subi	r30, 0xB9	; 185
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	80 81       	ld	r24, Z
    2254:	91 81       	ldd	r25, Z+1	; 0x01
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <SW_u8GetState+0x69c>
    225a:	fe 01       	movw	r30, r28
    225c:	e9 5b       	subi	r30, 0xB9	; 185
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	91 83       	std	Z+1, r25	; 0x01
    2262:	80 83       	st	Z, r24
    2264:	13 c4       	rjmp	.+2086   	; 0x2a8c <SW_u8GetState+0xed2>
					{
						_delay_ms(250);//use delay (bad solution) until bouncing stops
					}
					else//error due to invalid Self Locking Type
					{
						Local_u8ErrorState=1;
    2266:	fe 01       	movw	r30, r28
    2268:	ef 58       	subi	r30, 0x8F	; 143
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	80 83       	st	Z, r24
    2270:	0d c4       	rjmp	.+2074   	; 0x2a8c <SW_u8GetState+0xed2>
					}
					break;

					/******************************PORTD************************************************/
					case DIO_u8PORTD :
					DIO_u8SetPinDirection(DIO_u8PORTD,(pstruct_SWn->SW_u8PIN),DIO_u8INPUT);//set pin direction
    2272:	fe 01       	movw	r30, r28
    2274:	ee 58       	subi	r30, 0x8E	; 142
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	01 90       	ld	r0, Z+
    227a:	f0 81       	ld	r31, Z
    227c:	e0 2d       	mov	r30, r0
    227e:	91 81       	ldd	r25, Z+1	; 0x01
    2280:	83 e0       	ldi	r24, 0x03	; 3
    2282:	69 2f       	mov	r22, r25
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
					DIO_u8SetPinValue(DIO_u8PORTD,(pstruct_SWn->SW_u8PIN),DIO_u8HIGH);//set pin value to high for internal pullup
    228a:	fe 01       	movw	r30, r28
    228c:	ee 58       	subi	r30, 0x8E	; 142
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	01 90       	ld	r0, Z+
    2292:	f0 81       	ld	r31, Z
    2294:	e0 2d       	mov	r30, r0
    2296:	91 81       	ldd	r25, Z+1	; 0x01
    2298:	83 e0       	ldi	r24, 0x03	; 3
    229a:	69 2f       	mov	r22, r25
    229c:	41 e0       	ldi	r20, 0x01	; 1
    229e:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
					DIO_u8GetPinValue(DIO_u8PORTD,(pstruct_SWn->SW_u8PIN),pu8_SwitchState);//get the value of specified pin
    22a2:	fe 01       	movw	r30, r28
    22a4:	ee 58       	subi	r30, 0x8E	; 142
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	01 90       	ld	r0, Z+
    22aa:	f0 81       	ld	r31, Z
    22ac:	e0 2d       	mov	r30, r0
    22ae:	91 81       	ldd	r25, Z+1	; 0x01
    22b0:	fe 01       	movw	r30, r28
    22b2:	ec 58       	subi	r30, 0x8C	; 140
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	20 81       	ld	r18, Z
    22b8:	31 81       	ldd	r19, Z+1	; 0x01
    22ba:	83 e0       	ldi	r24, 0x03	; 3
    22bc:	69 2f       	mov	r22, r25
    22be:	a9 01       	movw	r20, r18
    22c0:	0e 94 87 08 	call	0x110e	; 0x110e <DIO_u8GetPinValue>
					if((pstruct_SWn->SW_u8SelfLockingType)==SW_u8Maintained)
    22c4:	fe 01       	movw	r30, r28
    22c6:	ee 58       	subi	r30, 0x8E	; 142
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	01 90       	ld	r0, Z+
    22cc:	f0 81       	ld	r31, Z
    22ce:	e0 2d       	mov	r30, r0
    22d0:	82 81       	ldd	r24, Z+2	; 0x02
    22d2:	88 23       	and	r24, r24
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <SW_u8GetState+0x71e>
    22d6:	da c3       	rjmp	.+1972   	; 0x2a8c <SW_u8GetState+0xed2>
					{
						//do nothing
					}
					else if((pstruct_SWn->SW_u8SelfLockingType)==SW_u8Temporary)//Debouncing technique
    22d8:	fe 01       	movw	r30, r28
    22da:	ee 58       	subi	r30, 0x8E	; 142
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	01 90       	ld	r0, Z+
    22e0:	f0 81       	ld	r31, Z
    22e2:	e0 2d       	mov	r30, r0
    22e4:	82 81       	ldd	r24, Z+2	; 0x02
    22e6:	81 30       	cpi	r24, 0x01	; 1
    22e8:	09 f0       	breq	.+2      	; 0x22ec <SW_u8GetState+0x732>
    22ea:	86 c0       	rjmp	.+268    	; 0x23f8 <SW_u8GetState+0x83e>
    22ec:	fe 01       	movw	r30, r28
    22ee:	ed 5b       	subi	r30, 0xBD	; 189
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	aa e7       	ldi	r26, 0x7A	; 122
    22f8:	b3 e4       	ldi	r27, 0x43	; 67
    22fa:	80 83       	st	Z, r24
    22fc:	91 83       	std	Z+1, r25	; 0x01
    22fe:	a2 83       	std	Z+2, r26	; 0x02
    2300:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2302:	8e 01       	movw	r16, r28
    2304:	01 5c       	subi	r16, 0xC1	; 193
    2306:	1f 4f       	sbci	r17, 0xFF	; 255
    2308:	fe 01       	movw	r30, r28
    230a:	ed 5b       	subi	r30, 0xBD	; 189
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	60 81       	ld	r22, Z
    2310:	71 81       	ldd	r23, Z+1	; 0x01
    2312:	82 81       	ldd	r24, Z+2	; 0x02
    2314:	93 81       	ldd	r25, Z+3	; 0x03
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e8       	ldi	r19, 0x80	; 128
    231a:	4b e3       	ldi	r20, 0x3B	; 59
    231c:	55 e4       	ldi	r21, 0x45	; 69
    231e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	f8 01       	movw	r30, r16
    2328:	80 83       	st	Z, r24
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	a2 83       	std	Z+2, r26	; 0x02
    232e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2330:	fe 01       	movw	r30, r28
    2332:	ff 96       	adiw	r30, 0x3f	; 63
    2334:	60 81       	ld	r22, Z
    2336:	71 81       	ldd	r23, Z+1	; 0x01
    2338:	82 81       	ldd	r24, Z+2	; 0x02
    233a:	93 81       	ldd	r25, Z+3	; 0x03
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e8       	ldi	r20, 0x80	; 128
    2342:	5f e3       	ldi	r21, 0x3F	; 63
    2344:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2348:	88 23       	and	r24, r24
    234a:	2c f4       	brge	.+10     	; 0x2356 <SW_u8GetState+0x79c>
		__ticks = 1;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	9e af       	std	Y+62, r25	; 0x3e
    2352:	8d af       	std	Y+61, r24	; 0x3d
    2354:	46 c0       	rjmp	.+140    	; 0x23e2 <SW_u8GetState+0x828>
	else if (__tmp > 65535)
    2356:	fe 01       	movw	r30, r28
    2358:	ff 96       	adiw	r30, 0x3f	; 63
    235a:	60 81       	ld	r22, Z
    235c:	71 81       	ldd	r23, Z+1	; 0x01
    235e:	82 81       	ldd	r24, Z+2	; 0x02
    2360:	93 81       	ldd	r25, Z+3	; 0x03
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	3f ef       	ldi	r19, 0xFF	; 255
    2366:	4f e7       	ldi	r20, 0x7F	; 127
    2368:	57 e4       	ldi	r21, 0x47	; 71
    236a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    236e:	18 16       	cp	r1, r24
    2370:	64 f5       	brge	.+88     	; 0x23ca <SW_u8GetState+0x810>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2372:	fe 01       	movw	r30, r28
    2374:	ed 5b       	subi	r30, 0xBD	; 189
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	60 81       	ld	r22, Z
    237a:	71 81       	ldd	r23, Z+1	; 0x01
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	93 81       	ldd	r25, Z+3	; 0x03
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e2       	ldi	r20, 0x20	; 32
    2386:	51 e4       	ldi	r21, 0x41	; 65
    2388:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	bc 01       	movw	r22, r24
    2392:	cd 01       	movw	r24, r26
    2394:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	9e af       	std	Y+62, r25	; 0x3e
    239e:	8d af       	std	Y+61, r24	; 0x3d
    23a0:	0f c0       	rjmp	.+30     	; 0x23c0 <SW_u8GetState+0x806>
    23a2:	8c e2       	ldi	r24, 0x2C	; 44
    23a4:	91 e0       	ldi	r25, 0x01	; 1
    23a6:	9c af       	std	Y+60, r25	; 0x3c
    23a8:	8b af       	std	Y+59, r24	; 0x3b
    23aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    23ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <SW_u8GetState+0x7f4>
    23b2:	9c af       	std	Y+60, r25	; 0x3c
    23b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    23b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	9e af       	std	Y+62, r25	; 0x3e
    23be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    23c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	69 f7       	brne	.-38     	; 0x23a2 <SW_u8GetState+0x7e8>
    23c8:	61 c3       	rjmp	.+1730   	; 0x2a8c <SW_u8GetState+0xed2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ca:	fe 01       	movw	r30, r28
    23cc:	ff 96       	adiw	r30, 0x3f	; 63
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	9e af       	std	Y+62, r25	; 0x3e
    23e0:	8d af       	std	Y+61, r24	; 0x3d
    23e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    23e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    23e6:	9a af       	std	Y+58, r25	; 0x3a
    23e8:	89 af       	std	Y+57, r24	; 0x39
    23ea:	89 ad       	ldd	r24, Y+57	; 0x39
    23ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <SW_u8GetState+0x834>
    23f2:	9a af       	std	Y+58, r25	; 0x3a
    23f4:	89 af       	std	Y+57, r24	; 0x39
    23f6:	4a c3       	rjmp	.+1684   	; 0x2a8c <SW_u8GetState+0xed2>
					{
						_delay_ms(250);//use delay (bad solution) until bouncing stops
					}
					else//error due to invalid Self Locking Type
					{
						Local_u8ErrorState=1;
    23f8:	fe 01       	movw	r30, r28
    23fa:	ef 58       	subi	r30, 0x8F	; 143
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	80 83       	st	Z, r24
    2402:	44 c3       	rjmp	.+1672   	; 0x2a8c <SW_u8GetState+0xed2>
					}
					break;

					default://error in port number
					Local_u8ErrorState=1;
    2404:	fe 01       	movw	r30, r28
    2406:	ef 58       	subi	r30, 0x8F	; 143
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	80 83       	st	Z, r24
    240e:	3e c3       	rjmp	.+1660   	; 0x2a8c <SW_u8GetState+0xed2>
				}
			}
			else//error due to invalid pin number
			{
				Local_u8ErrorState=1;
    2410:	fe 01       	movw	r30, r28
    2412:	ef 58       	subi	r30, 0x8F	; 143
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	80 83       	st	Z, r24
    241a:	38 c3       	rjmp	.+1648   	; 0x2a8c <SW_u8GetState+0xed2>
			}
		}
		/***********************************************************************************/
		/******************************PULLDOWN*********************************************/
		/***********************************************************************************/		
		else if (pstruct_SWn->SW_u8Pulltype==SW_u8Pulldown)
    241c:	fe 01       	movw	r30, r28
    241e:	ee 58       	subi	r30, 0x8E	; 142
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	01 90       	ld	r0, Z+
    2424:	f0 81       	ld	r31, Z
    2426:	e0 2d       	mov	r30, r0
    2428:	83 81       	ldd	r24, Z+3	; 0x03
    242a:	88 23       	and	r24, r24
    242c:	09 f0       	breq	.+2      	; 0x2430 <SW_u8GetState+0x876>
    242e:	23 c3       	rjmp	.+1606   	; 0x2a76 <SW_u8GetState+0xebc>
		{
			if(((pstruct_SWn->SW_u8PIN)<=DIO_u8PIN_7))
    2430:	fe 01       	movw	r30, r28
    2432:	ee 58       	subi	r30, 0x8E	; 142
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	01 90       	ld	r0, Z+
    2438:	f0 81       	ld	r31, Z
    243a:	e0 2d       	mov	r30, r0
    243c:	81 81       	ldd	r24, Z+1	; 0x01
    243e:	88 30       	cpi	r24, 0x08	; 8
    2440:	08 f0       	brcs	.+2      	; 0x2444 <SW_u8GetState+0x88a>
    2442:	13 c3       	rjmp	.+1574   	; 0x2a6a <SW_u8GetState+0xeb0>
			{
				switch(pstruct_SWn->SW_u8Port)
    2444:	fe 01       	movw	r30, r28
    2446:	ee 58       	subi	r30, 0x8E	; 142
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	01 90       	ld	r0, Z+
    244c:	f0 81       	ld	r31, Z
    244e:	e0 2d       	mov	r30, r0
    2450:	80 81       	ld	r24, Z
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	e8 96       	adiw	r28, 0x38	; 56
    2458:	3f af       	std	Y+63, r19	; 0x3f
    245a:	2e af       	std	Y+62, r18	; 0x3e
    245c:	e8 97       	sbiw	r28, 0x38	; 56
    245e:	e8 96       	adiw	r28, 0x38	; 56
    2460:	8e ad       	ldd	r24, Y+62	; 0x3e
    2462:	9f ad       	ldd	r25, Y+63	; 0x3f
    2464:	e8 97       	sbiw	r28, 0x38	; 56
    2466:	81 30       	cpi	r24, 0x01	; 1
    2468:	91 05       	cpc	r25, r1
    246a:	09 f4       	brne	.+2      	; 0x246e <SW_u8GetState+0x8b4>
    246c:	d6 c0       	rjmp	.+428    	; 0x261a <SW_u8GetState+0xa60>
    246e:	e8 96       	adiw	r28, 0x38	; 56
    2470:	ee ad       	ldd	r30, Y+62	; 0x3e
    2472:	ff ad       	ldd	r31, Y+63	; 0x3f
    2474:	e8 97       	sbiw	r28, 0x38	; 56
    2476:	e2 30       	cpi	r30, 0x02	; 2
    2478:	f1 05       	cpc	r31, r1
    247a:	44 f4       	brge	.+16     	; 0x248c <SW_u8GetState+0x8d2>
    247c:	e8 96       	adiw	r28, 0x38	; 56
    247e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2480:	3f ad       	ldd	r19, Y+63	; 0x3f
    2482:	e8 97       	sbiw	r28, 0x38	; 56
    2484:	21 15       	cp	r18, r1
    2486:	31 05       	cpc	r19, r1
    2488:	91 f0       	breq	.+36     	; 0x24ae <SW_u8GetState+0x8f4>
    248a:	e9 c2       	rjmp	.+1490   	; 0x2a5e <SW_u8GetState+0xea4>
    248c:	e8 96       	adiw	r28, 0x38	; 56
    248e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2490:	9f ad       	ldd	r25, Y+63	; 0x3f
    2492:	e8 97       	sbiw	r28, 0x38	; 56
    2494:	82 30       	cpi	r24, 0x02	; 2
    2496:	91 05       	cpc	r25, r1
    2498:	09 f4       	brne	.+2      	; 0x249c <SW_u8GetState+0x8e2>
    249a:	75 c1       	rjmp	.+746    	; 0x2786 <SW_u8GetState+0xbcc>
    249c:	e8 96       	adiw	r28, 0x38	; 56
    249e:	ee ad       	ldd	r30, Y+62	; 0x3e
    24a0:	ff ad       	ldd	r31, Y+63	; 0x3f
    24a2:	e8 97       	sbiw	r28, 0x38	; 56
    24a4:	e3 30       	cpi	r30, 0x03	; 3
    24a6:	f1 05       	cpc	r31, r1
    24a8:	09 f4       	brne	.+2      	; 0x24ac <SW_u8GetState+0x8f2>
    24aa:	23 c2       	rjmp	.+1094   	; 0x28f2 <SW_u8GetState+0xd38>
    24ac:	d8 c2       	rjmp	.+1456   	; 0x2a5e <SW_u8GetState+0xea4>
				{
					/******************************PORTA************************************************/
					case DIO_u8PORTA :
					DIO_u8SetPinDirection(DIO_u8PORTA,(pstruct_SWn->SW_u8PIN),DIO_u8INPUT);//set pin direction
    24ae:	fe 01       	movw	r30, r28
    24b0:	ee 58       	subi	r30, 0x8E	; 142
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	01 90       	ld	r0, Z+
    24b6:	f0 81       	ld	r31, Z
    24b8:	e0 2d       	mov	r30, r0
    24ba:	91 81       	ldd	r25, Z+1	; 0x01
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	69 2f       	mov	r22, r25
    24c0:	40 e0       	ldi	r20, 0x00	; 0
    24c2:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
					DIO_u8SetPinValue(DIO_u8PORTA,(pstruct_SWn->SW_u8PIN),DIO_u8LOW);//set pin value to low for internal pulldown
    24c6:	fe 01       	movw	r30, r28
    24c8:	ee 58       	subi	r30, 0x8E	; 142
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	01 90       	ld	r0, Z+
    24ce:	f0 81       	ld	r31, Z
    24d0:	e0 2d       	mov	r30, r0
    24d2:	91 81       	ldd	r25, Z+1	; 0x01
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	69 2f       	mov	r22, r25
    24d8:	40 e0       	ldi	r20, 0x00	; 0
    24da:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
					DIO_u8GetPinValue(DIO_u8PORTA,(pstruct_SWn->SW_u8PIN),pu8_SwitchState);//get the value of specified pin
    24de:	fe 01       	movw	r30, r28
    24e0:	ee 58       	subi	r30, 0x8E	; 142
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	01 90       	ld	r0, Z+
    24e6:	f0 81       	ld	r31, Z
    24e8:	e0 2d       	mov	r30, r0
    24ea:	91 81       	ldd	r25, Z+1	; 0x01
    24ec:	fe 01       	movw	r30, r28
    24ee:	ec 58       	subi	r30, 0x8C	; 140
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	20 81       	ld	r18, Z
    24f4:	31 81       	ldd	r19, Z+1	; 0x01
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	69 2f       	mov	r22, r25
    24fa:	a9 01       	movw	r20, r18
    24fc:	0e 94 87 08 	call	0x110e	; 0x110e <DIO_u8GetPinValue>
					if((pstruct_SWn->SW_u8SelfLockingType)==SW_u8Maintained)
    2500:	fe 01       	movw	r30, r28
    2502:	ee 58       	subi	r30, 0x8E	; 142
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	01 90       	ld	r0, Z+
    2508:	f0 81       	ld	r31, Z
    250a:	e0 2d       	mov	r30, r0
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	88 23       	and	r24, r24
    2510:	09 f4       	brne	.+2      	; 0x2514 <SW_u8GetState+0x95a>
    2512:	bc c2       	rjmp	.+1400   	; 0x2a8c <SW_u8GetState+0xed2>
					{
						//do nothing
					}
					else if((pstruct_SWn->SW_u8SelfLockingType)==SW_u8Temporary)//Debouncing technique
    2514:	fe 01       	movw	r30, r28
    2516:	ee 58       	subi	r30, 0x8E	; 142
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	01 90       	ld	r0, Z+
    251c:	f0 81       	ld	r31, Z
    251e:	e0 2d       	mov	r30, r0
    2520:	82 81       	ldd	r24, Z+2	; 0x02
    2522:	81 30       	cpi	r24, 0x01	; 1
    2524:	09 f0       	breq	.+2      	; 0x2528 <SW_u8GetState+0x96e>
    2526:	73 c0       	rjmp	.+230    	; 0x260e <SW_u8GetState+0xa54>
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	aa e7       	ldi	r26, 0x7A	; 122
    252e:	b3 e4       	ldi	r27, 0x43	; 67
    2530:	8d ab       	std	Y+53, r24	; 0x35
    2532:	9e ab       	std	Y+54, r25	; 0x36
    2534:	af ab       	std	Y+55, r26	; 0x37
    2536:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2538:	6d a9       	ldd	r22, Y+53	; 0x35
    253a:	7e a9       	ldd	r23, Y+54	; 0x36
    253c:	8f a9       	ldd	r24, Y+55	; 0x37
    253e:	98 ad       	ldd	r25, Y+56	; 0x38
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e8       	ldi	r19, 0x80	; 128
    2544:	4b e3       	ldi	r20, 0x3B	; 59
    2546:	55 e4       	ldi	r21, 0x45	; 69
    2548:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	89 ab       	std	Y+49, r24	; 0x31
    2552:	9a ab       	std	Y+50, r25	; 0x32
    2554:	ab ab       	std	Y+51, r26	; 0x33
    2556:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2558:	69 a9       	ldd	r22, Y+49	; 0x31
    255a:	7a a9       	ldd	r23, Y+50	; 0x32
    255c:	8b a9       	ldd	r24, Y+51	; 0x33
    255e:	9c a9       	ldd	r25, Y+52	; 0x34
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    256c:	88 23       	and	r24, r24
    256e:	2c f4       	brge	.+10     	; 0x257a <SW_u8GetState+0x9c0>
		__ticks = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	98 ab       	std	Y+48, r25	; 0x30
    2576:	8f a7       	std	Y+47, r24	; 0x2f
    2578:	3f c0       	rjmp	.+126    	; 0x25f8 <SW_u8GetState+0xa3e>
	else if (__tmp > 65535)
    257a:	69 a9       	ldd	r22, Y+49	; 0x31
    257c:	7a a9       	ldd	r23, Y+50	; 0x32
    257e:	8b a9       	ldd	r24, Y+51	; 0x33
    2580:	9c a9       	ldd	r25, Y+52	; 0x34
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	3f ef       	ldi	r19, 0xFF	; 255
    2586:	4f e7       	ldi	r20, 0x7F	; 127
    2588:	57 e4       	ldi	r21, 0x47	; 71
    258a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    258e:	18 16       	cp	r1, r24
    2590:	4c f5       	brge	.+82     	; 0x25e4 <SW_u8GetState+0xa2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2592:	6d a9       	ldd	r22, Y+53	; 0x35
    2594:	7e a9       	ldd	r23, Y+54	; 0x36
    2596:	8f a9       	ldd	r24, Y+55	; 0x37
    2598:	98 ad       	ldd	r25, Y+56	; 0x38
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e2       	ldi	r20, 0x20	; 32
    25a0:	51 e4       	ldi	r21, 0x41	; 65
    25a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	98 ab       	std	Y+48, r25	; 0x30
    25b8:	8f a7       	std	Y+47, r24	; 0x2f
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <SW_u8GetState+0xa20>
    25bc:	8c e2       	ldi	r24, 0x2C	; 44
    25be:	91 e0       	ldi	r25, 0x01	; 1
    25c0:	9e a7       	std	Y+46, r25	; 0x2e
    25c2:	8d a7       	std	Y+45, r24	; 0x2d
    25c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    25c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <SW_u8GetState+0xa0e>
    25cc:	9e a7       	std	Y+46, r25	; 0x2e
    25ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25d2:	98 a9       	ldd	r25, Y+48	; 0x30
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	98 ab       	std	Y+48, r25	; 0x30
    25d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25da:	8f a5       	ldd	r24, Y+47	; 0x2f
    25dc:	98 a9       	ldd	r25, Y+48	; 0x30
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	69 f7       	brne	.-38     	; 0x25bc <SW_u8GetState+0xa02>
    25e2:	54 c2       	rjmp	.+1192   	; 0x2a8c <SW_u8GetState+0xed2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e4:	69 a9       	ldd	r22, Y+49	; 0x31
    25e6:	7a a9       	ldd	r23, Y+50	; 0x32
    25e8:	8b a9       	ldd	r24, Y+51	; 0x33
    25ea:	9c a9       	ldd	r25, Y+52	; 0x34
    25ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	98 ab       	std	Y+48, r25	; 0x30
    25f6:	8f a7       	std	Y+47, r24	; 0x2f
    25f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    25fa:	98 a9       	ldd	r25, Y+48	; 0x30
    25fc:	9c a7       	std	Y+44, r25	; 0x2c
    25fe:	8b a7       	std	Y+43, r24	; 0x2b
    2600:	8b a5       	ldd	r24, Y+43	; 0x2b
    2602:	9c a5       	ldd	r25, Y+44	; 0x2c
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <SW_u8GetState+0xa4a>
    2608:	9c a7       	std	Y+44, r25	; 0x2c
    260a:	8b a7       	std	Y+43, r24	; 0x2b
    260c:	3f c2       	rjmp	.+1150   	; 0x2a8c <SW_u8GetState+0xed2>
					{
						_delay_ms(250);//use delay (bad solution) until bouncing stops
					}
					else//error due to invalid Self Locking Type
					{
						Local_u8ErrorState=1;
    260e:	fe 01       	movw	r30, r28
    2610:	ef 58       	subi	r30, 0x8F	; 143
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	80 83       	st	Z, r24
    2618:	39 c2       	rjmp	.+1138   	; 0x2a8c <SW_u8GetState+0xed2>
					}
					break;

					/******************************PORTB************************************************/
					case DIO_u8PORTB :
					DIO_u8SetPinDirection(DIO_u8PORTB,(pstruct_SWn->SW_u8PIN),DIO_u8INPUT);//set pin direction
    261a:	fe 01       	movw	r30, r28
    261c:	ee 58       	subi	r30, 0x8E	; 142
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	01 90       	ld	r0, Z+
    2622:	f0 81       	ld	r31, Z
    2624:	e0 2d       	mov	r30, r0
    2626:	91 81       	ldd	r25, Z+1	; 0x01
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	69 2f       	mov	r22, r25
    262c:	40 e0       	ldi	r20, 0x00	; 0
    262e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
					DIO_u8SetPinValue(DIO_u8PORTB,(pstruct_SWn->SW_u8PIN),DIO_u8LOW);//set pin value to low for internal pulldown
    2632:	fe 01       	movw	r30, r28
    2634:	ee 58       	subi	r30, 0x8E	; 142
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	01 90       	ld	r0, Z+
    263a:	f0 81       	ld	r31, Z
    263c:	e0 2d       	mov	r30, r0
    263e:	91 81       	ldd	r25, Z+1	; 0x01
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	69 2f       	mov	r22, r25
    2644:	40 e0       	ldi	r20, 0x00	; 0
    2646:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
					DIO_u8GetPinValue(DIO_u8PORTB,(pstruct_SWn->SW_u8PIN),pu8_SwitchState);//get the value of specified pin
    264a:	fe 01       	movw	r30, r28
    264c:	ee 58       	subi	r30, 0x8E	; 142
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	01 90       	ld	r0, Z+
    2652:	f0 81       	ld	r31, Z
    2654:	e0 2d       	mov	r30, r0
    2656:	91 81       	ldd	r25, Z+1	; 0x01
    2658:	fe 01       	movw	r30, r28
    265a:	ec 58       	subi	r30, 0x8C	; 140
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	20 81       	ld	r18, Z
    2660:	31 81       	ldd	r19, Z+1	; 0x01
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	69 2f       	mov	r22, r25
    2666:	a9 01       	movw	r20, r18
    2668:	0e 94 87 08 	call	0x110e	; 0x110e <DIO_u8GetPinValue>
					if((pstruct_SWn->SW_u8SelfLockingType)==SW_u8Maintained)
    266c:	fe 01       	movw	r30, r28
    266e:	ee 58       	subi	r30, 0x8E	; 142
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	01 90       	ld	r0, Z+
    2674:	f0 81       	ld	r31, Z
    2676:	e0 2d       	mov	r30, r0
    2678:	82 81       	ldd	r24, Z+2	; 0x02
    267a:	88 23       	and	r24, r24
    267c:	09 f4       	brne	.+2      	; 0x2680 <SW_u8GetState+0xac6>
    267e:	06 c2       	rjmp	.+1036   	; 0x2a8c <SW_u8GetState+0xed2>
					{
						//do nothing
					}
					else if((pstruct_SWn->SW_u8SelfLockingType)==SW_u8Temporary)//Debouncing technique
    2680:	fe 01       	movw	r30, r28
    2682:	ee 58       	subi	r30, 0x8E	; 142
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	01 90       	ld	r0, Z+
    2688:	f0 81       	ld	r31, Z
    268a:	e0 2d       	mov	r30, r0
    268c:	82 81       	ldd	r24, Z+2	; 0x02
    268e:	81 30       	cpi	r24, 0x01	; 1
    2690:	09 f0       	breq	.+2      	; 0x2694 <SW_u8GetState+0xada>
    2692:	73 c0       	rjmp	.+230    	; 0x277a <SW_u8GetState+0xbc0>
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	aa e7       	ldi	r26, 0x7A	; 122
    269a:	b3 e4       	ldi	r27, 0x43	; 67
    269c:	8f a3       	std	Y+39, r24	; 0x27
    269e:	98 a7       	std	Y+40, r25	; 0x28
    26a0:	a9 a7       	std	Y+41, r26	; 0x29
    26a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a4:	6f a1       	ldd	r22, Y+39	; 0x27
    26a6:	78 a5       	ldd	r23, Y+40	; 0x28
    26a8:	89 a5       	ldd	r24, Y+41	; 0x29
    26aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e8       	ldi	r19, 0x80	; 128
    26b0:	4b e3       	ldi	r20, 0x3B	; 59
    26b2:	55 e4       	ldi	r21, 0x45	; 69
    26b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	8b a3       	std	Y+35, r24	; 0x23
    26be:	9c a3       	std	Y+36, r25	; 0x24
    26c0:	ad a3       	std	Y+37, r26	; 0x25
    26c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26c4:	6b a1       	ldd	r22, Y+35	; 0x23
    26c6:	7c a1       	ldd	r23, Y+36	; 0x24
    26c8:	8d a1       	ldd	r24, Y+37	; 0x25
    26ca:	9e a1       	ldd	r25, Y+38	; 0x26
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e8       	ldi	r20, 0x80	; 128
    26d2:	5f e3       	ldi	r21, 0x3F	; 63
    26d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26d8:	88 23       	and	r24, r24
    26da:	2c f4       	brge	.+10     	; 0x26e6 <SW_u8GetState+0xb2c>
		__ticks = 1;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	9a a3       	std	Y+34, r25	; 0x22
    26e2:	89 a3       	std	Y+33, r24	; 0x21
    26e4:	3f c0       	rjmp	.+126    	; 0x2764 <SW_u8GetState+0xbaa>
	else if (__tmp > 65535)
    26e6:	6b a1       	ldd	r22, Y+35	; 0x23
    26e8:	7c a1       	ldd	r23, Y+36	; 0x24
    26ea:	8d a1       	ldd	r24, Y+37	; 0x25
    26ec:	9e a1       	ldd	r25, Y+38	; 0x26
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	3f ef       	ldi	r19, 0xFF	; 255
    26f2:	4f e7       	ldi	r20, 0x7F	; 127
    26f4:	57 e4       	ldi	r21, 0x47	; 71
    26f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26fa:	18 16       	cp	r1, r24
    26fc:	4c f5       	brge	.+82     	; 0x2750 <SW_u8GetState+0xb96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2700:	78 a5       	ldd	r23, Y+40	; 0x28
    2702:	89 a5       	ldd	r24, Y+41	; 0x29
    2704:	9a a5       	ldd	r25, Y+42	; 0x2a
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e2       	ldi	r20, 0x20	; 32
    270c:	51 e4       	ldi	r21, 0x41	; 65
    270e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	bc 01       	movw	r22, r24
    2718:	cd 01       	movw	r24, r26
    271a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	9a a3       	std	Y+34, r25	; 0x22
    2724:	89 a3       	std	Y+33, r24	; 0x21
    2726:	0f c0       	rjmp	.+30     	; 0x2746 <SW_u8GetState+0xb8c>
    2728:	8c e2       	ldi	r24, 0x2C	; 44
    272a:	91 e0       	ldi	r25, 0x01	; 1
    272c:	98 a3       	std	Y+32, r25	; 0x20
    272e:	8f 8f       	std	Y+31, r24	; 0x1f
    2730:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2732:	98 a1       	ldd	r25, Y+32	; 0x20
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <SW_u8GetState+0xb7a>
    2738:	98 a3       	std	Y+32, r25	; 0x20
    273a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273c:	89 a1       	ldd	r24, Y+33	; 0x21
    273e:	9a a1       	ldd	r25, Y+34	; 0x22
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	9a a3       	std	Y+34, r25	; 0x22
    2744:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2746:	89 a1       	ldd	r24, Y+33	; 0x21
    2748:	9a a1       	ldd	r25, Y+34	; 0x22
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	69 f7       	brne	.-38     	; 0x2728 <SW_u8GetState+0xb6e>
    274e:	9e c1       	rjmp	.+828    	; 0x2a8c <SW_u8GetState+0xed2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2750:	6b a1       	ldd	r22, Y+35	; 0x23
    2752:	7c a1       	ldd	r23, Y+36	; 0x24
    2754:	8d a1       	ldd	r24, Y+37	; 0x25
    2756:	9e a1       	ldd	r25, Y+38	; 0x26
    2758:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	9a a3       	std	Y+34, r25	; 0x22
    2762:	89 a3       	std	Y+33, r24	; 0x21
    2764:	89 a1       	ldd	r24, Y+33	; 0x21
    2766:	9a a1       	ldd	r25, Y+34	; 0x22
    2768:	9e 8f       	std	Y+30, r25	; 0x1e
    276a:	8d 8f       	std	Y+29, r24	; 0x1d
    276c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    276e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <SW_u8GetState+0xbb6>
    2774:	9e 8f       	std	Y+30, r25	; 0x1e
    2776:	8d 8f       	std	Y+29, r24	; 0x1d
    2778:	89 c1       	rjmp	.+786    	; 0x2a8c <SW_u8GetState+0xed2>
					{
						_delay_ms(250);//use delay (bad solution) until bouncing stops
					}
					else//error due to invalid Self Locking Type
					{
						Local_u8ErrorState=1;
    277a:	fe 01       	movw	r30, r28
    277c:	ef 58       	subi	r30, 0x8F	; 143
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	80 83       	st	Z, r24
    2784:	83 c1       	rjmp	.+774    	; 0x2a8c <SW_u8GetState+0xed2>
					}
					break;

					/******************************PORTC************************************************/
					case DIO_u8PORTC :
					DIO_u8SetPinDirection(DIO_u8PORTC,(pstruct_SWn->SW_u8PIN),DIO_u8INPUT);//set pin direction
    2786:	fe 01       	movw	r30, r28
    2788:	ee 58       	subi	r30, 0x8E	; 142
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	01 90       	ld	r0, Z+
    278e:	f0 81       	ld	r31, Z
    2790:	e0 2d       	mov	r30, r0
    2792:	91 81       	ldd	r25, Z+1	; 0x01
    2794:	82 e0       	ldi	r24, 0x02	; 2
    2796:	69 2f       	mov	r22, r25
    2798:	40 e0       	ldi	r20, 0x00	; 0
    279a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
					DIO_u8SetPinValue(DIO_u8PORTC,(pstruct_SWn->SW_u8PIN),DIO_u8LOW);//set pin value to low for internal pulldown
    279e:	fe 01       	movw	r30, r28
    27a0:	ee 58       	subi	r30, 0x8E	; 142
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	01 90       	ld	r0, Z+
    27a6:	f0 81       	ld	r31, Z
    27a8:	e0 2d       	mov	r30, r0
    27aa:	91 81       	ldd	r25, Z+1	; 0x01
    27ac:	82 e0       	ldi	r24, 0x02	; 2
    27ae:	69 2f       	mov	r22, r25
    27b0:	40 e0       	ldi	r20, 0x00	; 0
    27b2:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
					DIO_u8GetPinValue(DIO_u8PORTC,(pstruct_SWn->SW_u8PIN),pu8_SwitchState);//get the value of specified pin
    27b6:	fe 01       	movw	r30, r28
    27b8:	ee 58       	subi	r30, 0x8E	; 142
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	01 90       	ld	r0, Z+
    27be:	f0 81       	ld	r31, Z
    27c0:	e0 2d       	mov	r30, r0
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	fe 01       	movw	r30, r28
    27c6:	ec 58       	subi	r30, 0x8C	; 140
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	20 81       	ld	r18, Z
    27cc:	31 81       	ldd	r19, Z+1	; 0x01
    27ce:	82 e0       	ldi	r24, 0x02	; 2
    27d0:	69 2f       	mov	r22, r25
    27d2:	a9 01       	movw	r20, r18
    27d4:	0e 94 87 08 	call	0x110e	; 0x110e <DIO_u8GetPinValue>
					if((pstruct_SWn->SW_u8SelfLockingType)==SW_u8Maintained)
    27d8:	fe 01       	movw	r30, r28
    27da:	ee 58       	subi	r30, 0x8E	; 142
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	01 90       	ld	r0, Z+
    27e0:	f0 81       	ld	r31, Z
    27e2:	e0 2d       	mov	r30, r0
    27e4:	82 81       	ldd	r24, Z+2	; 0x02
    27e6:	88 23       	and	r24, r24
    27e8:	09 f4       	brne	.+2      	; 0x27ec <SW_u8GetState+0xc32>
    27ea:	50 c1       	rjmp	.+672    	; 0x2a8c <SW_u8GetState+0xed2>
					{
						//do nothing
					}
					else if((pstruct_SWn->SW_u8SelfLockingType)==SW_u8Temporary)//Debouncing technique
    27ec:	fe 01       	movw	r30, r28
    27ee:	ee 58       	subi	r30, 0x8E	; 142
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	01 90       	ld	r0, Z+
    27f4:	f0 81       	ld	r31, Z
    27f6:	e0 2d       	mov	r30, r0
    27f8:	82 81       	ldd	r24, Z+2	; 0x02
    27fa:	81 30       	cpi	r24, 0x01	; 1
    27fc:	09 f0       	breq	.+2      	; 0x2800 <SW_u8GetState+0xc46>
    27fe:	73 c0       	rjmp	.+230    	; 0x28e6 <SW_u8GetState+0xd2c>
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	aa e7       	ldi	r26, 0x7A	; 122
    2806:	b3 e4       	ldi	r27, 0x43	; 67
    2808:	89 8f       	std	Y+25, r24	; 0x19
    280a:	9a 8f       	std	Y+26, r25	; 0x1a
    280c:	ab 8f       	std	Y+27, r26	; 0x1b
    280e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2810:	69 8d       	ldd	r22, Y+25	; 0x19
    2812:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2814:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2816:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e8       	ldi	r19, 0x80	; 128
    281c:	4b e3       	ldi	r20, 0x3B	; 59
    281e:	55 e4       	ldi	r21, 0x45	; 69
    2820:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	8d 8b       	std	Y+21, r24	; 0x15
    282a:	9e 8b       	std	Y+22, r25	; 0x16
    282c:	af 8b       	std	Y+23, r26	; 0x17
    282e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2830:	6d 89       	ldd	r22, Y+21	; 0x15
    2832:	7e 89       	ldd	r23, Y+22	; 0x16
    2834:	8f 89       	ldd	r24, Y+23	; 0x17
    2836:	98 8d       	ldd	r25, Y+24	; 0x18
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e8       	ldi	r20, 0x80	; 128
    283e:	5f e3       	ldi	r21, 0x3F	; 63
    2840:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2844:	88 23       	and	r24, r24
    2846:	2c f4       	brge	.+10     	; 0x2852 <SW_u8GetState+0xc98>
		__ticks = 1;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	9c 8b       	std	Y+20, r25	; 0x14
    284e:	8b 8b       	std	Y+19, r24	; 0x13
    2850:	3f c0       	rjmp	.+126    	; 0x28d0 <SW_u8GetState+0xd16>
	else if (__tmp > 65535)
    2852:	6d 89       	ldd	r22, Y+21	; 0x15
    2854:	7e 89       	ldd	r23, Y+22	; 0x16
    2856:	8f 89       	ldd	r24, Y+23	; 0x17
    2858:	98 8d       	ldd	r25, Y+24	; 0x18
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	3f ef       	ldi	r19, 0xFF	; 255
    285e:	4f e7       	ldi	r20, 0x7F	; 127
    2860:	57 e4       	ldi	r21, 0x47	; 71
    2862:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2866:	18 16       	cp	r1, r24
    2868:	4c f5       	brge	.+82     	; 0x28bc <SW_u8GetState+0xd02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286a:	69 8d       	ldd	r22, Y+25	; 0x19
    286c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    286e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2870:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e2       	ldi	r20, 0x20	; 32
    2878:	51 e4       	ldi	r21, 0x41	; 65
    287a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	bc 01       	movw	r22, r24
    2884:	cd 01       	movw	r24, r26
    2886:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	9c 8b       	std	Y+20, r25	; 0x14
    2890:	8b 8b       	std	Y+19, r24	; 0x13
    2892:	0f c0       	rjmp	.+30     	; 0x28b2 <SW_u8GetState+0xcf8>
    2894:	8c e2       	ldi	r24, 0x2C	; 44
    2896:	91 e0       	ldi	r25, 0x01	; 1
    2898:	9a 8b       	std	Y+18, r25	; 0x12
    289a:	89 8b       	std	Y+17, r24	; 0x11
    289c:	89 89       	ldd	r24, Y+17	; 0x11
    289e:	9a 89       	ldd	r25, Y+18	; 0x12
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <SW_u8GetState+0xce6>
    28a4:	9a 8b       	std	Y+18, r25	; 0x12
    28a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a8:	8b 89       	ldd	r24, Y+19	; 0x13
    28aa:	9c 89       	ldd	r25, Y+20	; 0x14
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	9c 8b       	std	Y+20, r25	; 0x14
    28b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b2:	8b 89       	ldd	r24, Y+19	; 0x13
    28b4:	9c 89       	ldd	r25, Y+20	; 0x14
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	69 f7       	brne	.-38     	; 0x2894 <SW_u8GetState+0xcda>
    28ba:	e8 c0       	rjmp	.+464    	; 0x2a8c <SW_u8GetState+0xed2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28bc:	6d 89       	ldd	r22, Y+21	; 0x15
    28be:	7e 89       	ldd	r23, Y+22	; 0x16
    28c0:	8f 89       	ldd	r24, Y+23	; 0x17
    28c2:	98 8d       	ldd	r25, Y+24	; 0x18
    28c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	9c 8b       	std	Y+20, r25	; 0x14
    28ce:	8b 8b       	std	Y+19, r24	; 0x13
    28d0:	8b 89       	ldd	r24, Y+19	; 0x13
    28d2:	9c 89       	ldd	r25, Y+20	; 0x14
    28d4:	98 8b       	std	Y+16, r25	; 0x10
    28d6:	8f 87       	std	Y+15, r24	; 0x0f
    28d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28da:	98 89       	ldd	r25, Y+16	; 0x10
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	f1 f7       	brne	.-4      	; 0x28dc <SW_u8GetState+0xd22>
    28e0:	98 8b       	std	Y+16, r25	; 0x10
    28e2:	8f 87       	std	Y+15, r24	; 0x0f
    28e4:	d3 c0       	rjmp	.+422    	; 0x2a8c <SW_u8GetState+0xed2>
					{
						_delay_ms(250);//use delay (bad solution) until bouncing stops
					}
					else//error due to invalid Self Locking Type
					{
						Local_u8ErrorState=1;
    28e6:	fe 01       	movw	r30, r28
    28e8:	ef 58       	subi	r30, 0x8F	; 143
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	80 83       	st	Z, r24
    28f0:	cd c0       	rjmp	.+410    	; 0x2a8c <SW_u8GetState+0xed2>
					}
					break;

					/******************************PORTD************************************************/
					case DIO_u8PORTD :
					DIO_u8SetPinDirection(DIO_u8PORTD,(pstruct_SWn->SW_u8PIN),DIO_u8INPUT);//set pin direction
    28f2:	fe 01       	movw	r30, r28
    28f4:	ee 58       	subi	r30, 0x8E	; 142
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	01 90       	ld	r0, Z+
    28fa:	f0 81       	ld	r31, Z
    28fc:	e0 2d       	mov	r30, r0
    28fe:	91 81       	ldd	r25, Z+1	; 0x01
    2900:	83 e0       	ldi	r24, 0x03	; 3
    2902:	69 2f       	mov	r22, r25
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
					DIO_u8SetPinValue(DIO_u8PORTD,(pstruct_SWn->SW_u8PIN),DIO_u8LOW);//set pin value to low for internal pulldown
    290a:	fe 01       	movw	r30, r28
    290c:	ee 58       	subi	r30, 0x8E	; 142
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	01 90       	ld	r0, Z+
    2912:	f0 81       	ld	r31, Z
    2914:	e0 2d       	mov	r30, r0
    2916:	91 81       	ldd	r25, Z+1	; 0x01
    2918:	83 e0       	ldi	r24, 0x03	; 3
    291a:	69 2f       	mov	r22, r25
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8SetPinValue>
					DIO_u8GetPinValue(DIO_u8PORTD,(pstruct_SWn->SW_u8PIN),pu8_SwitchState);//get the value of specified pin
    2922:	fe 01       	movw	r30, r28
    2924:	ee 58       	subi	r30, 0x8E	; 142
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	01 90       	ld	r0, Z+
    292a:	f0 81       	ld	r31, Z
    292c:	e0 2d       	mov	r30, r0
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	fe 01       	movw	r30, r28
    2932:	ec 58       	subi	r30, 0x8C	; 140
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	20 81       	ld	r18, Z
    2938:	31 81       	ldd	r19, Z+1	; 0x01
    293a:	83 e0       	ldi	r24, 0x03	; 3
    293c:	69 2f       	mov	r22, r25
    293e:	a9 01       	movw	r20, r18
    2940:	0e 94 87 08 	call	0x110e	; 0x110e <DIO_u8GetPinValue>
					if((pstruct_SWn->SW_u8SelfLockingType)==SW_u8Maintained)
    2944:	fe 01       	movw	r30, r28
    2946:	ee 58       	subi	r30, 0x8E	; 142
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	01 90       	ld	r0, Z+
    294c:	f0 81       	ld	r31, Z
    294e:	e0 2d       	mov	r30, r0
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	88 23       	and	r24, r24
    2954:	09 f4       	brne	.+2      	; 0x2958 <SW_u8GetState+0xd9e>
    2956:	9a c0       	rjmp	.+308    	; 0x2a8c <SW_u8GetState+0xed2>
					{
						//do nothing
					}
					else if((pstruct_SWn->SW_u8SelfLockingType)==SW_u8Temporary)//Debouncing technique
    2958:	fe 01       	movw	r30, r28
    295a:	ee 58       	subi	r30, 0x8E	; 142
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	01 90       	ld	r0, Z+
    2960:	f0 81       	ld	r31, Z
    2962:	e0 2d       	mov	r30, r0
    2964:	82 81       	ldd	r24, Z+2	; 0x02
    2966:	81 30       	cpi	r24, 0x01	; 1
    2968:	09 f0       	breq	.+2      	; 0x296c <SW_u8GetState+0xdb2>
    296a:	73 c0       	rjmp	.+230    	; 0x2a52 <SW_u8GetState+0xe98>
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	aa e7       	ldi	r26, 0x7A	; 122
    2972:	b3 e4       	ldi	r27, 0x43	; 67
    2974:	8b 87       	std	Y+11, r24	; 0x0b
    2976:	9c 87       	std	Y+12, r25	; 0x0c
    2978:	ad 87       	std	Y+13, r26	; 0x0d
    297a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297c:	6b 85       	ldd	r22, Y+11	; 0x0b
    297e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2980:	8d 85       	ldd	r24, Y+13	; 0x0d
    2982:	9e 85       	ldd	r25, Y+14	; 0x0e
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e8       	ldi	r19, 0x80	; 128
    2988:	4b e3       	ldi	r20, 0x3B	; 59
    298a:	55 e4       	ldi	r21, 0x45	; 69
    298c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	8f 83       	std	Y+7, r24	; 0x07
    2996:	98 87       	std	Y+8, r25	; 0x08
    2998:	a9 87       	std	Y+9, r26	; 0x09
    299a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    299c:	6f 81       	ldd	r22, Y+7	; 0x07
    299e:	78 85       	ldd	r23, Y+8	; 0x08
    29a0:	89 85       	ldd	r24, Y+9	; 0x09
    29a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e8       	ldi	r20, 0x80	; 128
    29aa:	5f e3       	ldi	r21, 0x3F	; 63
    29ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29b0:	88 23       	and	r24, r24
    29b2:	2c f4       	brge	.+10     	; 0x29be <SW_u8GetState+0xe04>
		__ticks = 1;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	9e 83       	std	Y+6, r25	; 0x06
    29ba:	8d 83       	std	Y+5, r24	; 0x05
    29bc:	3f c0       	rjmp	.+126    	; 0x2a3c <SW_u8GetState+0xe82>
	else if (__tmp > 65535)
    29be:	6f 81       	ldd	r22, Y+7	; 0x07
    29c0:	78 85       	ldd	r23, Y+8	; 0x08
    29c2:	89 85       	ldd	r24, Y+9	; 0x09
    29c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	3f ef       	ldi	r19, 0xFF	; 255
    29ca:	4f e7       	ldi	r20, 0x7F	; 127
    29cc:	57 e4       	ldi	r21, 0x47	; 71
    29ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29d2:	18 16       	cp	r1, r24
    29d4:	4c f5       	brge	.+82     	; 0x2a28 <SW_u8GetState+0xe6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29da:	8d 85       	ldd	r24, Y+13	; 0x0d
    29dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e2       	ldi	r20, 0x20	; 32
    29e4:	51 e4       	ldi	r21, 0x41	; 65
    29e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9e 83       	std	Y+6, r25	; 0x06
    29fc:	8d 83       	std	Y+5, r24	; 0x05
    29fe:	0f c0       	rjmp	.+30     	; 0x2a1e <SW_u8GetState+0xe64>
    2a00:	8c e2       	ldi	r24, 0x2C	; 44
    2a02:	91 e0       	ldi	r25, 0x01	; 1
    2a04:	9c 83       	std	Y+4, r25	; 0x04
    2a06:	8b 83       	std	Y+3, r24	; 0x03
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <SW_u8GetState+0xe52>
    2a10:	9c 83       	std	Y+4, r25	; 0x04
    2a12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	9e 81       	ldd	r25, Y+6	; 0x06
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	9e 83       	std	Y+6, r25	; 0x06
    2a1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a20:	9e 81       	ldd	r25, Y+6	; 0x06
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	69 f7       	brne	.-38     	; 0x2a00 <SW_u8GetState+0xe46>
    2a26:	32 c0       	rjmp	.+100    	; 0x2a8c <SW_u8GetState+0xed2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a28:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2a:	78 85       	ldd	r23, Y+8	; 0x08
    2a2c:	89 85       	ldd	r24, Y+9	; 0x09
    2a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
    2a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a40:	9a 83       	std	Y+2, r25	; 0x02
    2a42:	89 83       	std	Y+1, r24	; 0x01
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	9a 81       	ldd	r25, Y+2	; 0x02
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <SW_u8GetState+0xe8e>
    2a4c:	9a 83       	std	Y+2, r25	; 0x02
    2a4e:	89 83       	std	Y+1, r24	; 0x01
    2a50:	1d c0       	rjmp	.+58     	; 0x2a8c <SW_u8GetState+0xed2>
					{
						_delay_ms(250);//use delay (bad solution) until bouncing stops
					}
					else//error due to invalid Self Locking Type
					{
						Local_u8ErrorState=1;
    2a52:	fe 01       	movw	r30, r28
    2a54:	ef 58       	subi	r30, 0x8F	; 143
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	80 83       	st	Z, r24
    2a5c:	17 c0       	rjmp	.+46     	; 0x2a8c <SW_u8GetState+0xed2>
					}
					break;

					default://error in port number
					Local_u8ErrorState=1;
    2a5e:	fe 01       	movw	r30, r28
    2a60:	ef 58       	subi	r30, 0x8F	; 143
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	80 83       	st	Z, r24
    2a68:	11 c0       	rjmp	.+34     	; 0x2a8c <SW_u8GetState+0xed2>
				}
			}
			else//error due to invalid pin number
			{
				Local_u8ErrorState=1;
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	ef 58       	subi	r30, 0x8F	; 143
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	80 83       	st	Z, r24
    2a74:	0b c0       	rjmp	.+22     	; 0x2a8c <SW_u8GetState+0xed2>
			}			
		}
		else//error in switch pull type
		{
			Local_u8ErrorState=1;
    2a76:	fe 01       	movw	r30, r28
    2a78:	ef 58       	subi	r30, 0x8F	; 143
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	80 83       	st	Z, r24
    2a80:	05 c0       	rjmp	.+10     	; 0x2a8c <SW_u8GetState+0xed2>
		}
	}
	else//error due to ptr to null
	{
		Local_u8ErrorState=1;
    2a82:	fe 01       	movw	r30, r28
    2a84:	ef 58       	subi	r30, 0x8F	; 143
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	80 83       	st	Z, r24
	}
	return Local_u8ErrorState;
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	ef 58       	subi	r30, 0x8F	; 143
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	80 81       	ld	r24, Z
}
    2a94:	c7 58       	subi	r28, 0x87	; 135
    2a96:	df 4f       	sbci	r29, 0xFF	; 255
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	de bf       	out	0x3e, r29	; 62
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	cd bf       	out	0x3d, r28	; 61
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	1f 91       	pop	r17
    2aa8:	0f 91       	pop	r16
    2aaa:	08 95       	ret

00002aac <main>:
#include "DIO_interface.h"
#include "SWITCH_interface.h"
#include "SSD_interface.h"
#include <util/delay.h>
void main()
{
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	ec 97       	sbiw	r28, 0x3c	; 60
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	de bf       	out	0x3e, r29	; 62
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	cd bf       	out	0x3d, r28	; 61
	u8 switch_state;
	LED_t L1={DIO_u8PORTC,DIO_u8PIN_3,LED_u8ConnSource};
    2ac0:	ce 01       	movw	r24, r28
    2ac2:	8d 96       	adiw	r24, 0x2d	; 45
    2ac4:	99 af       	std	Y+57, r25	; 0x39
    2ac6:	88 af       	std	Y+56, r24	; 0x38
    2ac8:	e2 e7       	ldi	r30, 0x72	; 114
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	fb af       	std	Y+59, r31	; 0x3b
    2ace:	ea af       	std	Y+58, r30	; 0x3a
    2ad0:	f3 e0       	ldi	r31, 0x03	; 3
    2ad2:	fc af       	std	Y+60, r31	; 0x3c
    2ad4:	ea ad       	ldd	r30, Y+58	; 0x3a
    2ad6:	fb ad       	ldd	r31, Y+59	; 0x3b
    2ad8:	00 80       	ld	r0, Z
    2ada:	8a ad       	ldd	r24, Y+58	; 0x3a
    2adc:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ade:	01 96       	adiw	r24, 0x01	; 1
    2ae0:	9b af       	std	Y+59, r25	; 0x3b
    2ae2:	8a af       	std	Y+58, r24	; 0x3a
    2ae4:	e8 ad       	ldd	r30, Y+56	; 0x38
    2ae6:	f9 ad       	ldd	r31, Y+57	; 0x39
    2ae8:	00 82       	st	Z, r0
    2aea:	88 ad       	ldd	r24, Y+56	; 0x38
    2aec:	99 ad       	ldd	r25, Y+57	; 0x39
    2aee:	01 96       	adiw	r24, 0x01	; 1
    2af0:	99 af       	std	Y+57, r25	; 0x39
    2af2:	88 af       	std	Y+56, r24	; 0x38
    2af4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2af6:	91 50       	subi	r25, 0x01	; 1
    2af8:	9c af       	std	Y+60, r25	; 0x3c
    2afa:	ec ad       	ldd	r30, Y+60	; 0x3c
    2afc:	ee 23       	and	r30, r30
    2afe:	51 f7       	brne	.-44     	; 0x2ad4 <main+0x28>
	SW_t SW1={DIO_u8PORTC,DIO_u8PIN_7,SW_u8Temporary,SW_u8Pullup};
    2b00:	82 e0       	ldi	r24, 0x02	; 2
    2b02:	88 ab       	std	Y+48, r24	; 0x30
    2b04:	87 e0       	ldi	r24, 0x07	; 7
    2b06:	89 ab       	std	Y+49, r24	; 0x31
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	8a ab       	std	Y+50, r24	; 0x32
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	8b ab       	std	Y+51, r24	; 0x33
	SSD_t SSD1={DIO_u8PORTA,SSD_u8CommonAnode,DIO_u8PORTC,DIO_u8PIN_0};
    2b10:	1c aa       	std	Y+52, r1	; 0x34
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	8d ab       	std	Y+53, r24	; 0x35
    2b16:	82 e0       	ldi	r24, 0x02	; 2
    2b18:	8e ab       	std	Y+54, r24	; 0x36
    2b1a:	1f aa       	std	Y+55, r1	; 0x37
	while(1)
	{
		SW_u8GetState(&SW1, &switch_state);
    2b1c:	ce 01       	movw	r24, r28
    2b1e:	c0 96       	adiw	r24, 0x30	; 48
    2b20:	9e 01       	movw	r18, r28
    2b22:	24 5d       	subi	r18, 0xD4	; 212
    2b24:	3f 4f       	sbci	r19, 0xFF	; 255
    2b26:	b9 01       	movw	r22, r18
    2b28:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <SW_u8GetState>
		if(switch_state==0)
    2b2c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b2e:	88 23       	and	r24, r24
    2b30:	09 f0       	breq	.+2      	; 0x2b34 <main+0x88>
    2b32:	6d c1       	rjmp	.+730    	; 0x2e0e <main+0x362>
		{
			for(u8 i=0;i<=9;i++)
    2b34:	1b a6       	std	Y+43, r1	; 0x2b
    2b36:	7a c0       	rjmp	.+244    	; 0x2c2c <main+0x180>
			{
				SSD_u8ShowNumber(&SSD1,i);
    2b38:	ce 01       	movw	r24, r28
    2b3a:	c4 96       	adiw	r24, 0x34	; 52
    2b3c:	6b a5       	ldd	r22, Y+43	; 0x2b
    2b3e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <SSD_u8ShowNumber>
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	aa ef       	ldi	r26, 0xFA	; 250
    2b48:	b3 e4       	ldi	r27, 0x43	; 67
    2b4a:	8f a3       	std	Y+39, r24	; 0x27
    2b4c:	98 a7       	std	Y+40, r25	; 0x28
    2b4e:	a9 a7       	std	Y+41, r26	; 0x29
    2b50:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b52:	6f a1       	ldd	r22, Y+39	; 0x27
    2b54:	78 a5       	ldd	r23, Y+40	; 0x28
    2b56:	89 a5       	ldd	r24, Y+41	; 0x29
    2b58:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e8       	ldi	r19, 0x80	; 128
    2b5e:	4b e3       	ldi	r20, 0x3B	; 59
    2b60:	55 e4       	ldi	r21, 0x45	; 69
    2b62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	8b a3       	std	Y+35, r24	; 0x23
    2b6c:	9c a3       	std	Y+36, r25	; 0x24
    2b6e:	ad a3       	std	Y+37, r26	; 0x25
    2b70:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b72:	6b a1       	ldd	r22, Y+35	; 0x23
    2b74:	7c a1       	ldd	r23, Y+36	; 0x24
    2b76:	8d a1       	ldd	r24, Y+37	; 0x25
    2b78:	9e a1       	ldd	r25, Y+38	; 0x26
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e8       	ldi	r20, 0x80	; 128
    2b80:	5f e3       	ldi	r21, 0x3F	; 63
    2b82:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b86:	88 23       	and	r24, r24
    2b88:	2c f4       	brge	.+10     	; 0x2b94 <main+0xe8>
		__ticks = 1;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9a a3       	std	Y+34, r25	; 0x22
    2b90:	89 a3       	std	Y+33, r24	; 0x21
    2b92:	3f c0       	rjmp	.+126    	; 0x2c12 <main+0x166>
	else if (__tmp > 65535)
    2b94:	6b a1       	ldd	r22, Y+35	; 0x23
    2b96:	7c a1       	ldd	r23, Y+36	; 0x24
    2b98:	8d a1       	ldd	r24, Y+37	; 0x25
    2b9a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ba0:	4f e7       	ldi	r20, 0x7F	; 127
    2ba2:	57 e4       	ldi	r21, 0x47	; 71
    2ba4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ba8:	18 16       	cp	r1, r24
    2baa:	4c f5       	brge	.+82     	; 0x2bfe <main+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bac:	6f a1       	ldd	r22, Y+39	; 0x27
    2bae:	78 a5       	ldd	r23, Y+40	; 0x28
    2bb0:	89 a5       	ldd	r24, Y+41	; 0x29
    2bb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e2       	ldi	r20, 0x20	; 32
    2bba:	51 e4       	ldi	r21, 0x41	; 65
    2bbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	9a a3       	std	Y+34, r25	; 0x22
    2bd2:	89 a3       	std	Y+33, r24	; 0x21
    2bd4:	0f c0       	rjmp	.+30     	; 0x2bf4 <main+0x148>
    2bd6:	8c e2       	ldi	r24, 0x2C	; 44
    2bd8:	91 e0       	ldi	r25, 0x01	; 1
    2bda:	98 a3       	std	Y+32, r25	; 0x20
    2bdc:	8f 8f       	std	Y+31, r24	; 0x1f
    2bde:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2be0:	98 a1       	ldd	r25, Y+32	; 0x20
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <main+0x136>
    2be6:	98 a3       	std	Y+32, r25	; 0x20
    2be8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bea:	89 a1       	ldd	r24, Y+33	; 0x21
    2bec:	9a a1       	ldd	r25, Y+34	; 0x22
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	9a a3       	std	Y+34, r25	; 0x22
    2bf2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf4:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf6:	9a a1       	ldd	r25, Y+34	; 0x22
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	69 f7       	brne	.-38     	; 0x2bd6 <main+0x12a>
    2bfc:	14 c0       	rjmp	.+40     	; 0x2c26 <main+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfe:	6b a1       	ldd	r22, Y+35	; 0x23
    2c00:	7c a1       	ldd	r23, Y+36	; 0x24
    2c02:	8d a1       	ldd	r24, Y+37	; 0x25
    2c04:	9e a1       	ldd	r25, Y+38	; 0x26
    2c06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	9a a3       	std	Y+34, r25	; 0x22
    2c10:	89 a3       	std	Y+33, r24	; 0x21
    2c12:	89 a1       	ldd	r24, Y+33	; 0x21
    2c14:	9a a1       	ldd	r25, Y+34	; 0x22
    2c16:	9e 8f       	std	Y+30, r25	; 0x1e
    2c18:	8d 8f       	std	Y+29, r24	; 0x1d
    2c1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	f1 f7       	brne	.-4      	; 0x2c1e <main+0x172>
    2c22:	9e 8f       	std	Y+30, r25	; 0x1e
    2c24:	8d 8f       	std	Y+29, r24	; 0x1d
	while(1)
	{
		SW_u8GetState(&SW1, &switch_state);
		if(switch_state==0)
		{
			for(u8 i=0;i<=9;i++)
    2c26:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c28:	8f 5f       	subi	r24, 0xFF	; 255
    2c2a:	8b a7       	std	Y+43, r24	; 0x2b
    2c2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c2e:	8a 30       	cpi	r24, 0x0A	; 10
    2c30:	08 f4       	brcc	.+2      	; 0x2c34 <main+0x188>
    2c32:	82 cf       	rjmp	.-252    	; 0x2b38 <main+0x8c>
			{
				SSD_u8ShowNumber(&SSD1,i);
				_delay_ms(500);
			}
			LED_u8TurnON(&L1);
    2c34:	ce 01       	movw	r24, r28
    2c36:	8d 96       	adiw	r24, 0x2d	; 45
    2c38:	0e 94 1f 09 	call	0x123e	; 0x123e <LED_u8TurnON>
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	a8 ec       	ldi	r26, 0xC8	; 200
    2c42:	b2 e4       	ldi	r27, 0x42	; 66
    2c44:	89 8f       	std	Y+25, r24	; 0x19
    2c46:	9a 8f       	std	Y+26, r25	; 0x1a
    2c48:	ab 8f       	std	Y+27, r26	; 0x1b
    2c4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e8       	ldi	r19, 0x80	; 128
    2c58:	4b e3       	ldi	r20, 0x3B	; 59
    2c5a:	55 e4       	ldi	r21, 0x45	; 69
    2c5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	8d 8b       	std	Y+21, r24	; 0x15
    2c66:	9e 8b       	std	Y+22, r25	; 0x16
    2c68:	af 8b       	std	Y+23, r26	; 0x17
    2c6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c70:	8f 89       	ldd	r24, Y+23	; 0x17
    2c72:	98 8d       	ldd	r25, Y+24	; 0x18
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e8       	ldi	r20, 0x80	; 128
    2c7a:	5f e3       	ldi	r21, 0x3F	; 63
    2c7c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c80:	88 23       	and	r24, r24
    2c82:	2c f4       	brge	.+10     	; 0x2c8e <main+0x1e2>
		__ticks = 1;
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	9c 8b       	std	Y+20, r25	; 0x14
    2c8a:	8b 8b       	std	Y+19, r24	; 0x13
    2c8c:	3f c0       	rjmp	.+126    	; 0x2d0c <main+0x260>
	else if (__tmp > 65535)
    2c8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c90:	7e 89       	ldd	r23, Y+22	; 0x16
    2c92:	8f 89       	ldd	r24, Y+23	; 0x17
    2c94:	98 8d       	ldd	r25, Y+24	; 0x18
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	3f ef       	ldi	r19, 0xFF	; 255
    2c9a:	4f e7       	ldi	r20, 0x7F	; 127
    2c9c:	57 e4       	ldi	r21, 0x47	; 71
    2c9e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ca2:	18 16       	cp	r1, r24
    2ca4:	4c f5       	brge	.+82     	; 0x2cf8 <main+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ca8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2caa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e2       	ldi	r20, 0x20	; 32
    2cb4:	51 e4       	ldi	r21, 0x41	; 65
    2cb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	9c 8b       	std	Y+20, r25	; 0x14
    2ccc:	8b 8b       	std	Y+19, r24	; 0x13
    2cce:	0f c0       	rjmp	.+30     	; 0x2cee <main+0x242>
    2cd0:	8c e2       	ldi	r24, 0x2C	; 44
    2cd2:	91 e0       	ldi	r25, 0x01	; 1
    2cd4:	9a 8b       	std	Y+18, r25	; 0x12
    2cd6:	89 8b       	std	Y+17, r24	; 0x11
    2cd8:	89 89       	ldd	r24, Y+17	; 0x11
    2cda:	9a 89       	ldd	r25, Y+18	; 0x12
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	f1 f7       	brne	.-4      	; 0x2cdc <main+0x230>
    2ce0:	9a 8b       	std	Y+18, r25	; 0x12
    2ce2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	9c 8b       	std	Y+20, r25	; 0x14
    2cec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cee:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf2:	00 97       	sbiw	r24, 0x00	; 0
    2cf4:	69 f7       	brne	.-38     	; 0x2cd0 <main+0x224>
    2cf6:	14 c0       	rjmp	.+40     	; 0x2d20 <main+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cfa:	7e 89       	ldd	r23, Y+22	; 0x16
    2cfc:	8f 89       	ldd	r24, Y+23	; 0x17
    2cfe:	98 8d       	ldd	r25, Y+24	; 0x18
    2d00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	9c 8b       	std	Y+20, r25	; 0x14
    2d0a:	8b 8b       	std	Y+19, r24	; 0x13
    2d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d10:	98 8b       	std	Y+16, r25	; 0x10
    2d12:	8f 87       	std	Y+15, r24	; 0x0f
    2d14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d16:	98 89       	ldd	r25, Y+16	; 0x10
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <main+0x26c>
    2d1c:	98 8b       	std	Y+16, r25	; 0x10
    2d1e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			LED_u8TurnOFF(&L1);
    2d20:	ce 01       	movw	r24, r28
    2d22:	8d 96       	adiw	r24, 0x2d	; 45
    2d24:	0e 94 1d 0a 	call	0x143a	; 0x143a <LED_u8TurnOFF>
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	a8 ec       	ldi	r26, 0xC8	; 200
    2d2e:	b2 e4       	ldi	r27, 0x42	; 66
    2d30:	8b 87       	std	Y+11, r24	; 0x0b
    2d32:	9c 87       	std	Y+12, r25	; 0x0c
    2d34:	ad 87       	std	Y+13, r26	; 0x0d
    2d36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e8       	ldi	r19, 0x80	; 128
    2d44:	4b e3       	ldi	r20, 0x3B	; 59
    2d46:	55 e4       	ldi	r21, 0x45	; 69
    2d48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	8f 83       	std	Y+7, r24	; 0x07
    2d52:	98 87       	std	Y+8, r25	; 0x08
    2d54:	a9 87       	std	Y+9, r26	; 0x09
    2d56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d58:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5a:	78 85       	ldd	r23, Y+8	; 0x08
    2d5c:	89 85       	ldd	r24, Y+9	; 0x09
    2d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e8       	ldi	r20, 0x80	; 128
    2d66:	5f e3       	ldi	r21, 0x3F	; 63
    2d68:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d6c:	88 23       	and	r24, r24
    2d6e:	2c f4       	brge	.+10     	; 0x2d7a <main+0x2ce>
		__ticks = 1;
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9e 83       	std	Y+6, r25	; 0x06
    2d76:	8d 83       	std	Y+5, r24	; 0x05
    2d78:	3f c0       	rjmp	.+126    	; 0x2df8 <main+0x34c>
	else if (__tmp > 65535)
    2d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7c:	78 85       	ldd	r23, Y+8	; 0x08
    2d7e:	89 85       	ldd	r24, Y+9	; 0x09
    2d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	3f ef       	ldi	r19, 0xFF	; 255
    2d86:	4f e7       	ldi	r20, 0x7F	; 127
    2d88:	57 e4       	ldi	r21, 0x47	; 71
    2d8a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d8e:	18 16       	cp	r1, r24
    2d90:	4c f5       	brge	.+82     	; 0x2de4 <main+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e2       	ldi	r20, 0x20	; 32
    2da0:	51 e4       	ldi	r21, 0x41	; 65
    2da2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	bc 01       	movw	r22, r24
    2dac:	cd 01       	movw	r24, r26
    2dae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	9e 83       	std	Y+6, r25	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
    2dba:	0f c0       	rjmp	.+30     	; 0x2dda <main+0x32e>
    2dbc:	8c e2       	ldi	r24, 0x2C	; 44
    2dbe:	91 e0       	ldi	r25, 0x01	; 1
    2dc0:	9c 83       	std	Y+4, r25	; 0x04
    2dc2:	8b 83       	std	Y+3, r24	; 0x03
    2dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <main+0x31c>
    2dcc:	9c 83       	std	Y+4, r25	; 0x04
    2dce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	9e 83       	std	Y+6, r25	; 0x06
    2dd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dda:	8d 81       	ldd	r24, Y+5	; 0x05
    2ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	69 f7       	brne	.-38     	; 0x2dbc <main+0x310>
    2de2:	9c ce       	rjmp	.-712    	; 0x2b1c <main+0x70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de4:	6f 81       	ldd	r22, Y+7	; 0x07
    2de6:	78 85       	ldd	r23, Y+8	; 0x08
    2de8:	89 85       	ldd	r24, Y+9	; 0x09
    2dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	9e 83       	std	Y+6, r25	; 0x06
    2df6:	8d 83       	std	Y+5, r24	; 0x05
    2df8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfc:	9a 83       	std	Y+2, r25	; 0x02
    2dfe:	89 83       	std	Y+1, r24	; 0x01
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	9a 81       	ldd	r25, Y+2	; 0x02
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <main+0x358>
    2e08:	9a 83       	std	Y+2, r25	; 0x02
    2e0a:	89 83       	std	Y+1, r24	; 0x01
    2e0c:	87 ce       	rjmp	.-754    	; 0x2b1c <main+0x70>
			_delay_ms(100);
		}
		else
			SSD_u8Shutdown(&SSD1);
    2e0e:	ce 01       	movw	r24, r28
    2e10:	c4 96       	adiw	r24, 0x34	; 52
    2e12:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <SSD_u8Shutdown>
    2e16:	82 ce       	rjmp	.-764    	; 0x2b1c <main+0x70>

00002e18 <__prologue_saves__>:
    2e18:	2f 92       	push	r2
    2e1a:	3f 92       	push	r3
    2e1c:	4f 92       	push	r4
    2e1e:	5f 92       	push	r5
    2e20:	6f 92       	push	r6
    2e22:	7f 92       	push	r7
    2e24:	8f 92       	push	r8
    2e26:	9f 92       	push	r9
    2e28:	af 92       	push	r10
    2e2a:	bf 92       	push	r11
    2e2c:	cf 92       	push	r12
    2e2e:	df 92       	push	r13
    2e30:	ef 92       	push	r14
    2e32:	ff 92       	push	r15
    2e34:	0f 93       	push	r16
    2e36:	1f 93       	push	r17
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	cd b7       	in	r28, 0x3d	; 61
    2e3e:	de b7       	in	r29, 0x3e	; 62
    2e40:	ca 1b       	sub	r28, r26
    2e42:	db 0b       	sbc	r29, r27
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	f8 94       	cli
    2e48:	de bf       	out	0x3e, r29	; 62
    2e4a:	0f be       	out	0x3f, r0	; 63
    2e4c:	cd bf       	out	0x3d, r28	; 61
    2e4e:	09 94       	ijmp

00002e50 <__epilogue_restores__>:
    2e50:	2a 88       	ldd	r2, Y+18	; 0x12
    2e52:	39 88       	ldd	r3, Y+17	; 0x11
    2e54:	48 88       	ldd	r4, Y+16	; 0x10
    2e56:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e58:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e60:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e62:	b9 84       	ldd	r11, Y+9	; 0x09
    2e64:	c8 84       	ldd	r12, Y+8	; 0x08
    2e66:	df 80       	ldd	r13, Y+7	; 0x07
    2e68:	ee 80       	ldd	r14, Y+6	; 0x06
    2e6a:	fd 80       	ldd	r15, Y+5	; 0x05
    2e6c:	0c 81       	ldd	r16, Y+4	; 0x04
    2e6e:	1b 81       	ldd	r17, Y+3	; 0x03
    2e70:	aa 81       	ldd	r26, Y+2	; 0x02
    2e72:	b9 81       	ldd	r27, Y+1	; 0x01
    2e74:	ce 0f       	add	r28, r30
    2e76:	d1 1d       	adc	r29, r1
    2e78:	0f b6       	in	r0, 0x3f	; 63
    2e7a:	f8 94       	cli
    2e7c:	de bf       	out	0x3e, r29	; 62
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	cd bf       	out	0x3d, r28	; 61
    2e82:	ed 01       	movw	r28, r26
    2e84:	08 95       	ret

00002e86 <_exit>:
    2e86:	f8 94       	cli

00002e88 <__stop_program>:
    2e88:	ff cf       	rjmp	.-2      	; 0x2e88 <__stop_program>
