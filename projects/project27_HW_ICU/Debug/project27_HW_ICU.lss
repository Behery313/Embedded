
project27_HW_ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000025b0  00002644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080006c  0080006c  00002650  2**0
                  ALLOC
  3 .stab         000024f0  00000000  00000000  00002650  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001126  00000000  00000000  00004b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000097f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009958  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a3b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__vector_1>
       8:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__vector_2>
       c:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__vector_10>
      2c:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b7 11 	call	0x236e	; 0x236e <main>
      8a:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 af 12 	jmp	0x255e	; 0x255e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_VoidSendCommand>:
/*Send data counter is number of times that function send data was called .The number
 *specifies the position of the next character to be written on the first row */

/*send command in 4 bit mode operate on 4 bits only when using it send 4 bits ONLY*/
void CLCD_VoidSendCommand(u8 Copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	/**********SET RS to 0 for command*************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8LOW);
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	
	/**********SET RW to 0 to write****************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8LOW);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>

	/*4 BIT OPERATION*/
#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE

	/*send the 4 bits received*/
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_0,GET_BIT(Copy_u8Command,0));
     b70:	8f 85       	ldd	r24, Y+15	; 0x0f
     b72:	98 2f       	mov	r25, r24
     b74:	91 70       	andi	r25, 0x01	; 1
     b76:	83 e0       	ldi	r24, 0x03	; 3
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	49 2f       	mov	r20, r25
     b7c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_1,GET_BIT(Copy_u8Command,1));
     b80:	8f 85       	ldd	r24, Y+15	; 0x0f
     b82:	86 95       	lsr	r24
     b84:	98 2f       	mov	r25, r24
     b86:	91 70       	andi	r25, 0x01	; 1
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	61 e0       	ldi	r22, 0x01	; 1
     b8c:	49 2f       	mov	r20, r25
     b8e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_2,GET_BIT(Copy_u8Command,2));
     b92:	8f 85       	ldd	r24, Y+15	; 0x0f
     b94:	86 95       	lsr	r24
     b96:	86 95       	lsr	r24
     b98:	98 2f       	mov	r25, r24
     b9a:	91 70       	andi	r25, 0x01	; 1
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	62 e0       	ldi	r22, 0x02	; 2
     ba0:	49 2f       	mov	r20, r25
     ba2:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_3,GET_BIT(Copy_u8Command,3));
     ba6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ba8:	86 95       	lsr	r24
     baa:	86 95       	lsr	r24
     bac:	86 95       	lsr	r24
     bae:	98 2f       	mov	r25, r24
     bb0:	91 70       	andi	r25, 0x01	; 1
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	63 e0       	ldi	r22, 0x03	; 3
     bb6:	49 2f       	mov	r20, r25
     bb8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
//	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_2,GET_BIT(Copy_u8Command,2));
//	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_3,GET_BIT(Copy_u8Command,3));
#endif
	
	/**********Send enable pulse********************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8HIGH);//set enable pin to high for the microcontroller on the lcd to read the data sent to it
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	62 e0       	ldi	r22, 0x02	; 2
     bc0:	41 e0       	ldi	r20, 0x01	; 1
     bc2:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e4       	ldi	r27, 0x40	; 64
     bce:	8b 87       	std	Y+11, r24	; 0x0b
     bd0:	9c 87       	std	Y+12, r25	; 0x0c
     bd2:	ad 87       	std	Y+13, r26	; 0x0d
     bd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd6:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd8:	7c 85       	ldd	r23, Y+12	; 0x0c
     bda:	8d 85       	ldd	r24, Y+13	; 0x0d
     bdc:	9e 85       	ldd	r25, Y+14	; 0x0e
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e8       	ldi	r19, 0x80	; 128
     be2:	4b e3       	ldi	r20, 0x3B	; 59
     be4:	55 e4       	ldi	r21, 0x45	; 69
     be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bea:	dc 01       	movw	r26, r24
     bec:	cb 01       	movw	r24, r22
     bee:	8f 83       	std	Y+7, r24	; 0x07
     bf0:	98 87       	std	Y+8, r25	; 0x08
     bf2:	a9 87       	std	Y+9, r26	; 0x09
     bf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bf6:	6f 81       	ldd	r22, Y+7	; 0x07
     bf8:	78 85       	ldd	r23, Y+8	; 0x08
     bfa:	89 85       	ldd	r24, Y+9	; 0x09
     bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e8       	ldi	r20, 0x80	; 128
     c04:	5f e3       	ldi	r21, 0x3F	; 63
     c06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c0a:	88 23       	and	r24, r24
     c0c:	2c f4       	brge	.+10     	; 0xc18 <CLCD_VoidSendCommand+0xd2>
		__ticks = 1;
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	9e 83       	std	Y+6, r25	; 0x06
     c14:	8d 83       	std	Y+5, r24	; 0x05
     c16:	3f c0       	rjmp	.+126    	; 0xc96 <CLCD_VoidSendCommand+0x150>
	else if (__tmp > 65535)
     c18:	6f 81       	ldd	r22, Y+7	; 0x07
     c1a:	78 85       	ldd	r23, Y+8	; 0x08
     c1c:	89 85       	ldd	r24, Y+9	; 0x09
     c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	3f ef       	ldi	r19, 0xFF	; 255
     c24:	4f e7       	ldi	r20, 0x7F	; 127
     c26:	57 e4       	ldi	r21, 0x47	; 71
     c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c2c:	18 16       	cp	r1, r24
     c2e:	4c f5       	brge	.+82     	; 0xc82 <CLCD_VoidSendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c30:	6b 85       	ldd	r22, Y+11	; 0x0b
     c32:	7c 85       	ldd	r23, Y+12	; 0x0c
     c34:	8d 85       	ldd	r24, Y+13	; 0x0d
     c36:	9e 85       	ldd	r25, Y+14	; 0x0e
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	40 e2       	ldi	r20, 0x20	; 32
     c3e:	51 e4       	ldi	r21, 0x41	; 65
     c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	bc 01       	movw	r22, r24
     c4a:	cd 01       	movw	r24, r26
     c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	9e 83       	std	Y+6, r25	; 0x06
     c56:	8d 83       	std	Y+5, r24	; 0x05
     c58:	0f c0       	rjmp	.+30     	; 0xc78 <CLCD_VoidSendCommand+0x132>
     c5a:	8c e2       	ldi	r24, 0x2C	; 44
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	9c 83       	std	Y+4, r25	; 0x04
     c60:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c62:	8b 81       	ldd	r24, Y+3	; 0x03
     c64:	9c 81       	ldd	r25, Y+4	; 0x04
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <CLCD_VoidSendCommand+0x120>
     c6a:	9c 83       	std	Y+4, r25	; 0x04
     c6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6e:	8d 81       	ldd	r24, Y+5	; 0x05
     c70:	9e 81       	ldd	r25, Y+6	; 0x06
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	9e 83       	std	Y+6, r25	; 0x06
     c76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c78:	8d 81       	ldd	r24, Y+5	; 0x05
     c7a:	9e 81       	ldd	r25, Y+6	; 0x06
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	69 f7       	brne	.-38     	; 0xc5a <CLCD_VoidSendCommand+0x114>
     c80:	14 c0       	rjmp	.+40     	; 0xcaa <CLCD_VoidSendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c82:	6f 81       	ldd	r22, Y+7	; 0x07
     c84:	78 85       	ldd	r23, Y+8	; 0x08
     c86:	89 85       	ldd	r24, Y+9	; 0x09
     c88:	9a 85       	ldd	r25, Y+10	; 0x0a
     c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	9e 83       	std	Y+6, r25	; 0x06
     c94:	8d 83       	std	Y+5, r24	; 0x05
     c96:	8d 81       	ldd	r24, Y+5	; 0x05
     c98:	9e 81       	ldd	r25, Y+6	; 0x06
     c9a:	9a 83       	std	Y+2, r25	; 0x02
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	9a 81       	ldd	r25, Y+2	; 0x02
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <CLCD_VoidSendCommand+0x15c>
     ca6:	9a 83       	std	Y+2, r25	; 0x02
     ca8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);//max delay value specified by the initializations after sending the command
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8LOW);
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	62 e0       	ldi	r22, 0x02	; 2
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
}
     cb4:	2f 96       	adiw	r28, 0x0f	; 15
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <CLCD_VoidSendData>:

/*send data can work in 4 bit mode while sending 8 bit data*/
void CLCD_VoidSendData(u8 Copy_u8Data)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	6d 97       	sbiw	r28, 0x1d	; 29
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	8d 8f       	std	Y+29, r24	; 0x1d
	/*check if the function is called 16 times the first row is completely filled then write to the second row*/
	if(Global_u8SendDataCounter==MAX_COLUMNS)
     cdc:	80 91 6c 00 	lds	r24, 0x006C
     ce0:	80 31       	cpi	r24, 0x10	; 16
     ce2:	21 f4       	brne	.+8      	; 0xcec <CLCD_VoidSendData+0x26>
	{
		CLCD_VoidGoToXY(1,0);
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_VoidGoToXY>
	}
	/**********SET RS to 1 for DATA****************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8HIGH);
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	41 e0       	ldi	r20, 0x01	; 1
     cf2:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	/**********SET RW to 0 to write****************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8LOW);
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_8_BIT_DATA_PORT,Copy_u8Data);

	/*4 BIT OPERATION*/
	#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE
	/*send the 4 MSBs */
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_0,GET_BIT(Copy_u8Data,4));
     d00:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d02:	82 95       	swap	r24
     d04:	8f 70       	andi	r24, 0x0F	; 15
     d06:	98 2f       	mov	r25, r24
     d08:	91 70       	andi	r25, 0x01	; 1
     d0a:	83 e0       	ldi	r24, 0x03	; 3
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	49 2f       	mov	r20, r25
     d10:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_1,GET_BIT(Copy_u8Data,5));
     d14:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d16:	82 95       	swap	r24
     d18:	86 95       	lsr	r24
     d1a:	87 70       	andi	r24, 0x07	; 7
     d1c:	98 2f       	mov	r25, r24
     d1e:	91 70       	andi	r25, 0x01	; 1
     d20:	83 e0       	ldi	r24, 0x03	; 3
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	49 2f       	mov	r20, r25
     d26:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_2,GET_BIT(Copy_u8Data,6));
     d2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d2c:	82 95       	swap	r24
     d2e:	86 95       	lsr	r24
     d30:	86 95       	lsr	r24
     d32:	83 70       	andi	r24, 0x03	; 3
     d34:	98 2f       	mov	r25, r24
     d36:	91 70       	andi	r25, 0x01	; 1
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	62 e0       	ldi	r22, 0x02	; 2
     d3c:	49 2f       	mov	r20, r25
     d3e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_3,GET_BIT(Copy_u8Data,7));
     d42:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d44:	98 2f       	mov	r25, r24
     d46:	99 1f       	adc	r25, r25
     d48:	99 27       	eor	r25, r25
     d4a:	99 1f       	adc	r25, r25
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	63 e0       	ldi	r22, 0x03	; 3
     d50:	49 2f       	mov	r20, r25
     d52:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
//CHECK*/*****************************************************************************************************************************/
//CHECK	/*send enable pulse*/
/*CHECK*/ DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8HIGH);//set enable pin to high for the microcontroller on the lcd to read the data sent to it
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	62 e0       	ldi	r22, 0x02	; 2
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	a0 e0       	ldi	r26, 0x00	; 0
     d66:	b0 e4       	ldi	r27, 0x40	; 64
     d68:	89 8f       	std	Y+25, r24	; 0x19
     d6a:	9a 8f       	std	Y+26, r25	; 0x1a
     d6c:	ab 8f       	std	Y+27, r26	; 0x1b
     d6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d70:	69 8d       	ldd	r22, Y+25	; 0x19
     d72:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d74:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d76:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e8       	ldi	r19, 0x80	; 128
     d7c:	4b e3       	ldi	r20, 0x3B	; 59
     d7e:	55 e4       	ldi	r21, 0x45	; 69
     d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	8d 8b       	std	Y+21, r24	; 0x15
     d8a:	9e 8b       	std	Y+22, r25	; 0x16
     d8c:	af 8b       	std	Y+23, r26	; 0x17
     d8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d90:	6d 89       	ldd	r22, Y+21	; 0x15
     d92:	7e 89       	ldd	r23, Y+22	; 0x16
     d94:	8f 89       	ldd	r24, Y+23	; 0x17
     d96:	98 8d       	ldd	r25, Y+24	; 0x18
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	40 e8       	ldi	r20, 0x80	; 128
     d9e:	5f e3       	ldi	r21, 0x3F	; 63
     da0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     da4:	88 23       	and	r24, r24
     da6:	2c f4       	brge	.+10     	; 0xdb2 <CLCD_VoidSendData+0xec>
		__ticks = 1;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	9c 8b       	std	Y+20, r25	; 0x14
     dae:	8b 8b       	std	Y+19, r24	; 0x13
     db0:	3f c0       	rjmp	.+126    	; 0xe30 <CLCD_VoidSendData+0x16a>
	else if (__tmp > 65535)
     db2:	6d 89       	ldd	r22, Y+21	; 0x15
     db4:	7e 89       	ldd	r23, Y+22	; 0x16
     db6:	8f 89       	ldd	r24, Y+23	; 0x17
     db8:	98 8d       	ldd	r25, Y+24	; 0x18
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	3f ef       	ldi	r19, 0xFF	; 255
     dbe:	4f e7       	ldi	r20, 0x7F	; 127
     dc0:	57 e4       	ldi	r21, 0x47	; 71
     dc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dc6:	18 16       	cp	r1, r24
     dc8:	4c f5       	brge	.+82     	; 0xe1c <CLCD_VoidSendData+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dca:	69 8d       	ldd	r22, Y+25	; 0x19
     dcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dce:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 e2       	ldi	r20, 0x20	; 32
     dd8:	51 e4       	ldi	r21, 0x41	; 65
     dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	bc 01       	movw	r22, r24
     de4:	cd 01       	movw	r24, r26
     de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	9c 8b       	std	Y+20, r25	; 0x14
     df0:	8b 8b       	std	Y+19, r24	; 0x13
     df2:	0f c0       	rjmp	.+30     	; 0xe12 <CLCD_VoidSendData+0x14c>
     df4:	8c e2       	ldi	r24, 0x2C	; 44
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	9a 8b       	std	Y+18, r25	; 0x12
     dfa:	89 8b       	std	Y+17, r24	; 0x11
     dfc:	89 89       	ldd	r24, Y+17	; 0x11
     dfe:	9a 89       	ldd	r25, Y+18	; 0x12
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <CLCD_VoidSendData+0x13a>
     e04:	9a 8b       	std	Y+18, r25	; 0x12
     e06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e08:	8b 89       	ldd	r24, Y+19	; 0x13
     e0a:	9c 89       	ldd	r25, Y+20	; 0x14
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	9c 8b       	std	Y+20, r25	; 0x14
     e10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e12:	8b 89       	ldd	r24, Y+19	; 0x13
     e14:	9c 89       	ldd	r25, Y+20	; 0x14
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	69 f7       	brne	.-38     	; 0xdf4 <CLCD_VoidSendData+0x12e>
     e1a:	14 c0       	rjmp	.+40     	; 0xe44 <CLCD_VoidSendData+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e1c:	6d 89       	ldd	r22, Y+21	; 0x15
     e1e:	7e 89       	ldd	r23, Y+22	; 0x16
     e20:	8f 89       	ldd	r24, Y+23	; 0x17
     e22:	98 8d       	ldd	r25, Y+24	; 0x18
     e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	9c 8b       	std	Y+20, r25	; 0x14
     e2e:	8b 8b       	std	Y+19, r24	; 0x13
     e30:	8b 89       	ldd	r24, Y+19	; 0x13
     e32:	9c 89       	ldd	r25, Y+20	; 0x14
     e34:	98 8b       	std	Y+16, r25	; 0x10
     e36:	8f 87       	std	Y+15, r24	; 0x0f
     e38:	8f 85       	ldd	r24, Y+15	; 0x0f
     e3a:	98 89       	ldd	r25, Y+16	; 0x10
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <CLCD_VoidSendData+0x176>
     e40:	98 8b       	std	Y+16, r25	; 0x10
     e42:	8f 87       	std	Y+15, r24	; 0x0f
/*CHECK*/		_delay_ms(2);//max delay value specified by the initializations after sending the command
/*CHECK*/	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8LOW);
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	62 e0       	ldi	r22, 0x02	; 2
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	/*****************************************************************************************************************************/
	/*send the 4 LSBs*/
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_0,GET_BIT(Copy_u8Data,0));
     e4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e50:	98 2f       	mov	r25, r24
     e52:	91 70       	andi	r25, 0x01	; 1
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	49 2f       	mov	r20, r25
     e5a:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_1,GET_BIT(Copy_u8Data,1));
     e5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e60:	86 95       	lsr	r24
     e62:	98 2f       	mov	r25, r24
     e64:	91 70       	andi	r25, 0x01	; 1
     e66:	83 e0       	ldi	r24, 0x03	; 3
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	49 2f       	mov	r20, r25
     e6c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_2,GET_BIT(Copy_u8Data,2));
     e70:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e72:	86 95       	lsr	r24
     e74:	86 95       	lsr	r24
     e76:	98 2f       	mov	r25, r24
     e78:	91 70       	andi	r25, 0x01	; 1
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	62 e0       	ldi	r22, 0x02	; 2
     e7e:	49 2f       	mov	r20, r25
     e80:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_3,GET_BIT(Copy_u8Data,3));
     e84:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e86:	86 95       	lsr	r24
     e88:	86 95       	lsr	r24
     e8a:	86 95       	lsr	r24
     e8c:	98 2f       	mov	r25, r24
     e8e:	91 70       	andi	r25, 0x01	; 1
     e90:	83 e0       	ldi	r24, 0x03	; 3
     e92:	63 e0       	ldi	r22, 0x03	; 3
     e94:	49 2f       	mov	r20, r25
     e96:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
#endif
	/**********Send enable pulse********************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8HIGH);//set enable pin to high for the microcontroller on the lcd to read the data sent to it
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	62 e0       	ldi	r22, 0x02	; 2
     e9e:	41 e0       	ldi	r20, 0x01	; 1
     ea0:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	a0 e0       	ldi	r26, 0x00	; 0
     eaa:	b0 e4       	ldi	r27, 0x40	; 64
     eac:	8b 87       	std	Y+11, r24	; 0x0b
     eae:	9c 87       	std	Y+12, r25	; 0x0c
     eb0:	ad 87       	std	Y+13, r26	; 0x0d
     eb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eba:	9e 85       	ldd	r25, Y+14	; 0x0e
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e8       	ldi	r19, 0x80	; 128
     ec0:	4b e3       	ldi	r20, 0x3B	; 59
     ec2:	55 e4       	ldi	r21, 0x45	; 69
     ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	8f 83       	std	Y+7, r24	; 0x07
     ece:	98 87       	std	Y+8, r25	; 0x08
     ed0:	a9 87       	std	Y+9, r26	; 0x09
     ed2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ed4:	6f 81       	ldd	r22, Y+7	; 0x07
     ed6:	78 85       	ldd	r23, Y+8	; 0x08
     ed8:	89 85       	ldd	r24, Y+9	; 0x09
     eda:	9a 85       	ldd	r25, Y+10	; 0x0a
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e8       	ldi	r20, 0x80	; 128
     ee2:	5f e3       	ldi	r21, 0x3F	; 63
     ee4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ee8:	88 23       	and	r24, r24
     eea:	2c f4       	brge	.+10     	; 0xef6 <CLCD_VoidSendData+0x230>
		__ticks = 1;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	9e 83       	std	Y+6, r25	; 0x06
     ef2:	8d 83       	std	Y+5, r24	; 0x05
     ef4:	3f c0       	rjmp	.+126    	; 0xf74 <CLCD_VoidSendData+0x2ae>
	else if (__tmp > 65535)
     ef6:	6f 81       	ldd	r22, Y+7	; 0x07
     ef8:	78 85       	ldd	r23, Y+8	; 0x08
     efa:	89 85       	ldd	r24, Y+9	; 0x09
     efc:	9a 85       	ldd	r25, Y+10	; 0x0a
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	3f ef       	ldi	r19, 0xFF	; 255
     f02:	4f e7       	ldi	r20, 0x7F	; 127
     f04:	57 e4       	ldi	r21, 0x47	; 71
     f06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f0a:	18 16       	cp	r1, r24
     f0c:	4c f5       	brge	.+82     	; 0xf60 <CLCD_VoidSendData+0x29a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f10:	7c 85       	ldd	r23, Y+12	; 0x0c
     f12:	8d 85       	ldd	r24, Y+13	; 0x0d
     f14:	9e 85       	ldd	r25, Y+14	; 0x0e
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e2       	ldi	r20, 0x20	; 32
     f1c:	51 e4       	ldi	r21, 0x41	; 65
     f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	bc 01       	movw	r22, r24
     f28:	cd 01       	movw	r24, r26
     f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	8d 83       	std	Y+5, r24	; 0x05
     f36:	0f c0       	rjmp	.+30     	; 0xf56 <CLCD_VoidSendData+0x290>
     f38:	8c e2       	ldi	r24, 0x2C	; 44
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	9c 83       	std	Y+4, r25	; 0x04
     f3e:	8b 83       	std	Y+3, r24	; 0x03
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <CLCD_VoidSendData+0x27e>
     f48:	9c 83       	std	Y+4, r25	; 0x04
     f4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f4c:	8d 81       	ldd	r24, Y+5	; 0x05
     f4e:	9e 81       	ldd	r25, Y+6	; 0x06
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	9e 83       	std	Y+6, r25	; 0x06
     f54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f56:	8d 81       	ldd	r24, Y+5	; 0x05
     f58:	9e 81       	ldd	r25, Y+6	; 0x06
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	69 f7       	brne	.-38     	; 0xf38 <CLCD_VoidSendData+0x272>
     f5e:	14 c0       	rjmp	.+40     	; 0xf88 <CLCD_VoidSendData+0x2c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f60:	6f 81       	ldd	r22, Y+7	; 0x07
     f62:	78 85       	ldd	r23, Y+8	; 0x08
     f64:	89 85       	ldd	r24, Y+9	; 0x09
     f66:	9a 85       	ldd	r25, Y+10	; 0x0a
     f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	9e 83       	std	Y+6, r25	; 0x06
     f72:	8d 83       	std	Y+5, r24	; 0x05
     f74:	8d 81       	ldd	r24, Y+5	; 0x05
     f76:	9e 81       	ldd	r25, Y+6	; 0x06
     f78:	9a 83       	std	Y+2, r25	; 0x02
     f7a:	89 83       	std	Y+1, r24	; 0x01
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <CLCD_VoidSendData+0x2ba>
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);//delay value specified by the datasheet
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8LOW);
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	62 e0       	ldi	r22, 0x02	; 2
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_u8SetPinValue>

	/*increment the static variable so if it reaches 15*/
		Global_u8SendDataCounter++;
     f92:	80 91 6c 00 	lds	r24, 0x006C
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	80 93 6c 00 	sts	0x006C, r24
}
     f9c:	6d 96       	adiw	r28, 0x1d	; 29
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <CLCD_VoidInit>:
void CLCD_VoidInit(void)
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	2e 97       	sbiw	r28, 0x0e	; 14
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	a0 ef       	ldi	r26, 0xF0	; 240
     fc8:	b1 e4       	ldi	r27, 0x41	; 65
     fca:	8b 87       	std	Y+11, r24	; 0x0b
     fcc:	9c 87       	std	Y+12, r25	; 0x0c
     fce:	ad 87       	std	Y+13, r26	; 0x0d
     fd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e8       	ldi	r19, 0x80	; 128
     fde:	4b e3       	ldi	r20, 0x3B	; 59
     fe0:	55 e4       	ldi	r21, 0x45	; 69
     fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	8f 83       	std	Y+7, r24	; 0x07
     fec:	98 87       	std	Y+8, r25	; 0x08
     fee:	a9 87       	std	Y+9, r26	; 0x09
     ff0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff2:	6f 81       	ldd	r22, Y+7	; 0x07
     ff4:	78 85       	ldd	r23, Y+8	; 0x08
     ff6:	89 85       	ldd	r24, Y+9	; 0x09
     ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e8       	ldi	r20, 0x80	; 128
    1000:	5f e3       	ldi	r21, 0x3F	; 63
    1002:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1006:	88 23       	and	r24, r24
    1008:	2c f4       	brge	.+10     	; 0x1014 <CLCD_VoidInit+0x66>
		__ticks = 1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	9e 83       	std	Y+6, r25	; 0x06
    1010:	8d 83       	std	Y+5, r24	; 0x05
    1012:	3f c0       	rjmp	.+126    	; 0x1092 <CLCD_VoidInit+0xe4>
	else if (__tmp > 65535)
    1014:	6f 81       	ldd	r22, Y+7	; 0x07
    1016:	78 85       	ldd	r23, Y+8	; 0x08
    1018:	89 85       	ldd	r24, Y+9	; 0x09
    101a:	9a 85       	ldd	r25, Y+10	; 0x0a
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	3f ef       	ldi	r19, 0xFF	; 255
    1020:	4f e7       	ldi	r20, 0x7F	; 127
    1022:	57 e4       	ldi	r21, 0x47	; 71
    1024:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1028:	18 16       	cp	r1, r24
    102a:	4c f5       	brge	.+82     	; 0x107e <CLCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102c:	6b 85       	ldd	r22, Y+11	; 0x0b
    102e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1030:	8d 85       	ldd	r24, Y+13	; 0x0d
    1032:	9e 85       	ldd	r25, Y+14	; 0x0e
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e2       	ldi	r20, 0x20	; 32
    103a:	51 e4       	ldi	r21, 0x41	; 65
    103c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	bc 01       	movw	r22, r24
    1046:	cd 01       	movw	r24, r26
    1048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	9e 83       	std	Y+6, r25	; 0x06
    1052:	8d 83       	std	Y+5, r24	; 0x05
    1054:	0f c0       	rjmp	.+30     	; 0x1074 <CLCD_VoidInit+0xc6>
    1056:	8c e2       	ldi	r24, 0x2C	; 44
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	9c 83       	std	Y+4, r25	; 0x04
    105c:	8b 83       	std	Y+3, r24	; 0x03
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	9c 81       	ldd	r25, Y+4	; 0x04
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	f1 f7       	brne	.-4      	; 0x1062 <CLCD_VoidInit+0xb4>
    1066:	9c 83       	std	Y+4, r25	; 0x04
    1068:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	9e 83       	std	Y+6, r25	; 0x06
    1072:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	69 f7       	brne	.-38     	; 0x1056 <CLCD_VoidInit+0xa8>
    107c:	14 c0       	rjmp	.+40     	; 0x10a6 <CLCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107e:	6f 81       	ldd	r22, Y+7	; 0x07
    1080:	78 85       	ldd	r23, Y+8	; 0x08
    1082:	89 85       	ldd	r24, Y+9	; 0x09
    1084:	9a 85       	ldd	r25, Y+10	; 0x0a
    1086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	9e 83       	std	Y+6, r25	; 0x06
    1090:	8d 83       	std	Y+5, r24	; 0x05
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	9e 81       	ldd	r25, Y+6	; 0x06
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	f1 f7       	brne	.-4      	; 0x109e <CLCD_VoidInit+0xf0>
    10a2:	9a 83       	std	Y+2, r25	; 0x02
    10a4:	89 83       	std	Y+1, r24	; 0x01
#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE
	/*function set : set the DATA port to specified value from datasheet */
	/*N:number of lines used in the LCD '0' for 1 line and '1' for 2 lines*/
	/*F:charachter size either 5x8 or 5x11 '0' for 5x8 and '1' for 5x11*/
	/*note that character is displayed in either 5x10 or 5x7 the extra row is for the cursor*/
	CLCD_VoidSendCommand(0b0010);//use 5x8 and 2 lines
    10a6:	82 e0       	ldi	r24, 0x02	; 2
    10a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
	CLCD_VoidSendCommand(0b0010);
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
	CLCD_VoidSendCommand(0b1000);
    10b2:	88 e0       	ldi	r24, 0x08	; 8
    10b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>

	/*Display ON/OFF control:control whether to turn on or off the display*/
	/*D:display on or off to save power '0' for off '1' for on*/
	/*C:cursor on or off '0' for off '1' for on*/
	/*B:cursor blinks or not '0' for nonblinking '1' for blinking*/
	CLCD_VoidSendCommand(0b0000);
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
	CLCD_VoidSendCommand(0b1100);
    10be:	8c e0       	ldi	r24, 0x0C	; 12
    10c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
	
	/*clear display*/
	CLCD_VoidSendCommand(0b0000);
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
	CLCD_VoidSendCommand(0b0001);
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
#endif
	
}
    10d0:	2e 96       	adiw	r28, 0x0e	; 14
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <CLCD_VoidSendString>:
void CLCD_VoidSendString(const char * CLCD_pcString)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <CLCD_VoidSendString+0x6>
    10e8:	0f 92       	push	r0
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	9b 83       	std	Y+3, r25	; 0x03
    10f0:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 i=0;*(CLCD_pcString+i)!='\0';i++)
    10f2:	19 82       	std	Y+1, r1	; 0x01
    10f4:	0e c0       	rjmp	.+28     	; 0x1112 <CLCD_VoidSendString+0x30>
	{
		CLCD_VoidSendData(CLCD_pcString[i]);
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1100:	fc 01       	movw	r30, r24
    1102:	e2 0f       	add	r30, r18
    1104:	f3 1f       	adc	r31, r19
    1106:	80 81       	ld	r24, Z
    1108:	0e 94 63 06 	call	0xcc6	; 0xcc6 <CLCD_VoidSendData>
	
}
void CLCD_VoidSendString(const char * CLCD_pcString)
{

	for(u8 i=0;*(CLCD_pcString+i)!='\0';i++)
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	8f 5f       	subi	r24, 0xFF	; 255
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	9b 81       	ldd	r25, Y+3	; 0x03
    111c:	fc 01       	movw	r30, r24
    111e:	e2 0f       	add	r30, r18
    1120:	f3 1f       	adc	r31, r19
    1122:	80 81       	ld	r24, Z
    1124:	88 23       	and	r24, r24
    1126:	39 f7       	brne	.-50     	; 0x10f6 <CLCD_VoidSendString+0x14>
	{
		CLCD_VoidSendData(CLCD_pcString[i]);
	}
}
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <CLCD_VoidGoToXY>:
void CLCD_VoidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <CLCD_VoidGoToXY+0x6>
    113a:	0f 92       	push	r0
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	8a 83       	std	Y+2, r24	; 0x02
    1142:	6b 83       	std	Y+3, r22	; 0x03
	/* we have DDRAM(display data ram used to store values which are shown on the LCD) 2 rows with visible window of 16 columns */
	/*it starts from address 0 till address 40 on the first row the second row starts from address 0x40*/
	/*we notice that if row =0 address = Y and if X=1 Address = 0x40+Y*/
	u8 Local_u8Address;
	/*location in first line*/
	if(Copy_u8XPos==0)
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	88 23       	and	r24, r24
    1148:	19 f4       	brne	.+6      	; 0x1150 <CLCD_VoidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	06 c0       	rjmp	.+12     	; 0x115c <CLCD_VoidGoToXY+0x28>
	}
	/*location 2nd line*/
	else if(Copy_u8XPos==1)
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	19 f4       	brne	.+6      	; 0x115c <CLCD_VoidGoToXY+0x28>
	{
		Local_u8Address=Copy_u8YPos+0x40;
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	80 5c       	subi	r24, 0xC0	; 192
    115a:	89 83       	std	Y+1, r24	; 0x01
#if CLCD_WORKING_MODE==PRE_EIGHT_BIT_MODE
	CLCD_VoidSendCommand(Local_u8Address|1<<7);

#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE
	/*send the 4 MSBs. Make the MSBs to make them LSBs as function copies the 4 LSBs*/
	CLCD_VoidSendCommand((Local_u8Address|1<<7)>>4);
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	80 68       	ori	r24, 0x80	; 128
    1160:	82 95       	swap	r24
    1162:	8f 70       	andi	r24, 0x0F	; 15
    1164:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
	/*send the 4 LSBs we don't care about the value of the 4MSBs as function only operates on the LSBs so we dont need to set MSBs to 0*/
	/*we don't need to set the 6th bit to high as we are sending the LSBs and we don't care about the MSBs*/
	CLCD_VoidSendCommand(Local_u8Address);
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
#endif
}
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <CLCD_VoidWriteSpecialChar>:
void CLCD_VoidWriteSpecialChar(const u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	27 97       	sbiw	r28, 0x07	; 7
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	9c 83       	std	Y+4, r25	; 0x04
    1190:	8b 83       	std	Y+3, r24	; 0x03
    1192:	6d 83       	std	Y+5, r22	; 0x05
    1194:	4e 83       	std	Y+6, r20	; 0x06
    1196:	2f 83       	std	Y+7, r18	; 0x07
	//_delay_ms(1);
	//DIO_u8GetPortValue(CLCD_8_BIT_DATA_PORT,& Local_u8DDRamAddress);
	/*restore the data port*/
	//DIO_u8SetPortDirection(CLCD_8_BIT_DATA_PORT,DIO_u8OUTPUT);
	/*get CGram address from block number*/
	u8 Local_u8CGRamAddress=Copy_u8PatternNumber*8;
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	8a 83       	std	Y+2, r24	; 0x02
	/*send command to specify address in CGRAM to write to*/
#if CLCD_WORKING_MODE==PRE_EIGHT_BIT_MODE
	CLCD_VoidSendCommand(Local_u8CGRamAddress|1<<6);
#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE
	/*send the 4 MSBs. Make the MSBs to make them LSBs as function copies the 4 LSBs*/
		CLCD_VoidSendCommand((Local_u8CGRamAddress|1<<6)>>4);
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	80 64       	ori	r24, 0x40	; 64
    11b0:	82 95       	swap	r24
    11b2:	8f 70       	andi	r24, 0x0F	; 15
    11b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
		/*send the 4 LSBs we don't care about the value of the 4MSBs as function only operates on the LSBs so we dont need to set MSBs to 0*/
		/*we don't need to set the 6th bit to high as we are sending the LSBs and we don't care about the MSBs*/
		CLCD_VoidSendCommand(Local_u8CGRamAddress);
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
#endif
	for(u8 i=0;i<8;i++)
    11be:	19 82       	std	Y+1, r1	; 0x01
    11c0:	0e c0       	rjmp	.+28     	; 0x11de <CLCD_VoidWriteSpecialChar+0x64>
	{
		/*send special char to CGRAM (Address counter pointer increments automatically)*/
		CLCD_VoidSendData(Copy_pu8Pattern[i]);
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	fc 01       	movw	r30, r24
    11ce:	e2 0f       	add	r30, r18
    11d0:	f3 1f       	adc	r31, r19
    11d2:	80 81       	ld	r24, Z
    11d4:	0e 94 63 06 	call	0xcc6	; 0xcc6 <CLCD_VoidSendData>
		CLCD_VoidSendCommand((Local_u8CGRamAddress|1<<6)>>4);
		/*send the 4 LSBs we don't care about the value of the 4MSBs as function only operates on the LSBs so we dont need to set MSBs to 0*/
		/*we don't need to set the 6th bit to high as we are sending the LSBs and we don't care about the MSBs*/
		CLCD_VoidSendCommand(Local_u8CGRamAddress);
#endif
	for(u8 i=0;i<8;i++)
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	8f 5f       	subi	r24, 0xFF	; 255
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	88 30       	cpi	r24, 0x08	; 8
    11e2:	78 f3       	brcs	.-34     	; 0x11c2 <CLCD_VoidWriteSpecialChar+0x48>
	/*restore address counter to the saved value from the DDRAM */
	/*during storing operation we saved Address counter into 7 bits of the DDRAM address and the busy flag is in the 8th bit */
	/*we don't need to discard the 8th bit as it will be ORed with 1 in next step*/
	//CLCD_VoidSendCommand((Local_u8DDRamAddress)|1<<7);
	/*to display char in CGram send data using block number as input*/
	CLCD_VoidGoToXY(Copy_u8XPos,Copy_u8YPos);
    11e4:	8e 81       	ldd	r24, Y+6	; 0x06
    11e6:	6f 81       	ldd	r22, Y+7	; 0x07
    11e8:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_VoidGoToXY>
	CLCD_VoidSendData(Copy_u8PatternNumber);
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	0e 94 63 06 	call	0xcc6	; 0xcc6 <CLCD_VoidSendData>

	/*configuring the global send data counter to make sure to write to second row after finishing first row*/
	/*Send data counter is number of times that function send data was called the number specifies the position of the next character to be written on the first row */
	if(Copy_u8XPos==0)//write special char in first row
    11f2:	8e 81       	ldd	r24, Y+6	; 0x06
    11f4:	88 23       	and	r24, r24
    11f6:	21 f4       	brne	.+8      	; 0x1200 <CLCD_VoidWriteSpecialChar+0x86>
	{

		Global_u8SendDataCounter=Copy_u8YPos+1;
    11f8:	8f 81       	ldd	r24, Y+7	; 0x07
    11fa:	8f 5f       	subi	r24, 0xFF	; 255
    11fc:	80 93 6c 00 	sts	0x006C, r24
	}
}
    1200:	27 96       	adiw	r28, 0x07	; 7
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <u32POWER>:
u32 u32POWER(u32 Copy_u8Num, u8 Copy_u8pow)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	2d 97       	sbiw	r28, 0x0d	; 13
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	6d 83       	std	Y+5, r22	; 0x05
    1228:	7e 83       	std	Y+6, r23	; 0x06
    122a:	8f 83       	std	Y+7, r24	; 0x07
    122c:	98 87       	std	Y+8, r25	; 0x08
    122e:	49 87       	std	Y+9, r20	; 0x09
	if(Copy_u8pow==0)
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	88 23       	and	r24, r24
    1234:	49 f4       	brne	.+18     	; 0x1248 <u32POWER+0x36>
		return 1;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a0 e0       	ldi	r26, 0x00	; 0
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	8a 87       	std	Y+10, r24	; 0x0a
    1240:	9b 87       	std	Y+11, r25	; 0x0b
    1242:	ac 87       	std	Y+12, r26	; 0x0c
    1244:	bd 87       	std	Y+13, r27	; 0x0d
    1246:	29 c0       	rjmp	.+82     	; 0x129a <u32POWER+0x88>
	else
		{
		u32 Local_u32Result=Copy_u8Num;
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	9e 81       	ldd	r25, Y+6	; 0x06
    124c:	af 81       	ldd	r26, Y+7	; 0x07
    124e:	b8 85       	ldd	r27, Y+8	; 0x08
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	9a 83       	std	Y+2, r25	; 0x02
    1254:	ab 83       	std	Y+3, r26	; 0x03
    1256:	bc 83       	std	Y+4, r27	; 0x04
    1258:	15 c0       	rjmp	.+42     	; 0x1284 <u32POWER+0x72>
		for(;Copy_u8pow>1;Copy_u8pow--)
		{
			Local_u32Result=Local_u32Result*Copy_u8Num;
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	9a 81       	ldd	r25, Y+2	; 0x02
    125e:	ab 81       	ldd	r26, Y+3	; 0x03
    1260:	bc 81       	ldd	r27, Y+4	; 0x04
    1262:	2d 81       	ldd	r18, Y+5	; 0x05
    1264:	3e 81       	ldd	r19, Y+6	; 0x06
    1266:	4f 81       	ldd	r20, Y+7	; 0x07
    1268:	58 85       	ldd	r21, Y+8	; 0x08
    126a:	bc 01       	movw	r22, r24
    126c:	cd 01       	movw	r24, r26
    126e:	0e 94 43 12 	call	0x2486	; 0x2486 <__mulsi3>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	89 83       	std	Y+1, r24	; 0x01
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	ab 83       	std	Y+3, r26	; 0x03
    127c:	bc 83       	std	Y+4, r27	; 0x04
	if(Copy_u8pow==0)
		return 1;
	else
		{
		u32 Local_u32Result=Copy_u8Num;
		for(;Copy_u8pow>1;Copy_u8pow--)
    127e:	89 85       	ldd	r24, Y+9	; 0x09
    1280:	81 50       	subi	r24, 0x01	; 1
    1282:	89 87       	std	Y+9, r24	; 0x09
    1284:	89 85       	ldd	r24, Y+9	; 0x09
    1286:	82 30       	cpi	r24, 0x02	; 2
    1288:	40 f7       	brcc	.-48     	; 0x125a <u32POWER+0x48>
		{
			Local_u32Result=Local_u32Result*Copy_u8Num;
		}
		return Local_u32Result;
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	ab 81       	ldd	r26, Y+3	; 0x03
    1290:	bc 81       	ldd	r27, Y+4	; 0x04
    1292:	8a 87       	std	Y+10, r24	; 0x0a
    1294:	9b 87       	std	Y+11, r25	; 0x0b
    1296:	ac 87       	std	Y+12, r26	; 0x0c
    1298:	bd 87       	std	Y+13, r27	; 0x0d
    129a:	8a 85       	ldd	r24, Y+10	; 0x0a
    129c:	9b 85       	ldd	r25, Y+11	; 0x0b
    129e:	ac 85       	ldd	r26, Y+12	; 0x0c
    12a0:	bd 85       	ldd	r27, Y+13	; 0x0d
	}
}
    12a2:	bc 01       	movw	r22, r24
    12a4:	cd 01       	movw	r24, r26
    12a6:	2d 96       	adiw	r28, 0x0d	; 13
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <CLCD_VoidShowNum>:
void CLCD_VoidShowNum(u32 Copy_u32Num)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	29 97       	sbiw	r28, 0x09	; 9
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	6e 83       	std	Y+6, r22	; 0x06
    12ce:	7f 83       	std	Y+7, r23	; 0x07
    12d0:	88 87       	std	Y+8, r24	; 0x08
    12d2:	99 87       	std	Y+9, r25	; 0x09
	u8 Local_u8DigitCount=1;//at least one digit is given
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32Temp=Copy_u32Num;
    12d8:	8e 81       	ldd	r24, Y+6	; 0x06
    12da:	9f 81       	ldd	r25, Y+7	; 0x07
    12dc:	a8 85       	ldd	r26, Y+8	; 0x08
    12de:	b9 85       	ldd	r27, Y+9	; 0x09
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	9a 83       	std	Y+2, r25	; 0x02
    12e4:	ab 83       	std	Y+3, r26	; 0x03
    12e6:	bc 83       	std	Y+4, r27	; 0x04
    12e8:	03 c0       	rjmp	.+6      	; 0x12f0 <CLCD_VoidShowNum+0x38>
	while((Local_u32Temp/=10)!=0)
	{
		Local_u8DigitCount++;
    12ea:	8d 81       	ldd	r24, Y+5	; 0x05
    12ec:	8f 5f       	subi	r24, 0xFF	; 255
    12ee:	8d 83       	std	Y+5, r24	; 0x05
}
void CLCD_VoidShowNum(u32 Copy_u32Num)
{
	u8 Local_u8DigitCount=1;//at least one digit is given
	u32 Local_u32Temp=Copy_u32Num;
	while((Local_u32Temp/=10)!=0)
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	9a 81       	ldd	r25, Y+2	; 0x02
    12f4:	ab 81       	ldd	r26, Y+3	; 0x03
    12f6:	bc 81       	ldd	r27, Y+4	; 0x04
    12f8:	2a e0       	ldi	r18, 0x0A	; 10
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	bc 01       	movw	r22, r24
    1302:	cd 01       	movw	r24, r26
    1304:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__udivmodsi4>
    1308:	da 01       	movw	r26, r20
    130a:	c9 01       	movw	r24, r18
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	9a 83       	std	Y+2, r25	; 0x02
    1310:	ab 83       	std	Y+3, r26	; 0x03
    1312:	bc 83       	std	Y+4, r27	; 0x04
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	9a 81       	ldd	r25, Y+2	; 0x02
    1318:	ab 81       	ldd	r26, Y+3	; 0x03
    131a:	bc 81       	ldd	r27, Y+4	; 0x04
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	a1 05       	cpc	r26, r1
    1320:	b1 05       	cpc	r27, r1
    1322:	19 f7       	brne	.-58     	; 0x12ea <CLCD_VoidShowNum+0x32>
    1324:	23 c0       	rjmp	.+70     	; 0x136c <CLCD_VoidShowNum+0xb4>
	{
		Local_u8DigitCount++;
	}
	while(Local_u8DigitCount!=0)
	{
		Local_u8DigitCount--;
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	81 50       	subi	r24, 0x01	; 1
    132a:	8d 83       	std	Y+5, r24	; 0x05
		CLCD_VoidSendData(((Copy_u32Num/(u32POWER(10,Local_u8DigitCount)))%10)+'0');
    132c:	6a e0       	ldi	r22, 0x0A	; 10
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	4d 81       	ldd	r20, Y+5	; 0x05
    1336:	0e 94 09 09 	call	0x1212	; 0x1212 <u32POWER>
    133a:	9b 01       	movw	r18, r22
    133c:	ac 01       	movw	r20, r24
    133e:	8e 81       	ldd	r24, Y+6	; 0x06
    1340:	9f 81       	ldd	r25, Y+7	; 0x07
    1342:	a8 85       	ldd	r26, Y+8	; 0x08
    1344:	b9 85       	ldd	r27, Y+9	; 0x09
    1346:	bc 01       	movw	r22, r24
    1348:	cd 01       	movw	r24, r26
    134a:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__udivmodsi4>
    134e:	da 01       	movw	r26, r20
    1350:	c9 01       	movw	r24, r18
    1352:	2a e0       	ldi	r18, 0x0A	; 10
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	bc 01       	movw	r22, r24
    135c:	cd 01       	movw	r24, r26
    135e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__udivmodsi4>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	80 5d       	subi	r24, 0xD0	; 208
    1368:	0e 94 63 06 	call	0xcc6	; 0xcc6 <CLCD_VoidSendData>
	u32 Local_u32Temp=Copy_u32Num;
	while((Local_u32Temp/=10)!=0)
	{
		Local_u8DigitCount++;
	}
	while(Local_u8DigitCount!=0)
    136c:	8d 81       	ldd	r24, Y+5	; 0x05
    136e:	88 23       	and	r24, r24
    1370:	d1 f6       	brne	.-76     	; 0x1326 <CLCD_VoidShowNum+0x6e>
	{
		Local_u8DigitCount--;
		CLCD_VoidSendData(((Copy_u32Num/(u32POWER(10,Local_u8DigitCount)))%10)+'0');
	}
}
    1372:	29 96       	adiw	r28, 0x09	; 9
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <CLCD_VoidReset_Display>:
void CLCD_VoidReset_Display(void)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	/*send command to reset the display*/
#if CLCD_WORKING_MODE==PRE_EIGHT_BIT_MODE
	CLCD_VoidSendCommand(0b00000001);
#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE
	CLCD_VoidSendCommand(0b0000);
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
	CLCD_VoidSendCommand(0b0001);
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
#endif
	/*reset the global counter*/
	Global_u8SendDataCounter=0;
    1398:	10 92 6c 00 	sts	0x006C, r1
}
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <DIO_u8SetPinValue>:
/******************************************************************************/
/***********************Setting pin value**************************************/
/******************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	28 97       	sbiw	r28, 0x08	; 8
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	8a 83       	std	Y+2, r24	; 0x02
    13b8:	6b 83       	std	Y+3, r22	; 0x03
    13ba:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially zero
    13bc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN_7)
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	88 30       	cpi	r24, 0x08	; 8
    13c2:	08 f0       	brcs	.+2      	; 0x13c6 <DIO_u8SetPinValue+0x24>
    13c4:	ed c0       	rjmp	.+474    	; 0x15a0 <DIO_u8SetPinValue+0x1fe>
	{
		if (Copy_u8Value)//if value is 1 SET the required PIN
    13c6:	8c 81       	ldd	r24, Y+4	; 0x04
    13c8:	88 23       	and	r24, r24
    13ca:	09 f4       	brne	.+2      	; 0x13ce <DIO_u8SetPinValue+0x2c>
    13cc:	72 c0       	rjmp	.+228    	; 0x14b2 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	38 87       	std	Y+8, r19	; 0x08
    13d6:	2f 83       	std	Y+7, r18	; 0x07
    13d8:	8f 81       	ldd	r24, Y+7	; 0x07
    13da:	98 85       	ldd	r25, Y+8	; 0x08
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	91 05       	cpc	r25, r1
    13e0:	49 f1       	breq	.+82     	; 0x1434 <DIO_u8SetPinValue+0x92>
    13e2:	2f 81       	ldd	r18, Y+7	; 0x07
    13e4:	38 85       	ldd	r19, Y+8	; 0x08
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	2c f4       	brge	.+10     	; 0x13f6 <DIO_u8SetPinValue+0x54>
    13ec:	8f 81       	ldd	r24, Y+7	; 0x07
    13ee:	98 85       	ldd	r25, Y+8	; 0x08
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	61 f0       	breq	.+24     	; 0x140c <DIO_u8SetPinValue+0x6a>
    13f4:	5b c0       	rjmp	.+182    	; 0x14ac <DIO_u8SetPinValue+0x10a>
    13f6:	2f 81       	ldd	r18, Y+7	; 0x07
    13f8:	38 85       	ldd	r19, Y+8	; 0x08
    13fa:	22 30       	cpi	r18, 0x02	; 2
    13fc:	31 05       	cpc	r19, r1
    13fe:	71 f1       	breq	.+92     	; 0x145c <DIO_u8SetPinValue+0xba>
    1400:	8f 81       	ldd	r24, Y+7	; 0x07
    1402:	98 85       	ldd	r25, Y+8	; 0x08
    1404:	83 30       	cpi	r24, 0x03	; 3
    1406:	91 05       	cpc	r25, r1
    1408:	e9 f1       	breq	.+122    	; 0x1484 <DIO_u8SetPinValue+0xe2>
    140a:	50 c0       	rjmp	.+160    	; 0x14ac <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA:
				SET_BIT(PORTA_reg,Copy_u8Pin);
    140c:	ab e3       	ldi	r26, 0x3B	; 59
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	eb e3       	ldi	r30, 0x3B	; 59
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_u8SetPinValue+0x88>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_u8SetPinValue+0x84>
    142e:	84 2b       	or	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	b8 c0       	rjmp	.+368    	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTB:
				SET_BIT(PORTB_reg,Copy_u8Pin);
    1434:	a8 e3       	ldi	r26, 0x38	; 56
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e8 e3       	ldi	r30, 0x38	; 56
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <DIO_u8SetPinValue+0xb0>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <DIO_u8SetPinValue+0xac>
    1456:	84 2b       	or	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	a4 c0       	rjmp	.+328    	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTC:
				SET_BIT(PORTC_reg,Copy_u8Pin);
    145c:	a5 e3       	ldi	r26, 0x35	; 53
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e5 e3       	ldi	r30, 0x35	; 53
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <DIO_u8SetPinValue+0xd8>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <DIO_u8SetPinValue+0xd4>
    147e:	84 2b       	or	r24, r20
    1480:	8c 93       	st	X, r24
    1482:	90 c0       	rjmp	.+288    	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTD:
				SET_BIT(PORTD_reg,Copy_u8Pin);
    1484:	a2 e3       	ldi	r26, 0x32	; 50
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e2 e3       	ldi	r30, 0x32	; 50
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_u8SetPinValue+0x100>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_u8SetPinValue+0xfc>
    14a6:	84 2b       	or	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	7c c0       	rjmp	.+248    	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
			
				default:
				Local_u8ErrorState=1;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	79 c0       	rjmp	.+242    	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
			}
		}
		else//value is 0 so we clear the bits
		{
			switch(Copy_u8Port)
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	3e 83       	std	Y+6, r19	; 0x06
    14ba:	2d 83       	std	Y+5, r18	; 0x05
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	91 05       	cpc	r25, r1
    14c4:	59 f1       	breq	.+86     	; 0x151c <DIO_u8SetPinValue+0x17a>
    14c6:	2d 81       	ldd	r18, Y+5	; 0x05
    14c8:	3e 81       	ldd	r19, Y+6	; 0x06
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	2c f4       	brge	.+10     	; 0x14da <DIO_u8SetPinValue+0x138>
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	69 f0       	breq	.+26     	; 0x14f2 <DIO_u8SetPinValue+0x150>
    14d8:	60 c0       	rjmp	.+192    	; 0x159a <DIO_u8SetPinValue+0x1f8>
    14da:	2d 81       	ldd	r18, Y+5	; 0x05
    14dc:	3e 81       	ldd	r19, Y+6	; 0x06
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	89 f1       	breq	.+98     	; 0x1546 <DIO_u8SetPinValue+0x1a4>
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	83 30       	cpi	r24, 0x03	; 3
    14ea:	91 05       	cpc	r25, r1
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <DIO_u8SetPinValue+0x14e>
    14ee:	40 c0       	rjmp	.+128    	; 0x1570 <DIO_u8SetPinValue+0x1ce>
    14f0:	54 c0       	rjmp	.+168    	; 0x159a <DIO_u8SetPinValue+0x1f8>
			{
				case DIO_u8PORTA:
				CLR_BIT(PORTA_reg,Copy_u8Pin);
    14f2:	ab e3       	ldi	r26, 0x3B	; 59
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	eb e3       	ldi	r30, 0x3B	; 59
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_u8SetPinValue+0x16e>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_u8SetPinValue+0x16a>
    1514:	80 95       	com	r24
    1516:	84 23       	and	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	44 c0       	rjmp	.+136    	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTB:
				CLR_BIT(PORTB_reg,Copy_u8Pin);
    151c:	a8 e3       	ldi	r26, 0x38	; 56
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e8 e3       	ldi	r30, 0x38	; 56
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_u8SetPinValue+0x198>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_u8SetPinValue+0x194>
    153e:	80 95       	com	r24
    1540:	84 23       	and	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	2f c0       	rjmp	.+94     	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTC:
				CLR_BIT(PORTC_reg,Copy_u8Pin);
    1546:	a5 e3       	ldi	r26, 0x35	; 53
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e5 e3       	ldi	r30, 0x35	; 53
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_u8SetPinValue+0x1c2>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <DIO_u8SetPinValue+0x1be>
    1568:	80 95       	com	r24
    156a:	84 23       	and	r24, r20
    156c:	8c 93       	st	X, r24
    156e:	1a c0       	rjmp	.+52     	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTD:
				CLR_BIT(PORTD_reg,Copy_u8Pin);
    1570:	a2 e3       	ldi	r26, 0x32	; 50
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e2 e3       	ldi	r30, 0x32	; 50
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 2e       	mov	r0, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_u8SetPinValue+0x1ec>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <DIO_u8SetPinValue+0x1e8>
    1592:	80 95       	com	r24
    1594:	84 23       	and	r24, r20
    1596:	8c 93       	st	X, r24
    1598:	05 c0       	rjmp	.+10     	; 0x15a4 <DIO_u8SetPinValue+0x202>
				break;
				
				default:
				Local_u8ErrorState=1;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <DIO_u8SetPinValue+0x202>
			}
		}
	}
	else //incorrect input
	{
		Local_u8ErrorState=1;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	89 83       	std	Y+1, r24	; 0x01
	}	
	return Local_u8ErrorState;
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a6:	28 96       	adiw	r28, 0x08	; 8
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <DIO_u8SetPortValue>:
/******************************************************************************/
/***********************Setting port value*************************************/
/******************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port ,u8 Copy_u8Value)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	00 d0       	rcall	.+0      	; 0x15be <DIO_u8SetPortValue+0x6>
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <DIO_u8SetPortValue+0x8>
    15c0:	0f 92       	push	r0
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	8a 83       	std	Y+2, r24	; 0x02
    15c8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;//error state initially zero
    15ca:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	3d 83       	std	Y+5, r19	; 0x05
    15d4:	2c 83       	std	Y+4, r18	; 0x04
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	91 05       	cpc	r25, r1
    15de:	d1 f0       	breq	.+52     	; 0x1614 <DIO_u8SetPortValue+0x5c>
    15e0:	2c 81       	ldd	r18, Y+4	; 0x04
    15e2:	3d 81       	ldd	r19, Y+5	; 0x05
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	2c f4       	brge	.+10     	; 0x15f4 <DIO_u8SetPortValue+0x3c>
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	61 f0       	breq	.+24     	; 0x160a <DIO_u8SetPortValue+0x52>
    15f2:	1f c0       	rjmp	.+62     	; 0x1632 <DIO_u8SetPortValue+0x7a>
    15f4:	2c 81       	ldd	r18, Y+4	; 0x04
    15f6:	3d 81       	ldd	r19, Y+5	; 0x05
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	31 05       	cpc	r19, r1
    15fc:	81 f0       	breq	.+32     	; 0x161e <DIO_u8SetPortValue+0x66>
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	9d 81       	ldd	r25, Y+5	; 0x05
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	91 05       	cpc	r25, r1
    1606:	81 f0       	breq	.+32     	; 0x1628 <DIO_u8SetPortValue+0x70>
    1608:	14 c0       	rjmp	.+40     	; 0x1632 <DIO_u8SetPortValue+0x7a>
		{
			case DIO_u8PORTA:
			PORTA_reg=Copy_u8Value;
    160a:	eb e3       	ldi	r30, 0x3B	; 59
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	80 83       	st	Z, r24
    1612:	11 c0       	rjmp	.+34     	; 0x1636 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTB:
			PORTB_reg=Copy_u8Value;
    1614:	e8 e3       	ldi	r30, 0x38	; 56
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	80 83       	st	Z, r24
    161c:	0c c0       	rjmp	.+24     	; 0x1636 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTC:
			PORTC_reg=Copy_u8Value;
    161e:	e5 e3       	ldi	r30, 0x35	; 53
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	80 83       	st	Z, r24
    1626:	07 c0       	rjmp	.+14     	; 0x1636 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTD:
			PORTD_reg=Copy_u8Value;
    1628:	e2 e3       	ldi	r30, 0x32	; 50
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	80 83       	st	Z, r24
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <DIO_u8SetPortValue+0x7e>
			break;
			
			default:
			Local_u8ErrorState=1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_u8ErrorState;//incorrect input
    1636:	89 81       	ldd	r24, Y+1	; 0x01
}
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <DIO_u8GetPinValue>:
/******************************************************************************/
/***********************Getting PIN value**************************************/
/******************************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	27 97       	sbiw	r28, 0x07	; 7
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	8a 83       	std	Y+2, r24	; 0x02
    165e:	6b 83       	std	Y+3, r22	; 0x03
    1660:	5d 83       	std	Y+5, r21	; 0x05
    1662:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially zero
    1664:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL)&&Copy_u8Pin<=DIO_u8PIN_7)//check if ptr not null and correct input pin
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	9d 81       	ldd	r25, Y+5	; 0x05
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	09 f4       	brne	.+2      	; 0x1670 <DIO_u8GetPinValue+0x28>
    166e:	78 c0       	rjmp	.+240    	; 0x1760 <DIO_u8GetPinValue+0x118>
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	88 30       	cpi	r24, 0x08	; 8
    1674:	08 f0       	brcs	.+2      	; 0x1678 <DIO_u8GetPinValue+0x30>
    1676:	74 c0       	rjmp	.+232    	; 0x1760 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	3f 83       	std	Y+7, r19	; 0x07
    1680:	2e 83       	std	Y+6, r18	; 0x06
    1682:	4e 81       	ldd	r20, Y+6	; 0x06
    1684:	5f 81       	ldd	r21, Y+7	; 0x07
    1686:	41 30       	cpi	r20, 0x01	; 1
    1688:	51 05       	cpc	r21, r1
    168a:	59 f1       	breq	.+86     	; 0x16e2 <DIO_u8GetPinValue+0x9a>
    168c:	8e 81       	ldd	r24, Y+6	; 0x06
    168e:	9f 81       	ldd	r25, Y+7	; 0x07
    1690:	82 30       	cpi	r24, 0x02	; 2
    1692:	91 05       	cpc	r25, r1
    1694:	34 f4       	brge	.+12     	; 0x16a2 <DIO_u8GetPinValue+0x5a>
    1696:	2e 81       	ldd	r18, Y+6	; 0x06
    1698:	3f 81       	ldd	r19, Y+7	; 0x07
    169a:	21 15       	cp	r18, r1
    169c:	31 05       	cpc	r19, r1
    169e:	69 f0       	breq	.+26     	; 0x16ba <DIO_u8GetPinValue+0x72>
    16a0:	5c c0       	rjmp	.+184    	; 0x175a <DIO_u8GetPinValue+0x112>
    16a2:	4e 81       	ldd	r20, Y+6	; 0x06
    16a4:	5f 81       	ldd	r21, Y+7	; 0x07
    16a6:	42 30       	cpi	r20, 0x02	; 2
    16a8:	51 05       	cpc	r21, r1
    16aa:	79 f1       	breq	.+94     	; 0x170a <DIO_u8GetPinValue+0xc2>
    16ac:	8e 81       	ldd	r24, Y+6	; 0x06
    16ae:	9f 81       	ldd	r25, Y+7	; 0x07
    16b0:	83 30       	cpi	r24, 0x03	; 3
    16b2:	91 05       	cpc	r25, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <DIO_u8GetPinValue+0x70>
    16b6:	3d c0       	rjmp	.+122    	; 0x1732 <DIO_u8GetPinValue+0xea>
    16b8:	50 c0       	rjmp	.+160    	; 0x175a <DIO_u8GetPinValue+0x112>
		{
			case DIO_u8PORTA:
			*Copy_pu8Value=GET_BIT(PINA_reg,Copy_u8Pin);
    16ba:	e9 e3       	ldi	r30, 0x39	; 57
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	88 2f       	mov	r24, r24
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	a9 01       	movw	r20, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <DIO_u8GetPinValue+0x8a>
    16ce:	55 95       	asr	r21
    16d0:	47 95       	ror	r20
    16d2:	8a 95       	dec	r24
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <DIO_u8GetPinValue+0x86>
    16d6:	ca 01       	movw	r24, r20
    16d8:	81 70       	andi	r24, 0x01	; 1
    16da:	ec 81       	ldd	r30, Y+4	; 0x04
    16dc:	fd 81       	ldd	r31, Y+5	; 0x05
    16de:	80 83       	st	Z, r24
    16e0:	41 c0       	rjmp	.+130    	; 0x1764 <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTB:
			*Copy_pu8Value=GET_BIT(PINB_reg,Copy_u8Pin);
    16e2:	e6 e3       	ldi	r30, 0x36	; 54
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	88 2f       	mov	r24, r24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a9 01       	movw	r20, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <DIO_u8GetPinValue+0xb2>
    16f6:	55 95       	asr	r21
    16f8:	47 95       	ror	r20
    16fa:	8a 95       	dec	r24
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <DIO_u8GetPinValue+0xae>
    16fe:	ca 01       	movw	r24, r20
    1700:	81 70       	andi	r24, 0x01	; 1
    1702:	ec 81       	ldd	r30, Y+4	; 0x04
    1704:	fd 81       	ldd	r31, Y+5	; 0x05
    1706:	80 83       	st	Z, r24
    1708:	2d c0       	rjmp	.+90     	; 0x1764 <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTC:
			*Copy_pu8Value=GET_BIT(PINC_reg,Copy_u8Pin);
    170a:	e3 e3       	ldi	r30, 0x33	; 51
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	88 2f       	mov	r24, r24
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	a9 01       	movw	r20, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <DIO_u8GetPinValue+0xda>
    171e:	55 95       	asr	r21
    1720:	47 95       	ror	r20
    1722:	8a 95       	dec	r24
    1724:	e2 f7       	brpl	.-8      	; 0x171e <DIO_u8GetPinValue+0xd6>
    1726:	ca 01       	movw	r24, r20
    1728:	81 70       	andi	r24, 0x01	; 1
    172a:	ec 81       	ldd	r30, Y+4	; 0x04
    172c:	fd 81       	ldd	r31, Y+5	; 0x05
    172e:	80 83       	st	Z, r24
    1730:	19 c0       	rjmp	.+50     	; 0x1764 <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTD:
			*Copy_pu8Value=GET_BIT(PIND_reg,Copy_u8Pin);
    1732:	e0 e3       	ldi	r30, 0x30	; 48
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	a9 01       	movw	r20, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <DIO_u8GetPinValue+0x102>
    1746:	55 95       	asr	r21
    1748:	47 95       	ror	r20
    174a:	8a 95       	dec	r24
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <DIO_u8GetPinValue+0xfe>
    174e:	ca 01       	movw	r24, r20
    1750:	81 70       	andi	r24, 0x01	; 1
    1752:	ec 81       	ldd	r30, Y+4	; 0x04
    1754:	fd 81       	ldd	r31, Y+5	; 0x05
    1756:	80 83       	st	Z, r24
    1758:	05 c0       	rjmp	.+10     	; 0x1764 <DIO_u8GetPinValue+0x11c>
			break;
			
			default:
			Local_u8ErrorState=1;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <DIO_u8GetPinValue+0x11c>
			break;
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1764:	89 81       	ldd	r24, Y+1	; 0x01
}
    1766:	27 96       	adiw	r28, 0x07	; 7
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <DIO_u8GetPortValue>:
/*not tested*/
u8 DIO_u8GetPortValue(u8 Copy_u8Port ,u8* Copy_pu8Value)//get value of entire port
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	00 d0       	rcall	.+0      	; 0x177e <DIO_u8GetPortValue+0x6>
    177e:	00 d0       	rcall	.+0      	; 0x1780 <DIO_u8GetPortValue+0x8>
    1780:	00 d0       	rcall	.+0      	; 0x1782 <DIO_u8GetPortValue+0xa>
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	8a 83       	std	Y+2, r24	; 0x02
    1788:	7c 83       	std	Y+4, r23	; 0x04
    178a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    178c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	3e 83       	std	Y+6, r19	; 0x06
    1796:	2d 83       	std	Y+5, r18	; 0x05
    1798:	8d 81       	ldd	r24, Y+5	; 0x05
    179a:	9e 81       	ldd	r25, Y+6	; 0x06
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	91 05       	cpc	r25, r1
    17a0:	e1 f0       	breq	.+56     	; 0x17da <DIO_u8GetPortValue+0x62>
    17a2:	2d 81       	ldd	r18, Y+5	; 0x05
    17a4:	3e 81       	ldd	r19, Y+6	; 0x06
    17a6:	22 30       	cpi	r18, 0x02	; 2
    17a8:	31 05       	cpc	r19, r1
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <DIO_u8GetPortValue+0x3e>
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	9e 81       	ldd	r25, Y+6	; 0x06
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	61 f0       	breq	.+24     	; 0x17cc <DIO_u8GetPortValue+0x54>
    17b4:	27 c0       	rjmp	.+78     	; 0x1804 <DIO_u8GetPortValue+0x8c>
    17b6:	2d 81       	ldd	r18, Y+5	; 0x05
    17b8:	3e 81       	ldd	r19, Y+6	; 0x06
    17ba:	22 30       	cpi	r18, 0x02	; 2
    17bc:	31 05       	cpc	r19, r1
    17be:	a1 f0       	breq	.+40     	; 0x17e8 <DIO_u8GetPortValue+0x70>
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	9e 81       	ldd	r25, Y+6	; 0x06
    17c4:	83 30       	cpi	r24, 0x03	; 3
    17c6:	91 05       	cpc	r25, r1
    17c8:	b1 f0       	breq	.+44     	; 0x17f6 <DIO_u8GetPortValue+0x7e>
    17ca:	1c c0       	rjmp	.+56     	; 0x1804 <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA:
		*Copy_pu8Value=PINA_reg;
    17cc:	e9 e3       	ldi	r30, 0x39	; 57
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	eb 81       	ldd	r30, Y+3	; 0x03
    17d4:	fc 81       	ldd	r31, Y+4	; 0x04
    17d6:	80 83       	st	Z, r24
    17d8:	17 c0       	rjmp	.+46     	; 0x1808 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTB:
		*Copy_pu8Value=PINB_reg;
    17da:	e6 e3       	ldi	r30, 0x36	; 54
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	eb 81       	ldd	r30, Y+3	; 0x03
    17e2:	fc 81       	ldd	r31, Y+4	; 0x04
    17e4:	80 83       	st	Z, r24
    17e6:	10 c0       	rjmp	.+32     	; 0x1808 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTC:
		*Copy_pu8Value=PINC_reg;
    17e8:	e3 e3       	ldi	r30, 0x33	; 51
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	eb 81       	ldd	r30, Y+3	; 0x03
    17f0:	fc 81       	ldd	r31, Y+4	; 0x04
    17f2:	80 83       	st	Z, r24
    17f4:	09 c0       	rjmp	.+18     	; 0x1808 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTD:
		*Copy_pu8Value=PIND_reg;
    17f6:	e0 e3       	ldi	r30, 0x30	; 48
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	eb 81       	ldd	r30, Y+3	; 0x03
    17fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1800:	80 83       	st	Z, r24
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <DIO_u8GetPortValue+0x90>
		break;
	default:
		Local_u8ErrorState=1;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1808:	89 81       	ldd	r24, Y+1	; 0x01
}
    180a:	26 96       	adiw	r28, 0x06	; 6
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <EXTI_voidInt0Init>:
void (* EXTI_pvInt0Func)(void)=NULL;
void (* EXTI_pvInt1Func)(void)=NULL;
void (* EXTI_pvInt2Func)(void)=NULL;

void EXTI_voidInt0Init(void)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
	// Setting state for INT0
	#if INT0_STATE==ENABLED
	SET_BIT(GICR,GICR_INT_0_BIT);
    1824:	ab e5       	ldi	r26, 0x5B	; 91
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	eb e5       	ldi	r30, 0x5B	; 91
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	80 64       	ori	r24, 0x40	; 64
    1830:	8c 93       	st	X, r24
	#if INT0_SensorControl==EXTI_FALLING
	SET_BIT(MCUCR,MCUCR_ISC01_BIT);
	CLR_BIT(MCUCR,MCUCR_ISC00_BIT);
	
	#elif INT0_SensorControl==EXTI_RISING
	SET_BIT(MCUCR,MCUCR_ISC01_BIT);
    1832:	a5 e5       	ldi	r26, 0x55	; 85
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e5 e5       	ldi	r30, 0x55	; 85
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	82 60       	ori	r24, 0x02	; 2
    183e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC00_BIT);	
    1840:	a5 e5       	ldi	r26, 0x55	; 85
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e5 e5       	ldi	r30, 0x55	; 85
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	81 60       	ori	r24, 0x01	; 1
    184c:	8c 93       	st	X, r24
	#else
		#error "Error in sense control"
	
	#endif
	
}
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <EXTI_voidInt1Init>:
void EXTI_voidInt1Init(void)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
		// Setting INT1 State
	#if INT1_STATE==ENABLED
	SET_BIT(GICR,GICR_INT_1_BIT);
    185c:	ab e5       	ldi	r26, 0x5B	; 91
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	eb e5       	ldi	r30, 0x5B	; 91
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	80 68       	ori	r24, 0x80	; 128
    1868:	8c 93       	st	X, r24
	#error "Error in INT1 State"
	#endif

	//setting sensor control
	#if INT1_SensorControl==EXTI_FALLING
	SET_BIT(MCUCR,MCUCR_ISC11_BIT);
    186a:	a5 e5       	ldi	r26, 0x55	; 85
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e5 e5       	ldi	r30, 0x55	; 85
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	88 60       	ori	r24, 0x08	; 8
    1876:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC10_BIT);
    1878:	a5 e5       	ldi	r26, 0x55	; 85
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e5 e5       	ldi	r30, 0x55	; 85
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	8b 7f       	andi	r24, 0xFB	; 251
    1884:	8c 93       	st	X, r24
	#elif INT1_SensorControl==EXTI_LOW_LEVEL
	CLR_BIT(MCUCR,MCUCR_ISC11_BIT);
	CLR_BIT(MCUCR,MCUCR_ISC10_BIT);
	
	#endif
}
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <EXTI_voidInt2Init>:
void EXTI_voidInt2Init(void)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
	// Setting state of INT2
	#if INT2_STATE==ENABLED
	SET_BIT(GICR,GICR_INT_2_BIT);
    1894:	ab e5       	ldi	r26, 0x5B	; 91
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	eb e5       	ldi	r30, 0x5B	; 91
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	80 62       	ori	r24, 0x20	; 32
    18a0:	8c 93       	st	X, r24
	#error "Error in INT2 State"
	#endif
	
	//setting sensor control
	#if INT2_SensorControl==EXTI_FALLING
	CLR_BIT(MCUCSR,MCUCSR_ISC2_BIT);
    18a2:	a4 e5       	ldi	r26, 0x54	; 84
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e4 e5       	ldi	r30, 0x54	; 84
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	8f 7b       	andi	r24, 0xBF	; 191
    18ae:	8c 93       	st	X, r24
	
	#elif INT2_SensorControl==EXTI_RISING
	SET_BIT(MCUCSR,MCUCSR_ISC2_BIT);
	
	#endif
}
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <EXTI_u8SetControlSense>:
/*POSTBUILD functions*/

u8 EXTI_u8SetControlSense(u8 Copy_u8ControlSense,u8 Copy_u8Int)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	29 97       	sbiw	r28, 0x09	; 9
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	8a 83       	std	Y+2, r24	; 0x02
    18cc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    18ce:	19 82       	std	Y+1, r1	; 0x01


		switch(Copy_u8ControlSense)
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	39 87       	std	Y+9, r19	; 0x09
    18d8:	28 87       	std	Y+8, r18	; 0x08
    18da:	88 85       	ldd	r24, Y+8	; 0x08
    18dc:	99 85       	ldd	r25, Y+9	; 0x09
    18de:	82 30       	cpi	r24, 0x02	; 2
    18e0:	91 05       	cpc	r25, r1
    18e2:	c9 f0       	breq	.+50     	; 0x1916 <EXTI_u8SetControlSense+0x60>
    18e4:	28 85       	ldd	r18, Y+8	; 0x08
    18e6:	39 85       	ldd	r19, Y+9	; 0x09
    18e8:	23 30       	cpi	r18, 0x03	; 3
    18ea:	31 05       	cpc	r19, r1
    18ec:	3c f4       	brge	.+14     	; 0x18fc <EXTI_u8SetControlSense+0x46>
    18ee:	88 85       	ldd	r24, Y+8	; 0x08
    18f0:	99 85       	ldd	r25, Y+9	; 0x09
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	91 05       	cpc	r25, r1
    18f6:	09 f4       	brne	.+2      	; 0x18fa <EXTI_u8SetControlSense+0x44>
    18f8:	4b c0       	rjmp	.+150    	; 0x1990 <EXTI_u8SetControlSense+0xda>
    18fa:	d5 c0       	rjmp	.+426    	; 0x1aa6 <EXTI_u8SetControlSense+0x1f0>
    18fc:	28 85       	ldd	r18, Y+8	; 0x08
    18fe:	39 85       	ldd	r19, Y+9	; 0x09
    1900:	23 30       	cpi	r18, 0x03	; 3
    1902:	31 05       	cpc	r19, r1
    1904:	09 f4       	brne	.+2      	; 0x1908 <EXTI_u8SetControlSense+0x52>
    1906:	81 c0       	rjmp	.+258    	; 0x1a0a <EXTI_u8SetControlSense+0x154>
    1908:	88 85       	ldd	r24, Y+8	; 0x08
    190a:	99 85       	ldd	r25, Y+9	; 0x09
    190c:	84 30       	cpi	r24, 0x04	; 4
    190e:	91 05       	cpc	r25, r1
    1910:	09 f4       	brne	.+2      	; 0x1914 <EXTI_u8SetControlSense+0x5e>
    1912:	a2 c0       	rjmp	.+324    	; 0x1a58 <EXTI_u8SetControlSense+0x1a2>
    1914:	c8 c0       	rjmp	.+400    	; 0x1aa6 <EXTI_u8SetControlSense+0x1f0>
		{
		//rising
		case EXTI_RISING:
			switch(Copy_u8Int)
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	3f 83       	std	Y+7, r19	; 0x07
    191e:	2e 83       	std	Y+6, r18	; 0x06
    1920:	8e 81       	ldd	r24, Y+6	; 0x06
    1922:	9f 81       	ldd	r25, Y+7	; 0x07
    1924:	82 30       	cpi	r24, 0x02	; 2
    1926:	91 05       	cpc	r25, r1
    1928:	c9 f0       	breq	.+50     	; 0x195c <EXTI_u8SetControlSense+0xa6>
    192a:	2e 81       	ldd	r18, Y+6	; 0x06
    192c:	3f 81       	ldd	r19, Y+7	; 0x07
    192e:	23 30       	cpi	r18, 0x03	; 3
    1930:	31 05       	cpc	r19, r1
    1932:	19 f1       	breq	.+70     	; 0x197a <EXTI_u8SetControlSense+0xc4>
    1934:	8e 81       	ldd	r24, Y+6	; 0x06
    1936:	9f 81       	ldd	r25, Y+7	; 0x07
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	91 05       	cpc	r25, r1
    193c:	31 f5       	brne	.+76     	; 0x198a <EXTI_u8SetControlSense+0xd4>
			{
			case EXTI_INT0:

				SET_BIT(MCUCR,MCUCR_ISC01_BIT);
    193e:	a5 e5       	ldi	r26, 0x55	; 85
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e5 e5       	ldi	r30, 0x55	; 85
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	82 60       	ori	r24, 0x02	; 2
    194a:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC00_BIT);
    194c:	a5 e5       	ldi	r26, 0x55	; 85
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e5 e5       	ldi	r30, 0x55	; 85
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	81 60       	ori	r24, 0x01	; 1
    1958:	8c 93       	st	X, r24
    195a:	a7 c0       	rjmp	.+334    	; 0x1aaa <EXTI_u8SetControlSense+0x1f4>
				break;
			case EXTI_INT1:
				SET_BIT(MCUCR,MCUCR_ISC11_BIT);
    195c:	a5 e5       	ldi	r26, 0x55	; 85
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e5 e5       	ldi	r30, 0x55	; 85
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	88 60       	ori	r24, 0x08	; 8
    1968:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC10_BIT);
    196a:	a5 e5       	ldi	r26, 0x55	; 85
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e5 e5       	ldi	r30, 0x55	; 85
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	84 60       	ori	r24, 0x04	; 4
    1976:	8c 93       	st	X, r24
    1978:	98 c0       	rjmp	.+304    	; 0x1aaa <EXTI_u8SetControlSense+0x1f4>
				break;
			case EXTI_INT2:
				SET_BIT(MCUCSR,MCUCSR_ISC2_BIT);
    197a:	a4 e5       	ldi	r26, 0x54	; 84
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e4 e5       	ldi	r30, 0x54	; 84
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	80 64       	ori	r24, 0x40	; 64
    1986:	8c 93       	st	X, r24
    1988:	90 c0       	rjmp	.+288    	; 0x1aaa <EXTI_u8SetControlSense+0x1f4>
				break;
			default :
				Local_u8ErrorState=NOK;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	8d c0       	rjmp	.+282    	; 0x1aaa <EXTI_u8SetControlSense+0x1f4>
			}
			break;

			//falling
		case EXTI_FALLING:
			switch(Copy_u8Int)
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	3d 83       	std	Y+5, r19	; 0x05
    1998:	2c 83       	std	Y+4, r18	; 0x04
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	9d 81       	ldd	r25, Y+5	; 0x05
    199e:	82 30       	cpi	r24, 0x02	; 2
    19a0:	91 05       	cpc	r25, r1
    19a2:	c9 f0       	breq	.+50     	; 0x19d6 <EXTI_u8SetControlSense+0x120>
    19a4:	2c 81       	ldd	r18, Y+4	; 0x04
    19a6:	3d 81       	ldd	r19, Y+5	; 0x05
    19a8:	23 30       	cpi	r18, 0x03	; 3
    19aa:	31 05       	cpc	r19, r1
    19ac:	19 f1       	breq	.+70     	; 0x19f4 <EXTI_u8SetControlSense+0x13e>
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	9d 81       	ldd	r25, Y+5	; 0x05
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	91 05       	cpc	r25, r1
    19b6:	31 f5       	brne	.+76     	; 0x1a04 <EXTI_u8SetControlSense+0x14e>
			{
			case EXTI_INT0:
				SET_BIT(MCUCR,MCUCR_ISC01_BIT);
    19b8:	a5 e5       	ldi	r26, 0x55	; 85
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e5 e5       	ldi	r30, 0x55	; 85
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	82 60       	ori	r24, 0x02	; 2
    19c4:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC00_BIT);
    19c6:	a5 e5       	ldi	r26, 0x55	; 85
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e5 e5       	ldi	r30, 0x55	; 85
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8e 7f       	andi	r24, 0xFE	; 254
    19d2:	8c 93       	st	X, r24
    19d4:	6a c0       	rjmp	.+212    	; 0x1aaa <EXTI_u8SetControlSense+0x1f4>
				break;
			case EXTI_INT1:
				SET_BIT(MCUCR,MCUCR_ISC11_BIT);
    19d6:	a5 e5       	ldi	r26, 0x55	; 85
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e5 e5       	ldi	r30, 0x55	; 85
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	88 60       	ori	r24, 0x08	; 8
    19e2:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC10_BIT);
    19e4:	a5 e5       	ldi	r26, 0x55	; 85
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e5 e5       	ldi	r30, 0x55	; 85
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	8b 7f       	andi	r24, 0xFB	; 251
    19f0:	8c 93       	st	X, r24
    19f2:	5b c0       	rjmp	.+182    	; 0x1aaa <EXTI_u8SetControlSense+0x1f4>
				break;
			case EXTI_INT2:
				CLR_BIT(MCUCSR,MCUCSR_ISC2_BIT);
    19f4:	a4 e5       	ldi	r26, 0x54	; 84
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e4 e5       	ldi	r30, 0x54	; 84
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	8f 7b       	andi	r24, 0xBF	; 191
    1a00:	8c 93       	st	X, r24
    1a02:	53 c0       	rjmp	.+166    	; 0x1aaa <EXTI_u8SetControlSense+0x1f4>
				break;
			default:
				Local_u8ErrorState=NOK;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	50 c0       	rjmp	.+160    	; 0x1aaa <EXTI_u8SetControlSense+0x1f4>
			}
			break;

			//any change
		case EXTI_ANYCHANGE:
			if(Copy_u8Int==EXTI_INT0)
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	79 f4       	brne	.+30     	; 0x1a2e <EXTI_u8SetControlSense+0x178>
			{
				CLR_BIT(MCUCR,MCUCR_ISC01_BIT);
    1a10:	a5 e5       	ldi	r26, 0x55	; 85
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e5 e5       	ldi	r30, 0x55	; 85
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	8d 7f       	andi	r24, 0xFD	; 253
    1a1c:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC00_BIT);
    1a1e:	a5 e5       	ldi	r26, 0x55	; 85
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e5 e5       	ldi	r30, 0x55	; 85
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	81 60       	ori	r24, 0x01	; 1
    1a2a:	8c 93       	st	X, r24
    1a2c:	3e c0       	rjmp	.+124    	; 0x1aaa <EXTI_u8SetControlSense+0x1f4>
			}
			else if(Copy_u8Int==EXTI_INT1)
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	82 30       	cpi	r24, 0x02	; 2
    1a32:	79 f4       	brne	.+30     	; 0x1a52 <EXTI_u8SetControlSense+0x19c>
			{
				CLR_BIT(MCUCR,MCUCR_ISC11_BIT);
    1a34:	a5 e5       	ldi	r26, 0x55	; 85
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e5 e5       	ldi	r30, 0x55	; 85
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	87 7f       	andi	r24, 0xF7	; 247
    1a40:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC10_BIT);
    1a42:	a5 e5       	ldi	r26, 0x55	; 85
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e5 e5       	ldi	r30, 0x55	; 85
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	84 60       	ori	r24, 0x04	; 4
    1a4e:	8c 93       	st	X, r24
    1a50:	2c c0       	rjmp	.+88     	; 0x1aaa <EXTI_u8SetControlSense+0x1f4>
			}
			else
			{
				Local_u8ErrorState=NOK;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	29 c0       	rjmp	.+82     	; 0x1aaa <EXTI_u8SetControlSense+0x1f4>
			}
			break;

			//low level
		case EXTI_LOW_LEVEL:
			if(Copy_u8Int==EXTI_INT0)
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	81 30       	cpi	r24, 0x01	; 1
    1a5c:	79 f4       	brne	.+30     	; 0x1a7c <EXTI_u8SetControlSense+0x1c6>
			{
				CLR_BIT(MCUCR,MCUCR_ISC01_BIT);
    1a5e:	a5 e5       	ldi	r26, 0x55	; 85
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e5 e5       	ldi	r30, 0x55	; 85
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	8d 7f       	andi	r24, 0xFD	; 253
    1a6a:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC00_BIT);
    1a6c:	a5 e5       	ldi	r26, 0x55	; 85
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e5 e5       	ldi	r30, 0x55	; 85
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	8e 7f       	andi	r24, 0xFE	; 254
    1a78:	8c 93       	st	X, r24
    1a7a:	17 c0       	rjmp	.+46     	; 0x1aaa <EXTI_u8SetControlSense+0x1f4>
			}
			else if(Copy_u8Int==EXTI_INT1)
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	82 30       	cpi	r24, 0x02	; 2
    1a80:	79 f4       	brne	.+30     	; 0x1aa0 <EXTI_u8SetControlSense+0x1ea>
			{
				CLR_BIT(MCUCR,MCUCR_ISC11_BIT);
    1a82:	a5 e5       	ldi	r26, 0x55	; 85
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e5 e5       	ldi	r30, 0x55	; 85
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	87 7f       	andi	r24, 0xF7	; 247
    1a8e:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC10_BIT);
    1a90:	a5 e5       	ldi	r26, 0x55	; 85
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e5 e5       	ldi	r30, 0x55	; 85
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	8b 7f       	andi	r24, 0xFB	; 251
    1a9c:	8c 93       	st	X, r24
    1a9e:	05 c0       	rjmp	.+10     	; 0x1aaa <EXTI_u8SetControlSense+0x1f4>
			}
			else
			{
				Local_u8ErrorState=NOK;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <EXTI_u8SetControlSense+0x1f4>
			}
			break;

			//error in control sense
		default:
			Local_u8ErrorState=NOK;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8ErrorState;
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aac:	29 96       	adiw	r28, 0x09	; 9
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <EXTI_u8InterruptEnable>:
u8 EXTI_u8InterruptEnable(u8 Copy_u8Int)
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <EXTI_u8InterruptEnable+0x6>
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <EXTI_u8InterruptEnable+0x8>
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1acc:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Int)
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	3c 83       	std	Y+4, r19	; 0x04
    1ad6:	2b 83       	std	Y+3, r18	; 0x03
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	9c 81       	ldd	r25, Y+4	; 0x04
    1adc:	82 30       	cpi	r24, 0x02	; 2
    1ade:	91 05       	cpc	r25, r1
    1ae0:	91 f0       	breq	.+36     	; 0x1b06 <EXTI_u8InterruptEnable+0x48>
    1ae2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae6:	23 30       	cpi	r18, 0x03	; 3
    1ae8:	31 05       	cpc	r19, r1
    1aea:	a9 f0       	breq	.+42     	; 0x1b16 <EXTI_u8InterruptEnable+0x58>
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	9c 81       	ldd	r25, Y+4	; 0x04
    1af0:	81 30       	cpi	r24, 0x01	; 1
    1af2:	91 05       	cpc	r25, r1
    1af4:	c1 f4       	brne	.+48     	; 0x1b26 <EXTI_u8InterruptEnable+0x68>
	{
	case EXTI_INT0:
		SET_BIT(GICR,GICR_INT_0_BIT);
    1af6:	ab e5       	ldi	r26, 0x5B	; 91
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	eb e5       	ldi	r30, 0x5B	; 91
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	80 64       	ori	r24, 0x40	; 64
    1b02:	8c 93       	st	X, r24
    1b04:	12 c0       	rjmp	.+36     	; 0x1b2a <EXTI_u8InterruptEnable+0x6c>
		break;
	case EXTI_INT1:
		SET_BIT(GICR,GICR_INT_1_BIT);
    1b06:	ab e5       	ldi	r26, 0x5B	; 91
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	eb e5       	ldi	r30, 0x5B	; 91
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	80 68       	ori	r24, 0x80	; 128
    1b12:	8c 93       	st	X, r24
    1b14:	0a c0       	rjmp	.+20     	; 0x1b2a <EXTI_u8InterruptEnable+0x6c>
		break;
	case EXTI_INT2:
		SET_BIT(GICR,GICR_INT_2_BIT);
    1b16:	ab e5       	ldi	r26, 0x5B	; 91
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	eb e5       	ldi	r30, 0x5B	; 91
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	80 62       	ori	r24, 0x20	; 32
    1b22:	8c 93       	st	X, r24
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <EXTI_u8InterruptEnable+0x6c>
		break;
	default:
		Local_u8ErrorState=NOK;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <EXTI_u8InterruptDisable>:
u8 EXTI_u8InterruptDisable(u8 Copy_u8Int)
{
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <EXTI_u8InterruptDisable+0x6>
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <EXTI_u8InterruptDisable+0x8>
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1b48:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Int)
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	3c 83       	std	Y+4, r19	; 0x04
    1b52:	2b 83       	std	Y+3, r18	; 0x03
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	82 30       	cpi	r24, 0x02	; 2
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	91 f0       	breq	.+36     	; 0x1b82 <EXTI_u8InterruptDisable+0x48>
    1b5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b60:	3c 81       	ldd	r19, Y+4	; 0x04
    1b62:	23 30       	cpi	r18, 0x03	; 3
    1b64:	31 05       	cpc	r19, r1
    1b66:	a9 f0       	breq	.+42     	; 0x1b92 <EXTI_u8InterruptDisable+0x58>
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	91 05       	cpc	r25, r1
    1b70:	c1 f4       	brne	.+48     	; 0x1ba2 <EXTI_u8InterruptDisable+0x68>
		{
		case EXTI_INT0:
			CLR_BIT(GICR,GICR_INT_0_BIT);
    1b72:	ab e5       	ldi	r26, 0x5B	; 91
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	eb e5       	ldi	r30, 0x5B	; 91
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	8f 7b       	andi	r24, 0xBF	; 191
    1b7e:	8c 93       	st	X, r24
    1b80:	12 c0       	rjmp	.+36     	; 0x1ba6 <EXTI_u8InterruptDisable+0x6c>
			break;
		case EXTI_INT1:
			CLR_BIT(GICR,GICR_INT_1_BIT);
    1b82:	ab e5       	ldi	r26, 0x5B	; 91
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	eb e5       	ldi	r30, 0x5B	; 91
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	8f 77       	andi	r24, 0x7F	; 127
    1b8e:	8c 93       	st	X, r24
    1b90:	0a c0       	rjmp	.+20     	; 0x1ba6 <EXTI_u8InterruptDisable+0x6c>
			break;
		case EXTI_INT2:
			CLR_BIT(GICR,GICR_INT_2_BIT);
    1b92:	ab e5       	ldi	r26, 0x5B	; 91
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	eb e5       	ldi	r30, 0x5B	; 91
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8f 7d       	andi	r24, 0xDF	; 223
    1b9e:	8c 93       	st	X, r24
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <EXTI_u8InterruptDisable+0x6c>
			break;
		default:
			Local_u8ErrorState=NOK;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8ErrorState;
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack(void(*Copy_pvInt0Func)(void))
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <EXTI_u8Int0SetCallBack+0x6>
    1bbc:	0f 92       	push	r0
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	9b 83       	std	Y+3, r25	; 0x03
    1bc4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1bc6:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pvInt0Func==NULL)
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	9b 81       	ldd	r25, Y+3	; 0x03
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	19 f4       	brne	.+6      	; 0x1bd6 <EXTI_u8Int0SetCallBack+0x20>
	{
		Local_u8ErrorState=NULL_POINTER;
    1bd0:	82 e0       	ldi	r24, 0x02	; 2
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	06 c0       	rjmp	.+12     	; 0x1be2 <EXTI_u8Int0SetCallBack+0x2c>
	}
	else
	{
		EXTI_pvInt0Func=Copy_pvInt0Func;
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bda:	90 93 6e 00 	sts	0x006E, r25
    1bde:	80 93 6d 00 	sts	0x006D, r24
	}
	return Local_u8ErrorState;
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <EXTI_u8Int1SetCallBack>:
u8 EXTI_u8Int1SetCallBack(void(*Copy_pvInt1Func)(void))
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <EXTI_u8Int1SetCallBack+0x6>
    1bf6:	0f 92       	push	r0
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	9b 83       	std	Y+3, r25	; 0x03
    1bfe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1c00:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pvInt1Func==NULL)
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	9b 81       	ldd	r25, Y+3	; 0x03
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	19 f4       	brne	.+6      	; 0x1c10 <EXTI_u8Int1SetCallBack+0x20>
	{
		Local_u8ErrorState=NULL_POINTER;
    1c0a:	82 e0       	ldi	r24, 0x02	; 2
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	06 c0       	rjmp	.+12     	; 0x1c1c <EXTI_u8Int1SetCallBack+0x2c>
	}
	else
	{
		EXTI_pvInt1Func=Copy_pvInt1Func;
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	9b 81       	ldd	r25, Y+3	; 0x03
    1c14:	90 93 70 00 	sts	0x0070, r25
    1c18:	80 93 6f 00 	sts	0x006F, r24
	}
	return Local_u8ErrorState;
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <EXTI_u8Int2SetCallBack>:
u8 EXTI_u8Int2SetCallBack(void(*Copy_pvInt2Func)(void))
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <EXTI_u8Int2SetCallBack+0x6>
    1c30:	0f 92       	push	r0
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	9b 83       	std	Y+3, r25	; 0x03
    1c38:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1c3a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pvInt2Func==NULL)
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	19 f4       	brne	.+6      	; 0x1c4a <EXTI_u8Int2SetCallBack+0x20>
	{
		Local_u8ErrorState=NULL_POINTER;
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	89 83       	std	Y+1, r24	; 0x01
    1c48:	06 c0       	rjmp	.+12     	; 0x1c56 <EXTI_u8Int2SetCallBack+0x2c>
	}
	else
	{
		EXTI_pvInt2Func=Copy_pvInt2Func;
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4e:	90 93 72 00 	sts	0x0072, r25
    1c52:	80 93 71 00 	sts	0x0071, r24
	}
	return Local_u8ErrorState;
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <__vector_1>:

/*ISR*/
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    1c64:	1f 92       	push	r1
    1c66:	0f 92       	push	r0
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	0f 92       	push	r0
    1c6c:	11 24       	eor	r1, r1
    1c6e:	2f 93       	push	r18
    1c70:	3f 93       	push	r19
    1c72:	4f 93       	push	r20
    1c74:	5f 93       	push	r21
    1c76:	6f 93       	push	r22
    1c78:	7f 93       	push	r23
    1c7a:	8f 93       	push	r24
    1c7c:	9f 93       	push	r25
    1c7e:	af 93       	push	r26
    1c80:	bf 93       	push	r27
    1c82:	ef 93       	push	r30
    1c84:	ff 93       	push	r31
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvInt0Func();
    1c8e:	e0 91 6d 00 	lds	r30, 0x006D
    1c92:	f0 91 6e 00 	lds	r31, 0x006E
    1c96:	09 95       	icall
}
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	ff 91       	pop	r31
    1c9e:	ef 91       	pop	r30
    1ca0:	bf 91       	pop	r27
    1ca2:	af 91       	pop	r26
    1ca4:	9f 91       	pop	r25
    1ca6:	8f 91       	pop	r24
    1ca8:	7f 91       	pop	r23
    1caa:	6f 91       	pop	r22
    1cac:	5f 91       	pop	r21
    1cae:	4f 91       	pop	r20
    1cb0:	3f 91       	pop	r19
    1cb2:	2f 91       	pop	r18
    1cb4:	0f 90       	pop	r0
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	0f 90       	pop	r0
    1cba:	1f 90       	pop	r1
    1cbc:	18 95       	reti

00001cbe <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    1cbe:	1f 92       	push	r1
    1cc0:	0f 92       	push	r0
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	0f 92       	push	r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	2f 93       	push	r18
    1cca:	3f 93       	push	r19
    1ccc:	4f 93       	push	r20
    1cce:	5f 93       	push	r21
    1cd0:	6f 93       	push	r22
    1cd2:	7f 93       	push	r23
    1cd4:	8f 93       	push	r24
    1cd6:	9f 93       	push	r25
    1cd8:	af 93       	push	r26
    1cda:	bf 93       	push	r27
    1cdc:	ef 93       	push	r30
    1cde:	ff 93       	push	r31
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvInt1Func();
    1ce8:	e0 91 6f 00 	lds	r30, 0x006F
    1cec:	f0 91 70 00 	lds	r31, 0x0070
    1cf0:	09 95       	icall
}
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	ff 91       	pop	r31
    1cf8:	ef 91       	pop	r30
    1cfa:	bf 91       	pop	r27
    1cfc:	af 91       	pop	r26
    1cfe:	9f 91       	pop	r25
    1d00:	8f 91       	pop	r24
    1d02:	7f 91       	pop	r23
    1d04:	6f 91       	pop	r22
    1d06:	5f 91       	pop	r21
    1d08:	4f 91       	pop	r20
    1d0a:	3f 91       	pop	r19
    1d0c:	2f 91       	pop	r18
    1d0e:	0f 90       	pop	r0
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	0f 90       	pop	r0
    1d14:	1f 90       	pop	r1
    1d16:	18 95       	reti

00001d18 <__vector_3>:
void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    1d18:	1f 92       	push	r1
    1d1a:	0f 92       	push	r0
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	0f 92       	push	r0
    1d20:	11 24       	eor	r1, r1
    1d22:	2f 93       	push	r18
    1d24:	3f 93       	push	r19
    1d26:	4f 93       	push	r20
    1d28:	5f 93       	push	r21
    1d2a:	6f 93       	push	r22
    1d2c:	7f 93       	push	r23
    1d2e:	8f 93       	push	r24
    1d30:	9f 93       	push	r25
    1d32:	af 93       	push	r26
    1d34:	bf 93       	push	r27
    1d36:	ef 93       	push	r30
    1d38:	ff 93       	push	r31
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
	EXTI_pvInt2Func();
    1d42:	e0 91 71 00 	lds	r30, 0x0071
    1d46:	f0 91 72 00 	lds	r31, 0x0072
    1d4a:	09 95       	icall
}
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	ff 91       	pop	r31
    1d52:	ef 91       	pop	r30
    1d54:	bf 91       	pop	r27
    1d56:	af 91       	pop	r26
    1d58:	9f 91       	pop	r25
    1d5a:	8f 91       	pop	r24
    1d5c:	7f 91       	pop	r23
    1d5e:	6f 91       	pop	r22
    1d60:	5f 91       	pop	r21
    1d62:	4f 91       	pop	r20
    1d64:	3f 91       	pop	r19
    1d66:	2f 91       	pop	r18
    1d68:	0f 90       	pop	r0
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	0f 90       	pop	r0
    1d6e:	1f 90       	pop	r1
    1d70:	18 95       	reti

00001d72 <GIE_VoidEnable>:
#include "GIE_config.h"
#include "GIE_private.h"


void GIE_VoidEnable (void)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I_BIT);
    1d7a:	af e5       	ldi	r26, 0x5F	; 95
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	ef e5       	ldi	r30, 0x5F	; 95
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	80 68       	ori	r24, 0x80	; 128
    1d86:	8c 93       	st	X, r24
}
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <GIE_VoidDisable>:


void GIE_VoidDisable (void)
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I_BIT);
    1d96:	af e5       	ldi	r26, 0x5F	; 95
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	ef e5       	ldi	r30, 0x5F	; 95
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	8f 77       	andi	r24, 0x7F	; 127
    1da2:	8c 93       	st	X, r24
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <PORT_VoidInit>:
#include"PORT_interface.h"
#include"PORT_config.h"
#include"PORT_private.h"
#include"PORT_register.h"
void PORT_VoidInit()
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
	DDRA_reg=PORTA_DIR;
    1db2:	ea e3       	ldi	r30, 0x3A	; 58
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 ef       	ldi	r24, 0xF0	; 240
    1db8:	80 83       	st	Z, r24
	DDRB_reg=PORTB_DIR;
    1dba:	e7 e3       	ldi	r30, 0x37	; 55
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	8f ef       	ldi	r24, 0xFF	; 255
    1dc0:	80 83       	st	Z, r24
	DDRC_reg=PORTC_DIR;
    1dc2:	e4 e3       	ldi	r30, 0x34	; 52
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	87 e0       	ldi	r24, 0x07	; 7
    1dc8:	80 83       	st	Z, r24
	DDRD_reg=PORTD_DIR;
    1dca:	e1 e3       	ldi	r30, 0x31	; 49
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	8f e0       	ldi	r24, 0x0F	; 15
    1dd0:	80 83       	st	Z, r24
	
	PORTA_reg=PORTA_InitValue;
    1dd2:	eb e3       	ldi	r30, 0x3B	; 59
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	8f ef       	ldi	r24, 0xFF	; 255
    1dd8:	80 83       	st	Z, r24
    PORTB_reg=PORTB_InitValue;
    1dda:	e8 e3       	ldi	r30, 0x38	; 56
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	10 82       	st	Z, r1
    PORTC_reg=PORTC_InitValue;
    1de0:	e5 e3       	ldi	r30, 0x35	; 53
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	10 82       	st	Z, r1
    PORTD_reg=PORTD_InitValue;
    1de6:	e2 e3       	ldi	r30, 0x32	; 50
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	10 82       	st	Z, r1
}
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <TIMER0_VoidInitSync>:

void (*Timer0_Notif)(void)=NULL;
void (*ICUNotif)(void)=NULL;
u8 Global_u8State=IDLE;
void TIMER0_VoidInitSync()
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
	#else
	#error "Error in mode selection"
	#endif

		/*set OC0 Action*/
		TCCR0&=COM_OutputModeBitMask;
    1dfa:	a3 e5       	ldi	r26, 0x53	; 83
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e3 e5       	ldi	r30, 0x53	; 83
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	8f 7c       	andi	r24, 0xCF	; 207
    1e06:	8c 93       	st	X, r24
		TCCR0|=OC0_action;
    1e08:	a3 e5       	ldi	r26, 0x53	; 83
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e3 e5       	ldi	r30, 0x53	; 83
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	80 62       	ori	r24, 0x20	; 32
    1e14:	8c 93       	st	X, r24
}
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <TIMER0_u8WaitSync>:


u8 TIMER0_u8WaitSync(u8 Copy_u8RegisterValue,u32 Copy_u32Counts)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	27 97       	sbiw	r28, 0x07	; 7
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
    1e30:	8a 83       	std	Y+2, r24	; 0x02
    1e32:	4b 83       	std	Y+3, r20	; 0x03
    1e34:	5c 83       	std	Y+4, r21	; 0x04
    1e36:	6d 83       	std	Y+5, r22	; 0x05
    1e38:	7e 83       	std	Y+6, r23	; 0x06
	u8 Local_u8ErrorState=OK;
    1e3a:	19 82       	std	Y+1, r1	; 0x01
	if (Global_u8State==BUSY)
    1e3c:	80 91 6b 00 	lds	r24, 0x006B
    1e40:	88 23       	and	r24, r24
    1e42:	19 f4       	brne	.+6      	; 0x1e4a <TIMER0_u8WaitSync+0x2e>
	{
		Local_u8ErrorState=BUSY_FUNC;
    1e44:	84 e0       	ldi	r24, 0x04	; 4
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	14 c0       	rjmp	.+40     	; 0x1e72 <TIMER0_u8WaitSync+0x56>
	}
	else
	{
		/*set state to BUSY to avoid calling the function by interrupts while working in it*/
		Global_u8State=BUSY;
    1e4a:	10 92 6b 00 	sts	0x006B, r1
		#else
#error "Error in mode selection"
#endif

		/*turn timer off*/
		TCCR0&=CLK_SourceBitMask;
    1e4e:	a3 e5       	ldi	r26, 0x53	; 83
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e3 e5       	ldi	r30, 0x53	; 83
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	88 7f       	andi	r24, 0xF8	; 248
    1e5a:	8c 93       	st	X, r24
		TCCR0|=OFF;
    1e5c:	a3 e5       	ldi	r26, 0x53	; 83
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e3 e5       	ldi	r30, 0x53	; 83
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	8c 93       	st	X, r24

		/*reset state to be called again*/
		Global_u8State=IDLE;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	80 93 6b 00 	sts	0x006B, r24
		return Local_u8ErrorState;
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	8f 83       	std	Y+7, r24	; 0x07
	}
}
    1e72:	8f 81       	ldd	r24, Y+7	; 0x07
    1e74:	27 96       	adiw	r28, 0x07	; 7
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret

00001e86 <TIMER0_VoidInitAsync>:
/***************************************************************/
void TIMER0_VoidInitAsync(u8 Copy_u8RegisterValue)
{
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	0f 92       	push	r0
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	89 83       	std	Y+1, r24	; 0x01
		TCCR0|=TIMER0_1ClkSource;

#elif TIMER0_MODE==FastPWM_MODE

		/*choose Fast PWM MODE*/
		SET_BIT(TCCR0,TCCR0_WGM01);
    1e92:	a3 e5       	ldi	r26, 0x53	; 83
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e3 e5       	ldi	r30, 0x53	; 83
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	88 60       	ori	r24, 0x08	; 8
    1e9e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM00);
    1ea0:	a3 e5       	ldi	r26, 0x53	; 83
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e3 e5       	ldi	r30, 0x53	; 83
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	80 64       	ori	r24, 0x40	; 64
    1eac:	8c 93       	st	X, r24

		/*Save output compare value*/
		OCR0=Copy_u8RegisterValue;
    1eae:	ec e5       	ldi	r30, 0x5C	; 92
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	80 83       	st	Z, r24

		/*choose OC0 behavior*/
		TCCR0&=COM_OutputModeBitMask;
    1eb6:	a3 e5       	ldi	r26, 0x53	; 83
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e3 e5       	ldi	r30, 0x53	; 83
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	8f 7c       	andi	r24, 0xCF	; 207
    1ec2:	8c 93       	st	X, r24
		TCCR0|=OC0_action;
    1ec4:	a3 e5       	ldi	r26, 0x53	; 83
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e3 e5       	ldi	r30, 0x53	; 83
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	80 62       	ori	r24, 0x20	; 32
    1ed0:	8c 93       	st	X, r24

		/*Disable interrupt*/
		CLR_BIT(TIMSK,TIMSK_TOIE0);
    1ed2:	a9 e5       	ldi	r26, 0x59	; 89
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e9 e5       	ldi	r30, 0x59	; 89
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	8e 7f       	andi	r24, 0xFE	; 254
    1ede:	8c 93       	st	X, r24

		/*choose prescaler*/
		TCCR0&=CLK_SourceBitMask;
    1ee0:	a3 e5       	ldi	r26, 0x53	; 83
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e3 e5       	ldi	r30, 0x53	; 83
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	88 7f       	andi	r24, 0xF8	; 248
    1eec:	8c 93       	st	X, r24
		TCCR0|=TIMER0_1ClkSource;
    1eee:	a3 e5       	ldi	r26, 0x53	; 83
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e3 e5       	ldi	r30, 0x53	; 83
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	82 60       	ori	r24, 0x02	; 2
    1efa:	8c 93       	st	X, r24
#error "Error in mode selection"
#endif



}
    1efc:	0f 90       	pop	r0
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void (*Copy_pvNotif)(void))//used in every mode of operation
{
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <TIMER0_u8SetCallBack+0x6>
    1f0a:	0f 92       	push	r0
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	9b 83       	std	Y+3, r25	; 0x03
    1f12:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ErrorState=OK;
    1f14:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvNotif!=NULL)
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	39 f0       	breq	.+14     	; 0x1f2c <TIMER0_u8SetCallBack+0x28>
	{
		Timer0_Notif=Copy_pvNotif;
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	9b 81       	ldd	r25, Y+3	; 0x03
    1f22:	90 93 74 00 	sts	0x0074, r25
    1f26:	80 93 73 00 	sts	0x0073, r24
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <__vector_10>:
void __vector_10(void) __attribute__((signal));//compare match interrupt
void __vector_10()
{
    1f3e:	1f 92       	push	r1
    1f40:	0f 92       	push	r0
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	0f 92       	push	r0
    1f46:	11 24       	eor	r1, r1
    1f48:	2f 93       	push	r18
    1f4a:	3f 93       	push	r19
    1f4c:	4f 93       	push	r20
    1f4e:	5f 93       	push	r21
    1f50:	6f 93       	push	r22
    1f52:	7f 93       	push	r23
    1f54:	8f 93       	push	r24
    1f56:	9f 93       	push	r25
    1f58:	af 93       	push	r26
    1f5a:	bf 93       	push	r27
    1f5c:	ef 93       	push	r30
    1f5e:	ff 93       	push	r31
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62

	if(Timer0_Notif!=NULL)
    1f68:	80 91 73 00 	lds	r24, 0x0073
    1f6c:	90 91 74 00 	lds	r25, 0x0074
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	29 f0       	breq	.+10     	; 0x1f7e <__vector_10+0x40>
	{
		Timer0_Notif();
    1f74:	e0 91 73 00 	lds	r30, 0x0073
    1f78:	f0 91 74 00 	lds	r31, 0x0074
    1f7c:	09 95       	icall
	}
}
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	ff 91       	pop	r31
    1f84:	ef 91       	pop	r30
    1f86:	bf 91       	pop	r27
    1f88:	af 91       	pop	r26
    1f8a:	9f 91       	pop	r25
    1f8c:	8f 91       	pop	r24
    1f8e:	7f 91       	pop	r23
    1f90:	6f 91       	pop	r22
    1f92:	5f 91       	pop	r21
    1f94:	4f 91       	pop	r20
    1f96:	3f 91       	pop	r19
    1f98:	2f 91       	pop	r18
    1f9a:	0f 90       	pop	r0
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	0f 90       	pop	r0
    1fa0:	1f 90       	pop	r1
    1fa2:	18 95       	reti

00001fa4 <__vector_11>:
void __vector_11(void) __attribute__((signal));//overflow interrupt
void __vector_11()
{
    1fa4:	1f 92       	push	r1
    1fa6:	0f 92       	push	r0
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	0f 92       	push	r0
    1fac:	11 24       	eor	r1, r1
    1fae:	2f 93       	push	r18
    1fb0:	3f 93       	push	r19
    1fb2:	4f 93       	push	r20
    1fb4:	5f 93       	push	r21
    1fb6:	6f 93       	push	r22
    1fb8:	7f 93       	push	r23
    1fba:	8f 93       	push	r24
    1fbc:	9f 93       	push	r25
    1fbe:	af 93       	push	r26
    1fc0:	bf 93       	push	r27
    1fc2:	ef 93       	push	r30
    1fc4:	ff 93       	push	r31
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_Notif!=NULL)
    1fce:	80 91 73 00 	lds	r24, 0x0073
    1fd2:	90 91 74 00 	lds	r25, 0x0074
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	29 f0       	breq	.+10     	; 0x1fe4 <__vector_11+0x40>
	{
		Timer0_Notif();
    1fda:	e0 91 73 00 	lds	r30, 0x0073
    1fde:	f0 91 74 00 	lds	r31, 0x0074
    1fe2:	09 95       	icall
	}
}
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	ff 91       	pop	r31
    1fea:	ef 91       	pop	r30
    1fec:	bf 91       	pop	r27
    1fee:	af 91       	pop	r26
    1ff0:	9f 91       	pop	r25
    1ff2:	8f 91       	pop	r24
    1ff4:	7f 91       	pop	r23
    1ff6:	6f 91       	pop	r22
    1ff8:	5f 91       	pop	r21
    1ffa:	4f 91       	pop	r20
    1ffc:	3f 91       	pop	r19
    1ffe:	2f 91       	pop	r18
    2000:	0f 90       	pop	r0
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	0f 90       	pop	r0
    2006:	1f 90       	pop	r1
    2008:	18 95       	reti

0000200a <TIMER0_SetPreload>:
void TIMER0_SetPreload(u8 Copy_u8Preload)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	0f 92       	push	r0
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	89 83       	std	Y+1, r24	; 0x01
#if TIMER0_MODE==Normal_MODE
	TCNT0=Copy_u8Preload;
#endif
}
    2016:	0f 90       	pop	r0
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <TIMER1_VoidInit>:

void TIMER1_VoidInit(u16 Copy_u16TOP)
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	00 d0       	rcall	.+0      	; 0x2024 <TIMER1_VoidInit+0x6>
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	9a 83       	std	Y+2, r25	; 0x02
    202a:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B|=TIMER1_1ClkSource;
#elif TIMER1_MODE==CTC_MODE
#elif TIMER1_MODE==Normal_MODE

		/*set wave form generation to normal*/
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    202c:	af e4       	ldi	r26, 0x4F	; 79
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	ef e4       	ldi	r30, 0x4F	; 79
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	8d 7f       	andi	r24, 0xFD	; 253
    2038:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    203a:	ae e4       	ldi	r26, 0x4E	; 78
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	ee e4       	ldi	r30, 0x4E	; 78
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	87 7f       	andi	r24, 0xF7	; 247
    2046:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2048:	ae e4       	ldi	r26, 0x4E	; 78
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	ee e4       	ldi	r30, 0x4E	; 78
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	8f 7e       	andi	r24, 0xEF	; 239
    2054:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2056:	af e4       	ldi	r26, 0x4F	; 79
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	ef e4       	ldi	r30, 0x4F	; 79
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	8e 7f       	andi	r24, 0xFE	; 254
    2062:	8c 93       	st	X, r24

		/*choose OC1 to be disconnected*/
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2064:	af e4       	ldi	r26, 0x4F	; 79
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	ef e4       	ldi	r30, 0x4F	; 79
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	8f 7b       	andi	r24, 0xBF	; 191
    2070:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    2072:	af e4       	ldi	r26, 0x4F	; 79
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	ef e4       	ldi	r30, 0x4F	; 79
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	8f 77       	andi	r24, 0x7F	; 127
    207e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2080:	af e4       	ldi	r26, 0x4F	; 79
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	ef e4       	ldi	r30, 0x4F	; 79
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	8f 7e       	andi	r24, 0xEF	; 239
    208c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    208e:	af e4       	ldi	r26, 0x4F	; 79
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	ef e4       	ldi	r30, 0x4F	; 79
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	8f 7d       	andi	r24, 0xDF	; 223
    209a:	8c 93       	st	X, r24

		/*set prescaler*/
		TCCR1B&=CLK_SourceBitMask;
    209c:	ae e4       	ldi	r26, 0x4E	; 78
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	ee e4       	ldi	r30, 0x4E	; 78
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	88 7f       	andi	r24, 0xF8	; 248
    20a8:	8c 93       	st	X, r24
		TCCR1B|=TIMER1_1ClkSource;
    20aa:	ae e4       	ldi	r26, 0x4E	; 78
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	ee e4       	ldi	r30, 0x4E	; 78
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	82 60       	ori	r24, 0x02	; 2
    20b6:	8c 93       	st	X, r24

#elif TIMER1_MODE==PhaseCorrect
#else
#error "Error in TIMER1_MODE"
#endif
}
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <TIMER1_VoidSetTimerValue>:
void TIMER1_VoidSetTimerValue(u16 Copy_u16TimerValue)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <TIMER1_VoidSetTimerValue+0x6>
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	9a 83       	std	Y+2, r25	; 0x02
    20ce:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16TimerValue;
    20d0:	ec e4       	ldi	r30, 0x4C	; 76
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	91 83       	std	Z+1, r25	; 0x01
    20da:	80 83       	st	Z, r24
}
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <TIMER1_u16ReadTimerValue>:
u16 TIMER1_u16ReadTimerValue()
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    20ee:	ec e4       	ldi	r30, 0x4C	; 76
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
}
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <TIMER1_VoidSetOCRValue>:
void TIMER1_VoidSetOCRValue(u16 Copy_u16RegisterValue)
{
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	00 d0       	rcall	.+0      	; 0x2102 <TIMER1_VoidSetOCRValue+0x6>
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	9a 83       	std	Y+2, r25	; 0x02
    2108:	89 83       	std	Y+1, r24	; 0x01
	/*Set the Compare match value in OCR1 of the Channel A*/
		OCR1A=Copy_u16RegisterValue;
    210a:	ea e4       	ldi	r30, 0x4A	; 74
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	9a 81       	ldd	r25, Y+2	; 0x02
    2112:	91 83       	std	Z+1, r25	; 0x01
    2114:	80 83       	st	Z, r24
}
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <Timer1ICU_VoidICUInit>:

void Timer1ICU_VoidICUInit(u8 Local_u8Edge)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	0f 92       	push	r0
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	89 83       	std	Y+1, r24	; 0x01
	/*set the initial edge*/
	if(Local_u8Edge==ICU_Rising)
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	88 23       	and	r24, r24
    2130:	41 f4       	brne	.+16     	; 0x2142 <Timer1ICU_VoidICUInit+0x22>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    2132:	ae e4       	ldi	r26, 0x4E	; 78
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	ee e4       	ldi	r30, 0x4E	; 78
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	80 64       	ori	r24, 0x40	; 64
    213e:	8c 93       	st	X, r24
    2140:	0a c0       	rjmp	.+20     	; 0x2156 <Timer1ICU_VoidICUInit+0x36>
	}
	else if(Local_u8Edge==ICU_Falling)
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	81 30       	cpi	r24, 0x01	; 1
    2146:	39 f4       	brne	.+14     	; 0x2156 <Timer1ICU_VoidICUInit+0x36>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    2148:	ae e4       	ldi	r26, 0x4E	; 78
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	ee e4       	ldi	r30, 0x4E	; 78
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	8f 7b       	andi	r24, 0xBF	; 191
    2154:	8c 93       	st	X, r24
	}
	/*enable ICU interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2156:	a9 e5       	ldi	r26, 0x59	; 89
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e9 e5       	ldi	r30, 0x59	; 89
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	80 62       	ori	r24, 0x20	; 32
    2162:	8c 93       	st	X, r24
}
    2164:	0f 90       	pop	r0
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <Timer1ICU_VoidSetEdge>:
void Timer1ICU_VoidSetEdge(u8 Local_u8Edge)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	0f 92       	push	r0
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u8Edge==ICU_Rising)
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	88 23       	and	r24, r24
    217c:	41 f4       	brne	.+16     	; 0x218e <Timer1ICU_VoidSetEdge+0x22>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    217e:	ae e4       	ldi	r26, 0x4E	; 78
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	ee e4       	ldi	r30, 0x4E	; 78
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	80 64       	ori	r24, 0x40	; 64
    218a:	8c 93       	st	X, r24
    218c:	0a c0       	rjmp	.+20     	; 0x21a2 <Timer1ICU_VoidSetEdge+0x36>
	}
	else if(Local_u8Edge==ICU_Falling)
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	81 30       	cpi	r24, 0x01	; 1
    2192:	39 f4       	brne	.+14     	; 0x21a2 <Timer1ICU_VoidSetEdge+0x36>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    2194:	ae e4       	ldi	r26, 0x4E	; 78
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	ee e4       	ldi	r30, 0x4E	; 78
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	8f 7b       	andi	r24, 0xBF	; 191
    21a0:	8c 93       	st	X, r24
	}
}
    21a2:	0f 90       	pop	r0
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <Timer1ICU_VoidDisableInterrupt>:
void Timer1ICU_VoidDisableInterrupt()
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
	/*disable ICU interrupt*/
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    21b2:	a9 e5       	ldi	r26, 0x59	; 89
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e9 e5       	ldi	r30, 0x59	; 89
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	8f 7d       	andi	r24, 0xDF	; 223
    21be:	8c 93       	st	X, r24
}
    21c0:	cf 91       	pop	r28
    21c2:	df 91       	pop	r29
    21c4:	08 95       	ret

000021c6 <Timer1ICU_VoidEnableInterrupt>:
void Timer1ICU_VoidEnableInterrupt()
{
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
	/*enable ICU interrupt*/
		SET_BIT(TIMSK,TIMSK_TICIE1);
    21ce:	a9 e5       	ldi	r26, 0x59	; 89
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e9 e5       	ldi	r30, 0x59	; 89
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	80 62       	ori	r24, 0x20	; 32
    21da:	8c 93       	st	X, r24
}
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <TIMER1ICU_u8SetCallBack>:
u8 TIMER1ICU_u8SetCallBack(void(*ICUFUNC)(void))
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <TIMER1ICU_u8SetCallBack+0x6>
    21e8:	0f 92       	push	r0
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	9b 83       	std	Y+3, r25	; 0x03
    21f0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    21f2:	19 82       	std	Y+1, r1	; 0x01
	if(ICUFUNC!=NULL)
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	9b 81       	ldd	r25, Y+3	; 0x03
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	39 f0       	breq	.+14     	; 0x220a <TIMER1ICU_u8SetCallBack+0x28>
	{
		ICUNotif=ICUFUNC;
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2200:	90 93 76 00 	sts	0x0076, r25
    2204:	80 93 75 00 	sts	0x0075, r24
    2208:	02 c0       	rjmp	.+4      	; 0x220e <TIMER1ICU_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    220e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <TIMER1ICU_u16GetICRValue>:
u16 TIMER1ICU_u16GetICRValue()
{
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2224:	e6 e4       	ldi	r30, 0x46	; 70
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	91 81       	ldd	r25, Z+1	; 0x01
}
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <__vector_6>:
void __vector_6(void) __attribute__((signal));
void __vector_6()
{
    2232:	1f 92       	push	r1
    2234:	0f 92       	push	r0
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	0f 92       	push	r0
    223a:	11 24       	eor	r1, r1
    223c:	2f 93       	push	r18
    223e:	3f 93       	push	r19
    2240:	4f 93       	push	r20
    2242:	5f 93       	push	r21
    2244:	6f 93       	push	r22
    2246:	7f 93       	push	r23
    2248:	8f 93       	push	r24
    224a:	9f 93       	push	r25
    224c:	af 93       	push	r26
    224e:	bf 93       	push	r27
    2250:	ef 93       	push	r30
    2252:	ff 93       	push	r31
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
	ICUNotif();
    225c:	e0 91 75 00 	lds	r30, 0x0075
    2260:	f0 91 76 00 	lds	r31, 0x0076
    2264:	09 95       	icall
}
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	ff 91       	pop	r31
    226c:	ef 91       	pop	r30
    226e:	bf 91       	pop	r27
    2270:	af 91       	pop	r26
    2272:	9f 91       	pop	r25
    2274:	8f 91       	pop	r24
    2276:	7f 91       	pop	r23
    2278:	6f 91       	pop	r22
    227a:	5f 91       	pop	r21
    227c:	4f 91       	pop	r20
    227e:	3f 91       	pop	r19
    2280:	2f 91       	pop	r18
    2282:	0f 90       	pop	r0
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	0f 90       	pop	r0
    2288:	1f 90       	pop	r1
    228a:	18 95       	reti

0000228c <S32Map>:
/*move the servo with potentiometer*/
void HW_ICU();
static u16 PeriodTicks=0;
static u16 ONTicks=0;
s32 S32Map (s32 S32_X1,s32 S32_X2,s32 S32_Y2,s32 S32_Y1,s32 S32_X)
{
    228c:	af 92       	push	r10
    228e:	bf 92       	push	r11
    2290:	cf 92       	push	r12
    2292:	df 92       	push	r13
    2294:	ef 92       	push	r14
    2296:	ff 92       	push	r15
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	60 97       	sbiw	r28, 0x10	; 16
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	69 83       	std	Y+1, r22	; 0x01
    22b2:	7a 83       	std	Y+2, r23	; 0x02
    22b4:	8b 83       	std	Y+3, r24	; 0x03
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	2d 83       	std	Y+5, r18	; 0x05
    22ba:	3e 83       	std	Y+6, r19	; 0x06
    22bc:	4f 83       	std	Y+7, r20	; 0x07
    22be:	58 87       	std	Y+8, r21	; 0x08
    22c0:	e9 86       	std	Y+9, r14	; 0x09
    22c2:	fa 86       	std	Y+10, r15	; 0x0a
    22c4:	0b 87       	std	Y+11, r16	; 0x0b
    22c6:	1c 87       	std	Y+12, r17	; 0x0c
    22c8:	ad 86       	std	Y+13, r10	; 0x0d
    22ca:	be 86       	std	Y+14, r11	; 0x0e
    22cc:	cf 86       	std	Y+15, r12	; 0x0f
    22ce:	d8 8a       	std	Y+16, r13	; 0x10
	return (S32_Y1+((S32_X-S32_X1)*(S32_Y2-S32_Y1)/(S32_X2-S32_X1)));
    22d0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    22d2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    22d4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    22d6:	58 a1       	ldd	r21, Y+32	; 0x20
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	9a 81       	ldd	r25, Y+2	; 0x02
    22dc:	ab 81       	ldd	r26, Y+3	; 0x03
    22de:	bc 81       	ldd	r27, Y+4	; 0x04
    22e0:	79 01       	movw	r14, r18
    22e2:	8a 01       	movw	r16, r20
    22e4:	e8 1a       	sub	r14, r24
    22e6:	f9 0a       	sbc	r15, r25
    22e8:	0a 0b       	sbc	r16, r26
    22ea:	1b 0b       	sbc	r17, r27
    22ec:	29 85       	ldd	r18, Y+9	; 0x09
    22ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    22f0:	4b 85       	ldd	r20, Y+11	; 0x0b
    22f2:	5c 85       	ldd	r21, Y+12	; 0x0c
    22f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f8:	af 85       	ldd	r26, Y+15	; 0x0f
    22fa:	b8 89       	ldd	r27, Y+16	; 0x10
    22fc:	28 1b       	sub	r18, r24
    22fe:	39 0b       	sbc	r19, r25
    2300:	4a 0b       	sbc	r20, r26
    2302:	5b 0b       	sbc	r21, r27
    2304:	c8 01       	movw	r24, r16
    2306:	b7 01       	movw	r22, r14
    2308:	0e 94 43 12 	call	0x2486	; 0x2486 <__mulsi3>
    230c:	7b 01       	movw	r14, r22
    230e:	8c 01       	movw	r16, r24
    2310:	2d 81       	ldd	r18, Y+5	; 0x05
    2312:	3e 81       	ldd	r19, Y+6	; 0x06
    2314:	4f 81       	ldd	r20, Y+7	; 0x07
    2316:	58 85       	ldd	r21, Y+8	; 0x08
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	9a 81       	ldd	r25, Y+2	; 0x02
    231c:	ab 81       	ldd	r26, Y+3	; 0x03
    231e:	bc 81       	ldd	r27, Y+4	; 0x04
    2320:	28 1b       	sub	r18, r24
    2322:	39 0b       	sbc	r19, r25
    2324:	4a 0b       	sbc	r20, r26
    2326:	5b 0b       	sbc	r21, r27
    2328:	c8 01       	movw	r24, r16
    232a:	b7 01       	movw	r22, r14
    232c:	0e 94 84 12 	call	0x2508	; 0x2508 <__divmodsi4>
    2330:	da 01       	movw	r26, r20
    2332:	c9 01       	movw	r24, r18
    2334:	9c 01       	movw	r18, r24
    2336:	ad 01       	movw	r20, r26
    2338:	8d 85       	ldd	r24, Y+13	; 0x0d
    233a:	9e 85       	ldd	r25, Y+14	; 0x0e
    233c:	af 85       	ldd	r26, Y+15	; 0x0f
    233e:	b8 89       	ldd	r27, Y+16	; 0x10
    2340:	82 0f       	add	r24, r18
    2342:	93 1f       	adc	r25, r19
    2344:	a4 1f       	adc	r26, r20
    2346:	b5 1f       	adc	r27, r21
}
    2348:	bc 01       	movw	r22, r24
    234a:	cd 01       	movw	r24, r26
    234c:	60 96       	adiw	r28, 0x10	; 16
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	1f 91       	pop	r17
    235e:	0f 91       	pop	r16
    2360:	ff 90       	pop	r15
    2362:	ef 90       	pop	r14
    2364:	df 90       	pop	r13
    2366:	cf 90       	pop	r12
    2368:	bf 90       	pop	r11
    236a:	af 90       	pop	r10
    236c:	08 95       	ret

0000236e <main>:
void main()
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	0f 92       	push	r0
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
		u8 Local_u8OCR0Value=64;
    2378:	80 e4       	ldi	r24, 0x40	; 64
    237a:	89 83       	std	Y+1, r24	; 0x01
		PORT_VoidInit();
    237c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <PORT_VoidInit>
		CLCD_VoidInit();
    2380:	0e 94 d7 07 	call	0xfae	; 0xfae <CLCD_VoidInit>

		/*set ICU callback function*/
		TIMER1ICU_u8SetCallBack(&HW_ICU);
    2384:	82 ef       	ldi	r24, 0xF2	; 242
    2386:	91 e1       	ldi	r25, 0x11	; 17
    2388:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <TIMER1ICU_u8SetCallBack>
		/*initialize ICU*/
		Timer1ICU_VoidICUInit(ICU_Rising);
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	0e 94 90 10 	call	0x2120	; 0x2120 <Timer1ICU_VoidICUInit>
		/*initialize timer1*/
		TIMER1_VoidInit(0);
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	0e 94 0f 10 	call	0x201e	; 0x201e <TIMER1_VoidInit>

		/*start PWM with OCR value*/
		TIMER0_VoidInitAsync(Local_u8OCR0Value);
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <TIMER0_VoidInitAsync>
		GIE_VoidEnable();
    23a2:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <GIE_VoidEnable>
		while(1)
		{
			//while(PeriodTicks==0&&ONTicks==0);

			CLCD_VoidGoToXY(0,0);
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	60 e0       	ldi	r22, 0x00	; 0
    23aa:	0e 94 9a 08 	call	0x1134	; 0x1134 <CLCD_VoidGoToXY>
			CLCD_VoidShowNum(PeriodTicks);
    23ae:	80 91 77 00 	lds	r24, 0x0077
    23b2:	90 91 78 00 	lds	r25, 0x0078
    23b6:	cc 01       	movw	r24, r24
    23b8:	a0 e0       	ldi	r26, 0x00	; 0
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	bc 01       	movw	r22, r24
    23be:	cd 01       	movw	r24, r26
    23c0:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <CLCD_VoidShowNum>
			CLCD_VoidSendString("//");
    23c4:	80 e6       	ldi	r24, 0x60	; 96
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	0e 94 71 08 	call	0x10e2	; 0x10e2 <CLCD_VoidSendString>
			CLCD_VoidShowNum(ONTicks);
    23cc:	80 91 79 00 	lds	r24, 0x0079
    23d0:	90 91 7a 00 	lds	r25, 0x007A
    23d4:	cc 01       	movw	r24, r24
    23d6:	a0 e0       	ldi	r26, 0x00	; 0
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <CLCD_VoidShowNum>
    23e2:	e1 cf       	rjmp	.-62     	; 0x23a6 <main+0x38>

000023e4 <HW_ICU>:
		}

}
void HW_ICU()
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter=0;
	static u16 ISRValue1;
	static u16 ISRValue2;
	static u16 ISRValue3;
	Local_u8Counter++;
    23ec:	80 91 81 00 	lds	r24, 0x0081
    23f0:	8f 5f       	subi	r24, 0xFF	; 255
    23f2:	80 93 81 00 	sts	0x0081, r24
	if(Local_u8Counter==1)
    23f6:	80 91 81 00 	lds	r24, 0x0081
    23fa:	81 30       	cpi	r24, 0x01	; 1
    23fc:	39 f4       	brne	.+14     	; 0x240c <HW_ICU+0x28>
	{
		/*read value from ICU*/
		ISRValue1=TIMER1ICU_u16GetICRValue();
    23fe:	0e 94 0e 11 	call	0x221c	; 0x221c <TIMER1ICU_u16GetICRValue>
    2402:	90 93 80 00 	sts	0x0080, r25
    2406:	80 93 7f 00 	sts	0x007F, r24
    240a:	3a c0       	rjmp	.+116    	; 0x2480 <HW_ICU+0x9c>
	}
	else if(Local_u8Counter==2)
    240c:	80 91 81 00 	lds	r24, 0x0081
    2410:	82 30       	cpi	r24, 0x02	; 2
    2412:	d1 f4       	brne	.+52     	; 0x2448 <HW_ICU+0x64>
	{
		/*read value from ICU*/
		ISRValue2=TIMER1ICU_u16GetICRValue();
    2414:	0e 94 0e 11 	call	0x221c	; 0x221c <TIMER1ICU_u16GetICRValue>
    2418:	90 93 7e 00 	sts	0x007E, r25
    241c:	80 93 7d 00 	sts	0x007D, r24

		/*get period ticks*/
		PeriodTicks=ISRValue2-ISRValue1;
    2420:	20 91 7d 00 	lds	r18, 0x007D
    2424:	30 91 7e 00 	lds	r19, 0x007E
    2428:	80 91 7f 00 	lds	r24, 0x007F
    242c:	90 91 80 00 	lds	r25, 0x0080
    2430:	a9 01       	movw	r20, r18
    2432:	48 1b       	sub	r20, r24
    2434:	59 0b       	sbc	r21, r25
    2436:	ca 01       	movw	r24, r20
    2438:	90 93 78 00 	sts	0x0078, r25
    243c:	80 93 77 00 	sts	0x0077, r24

		/*change the control sense to falling*/
		Timer1ICU_VoidSetEdge(ICU_Falling);
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	0e 94 b6 10 	call	0x216c	; 0x216c <Timer1ICU_VoidSetEdge>
    2446:	1c c0       	rjmp	.+56     	; 0x2480 <HW_ICU+0x9c>

	}
	else if(Local_u8Counter==3)
    2448:	80 91 81 00 	lds	r24, 0x0081
    244c:	83 30       	cpi	r24, 0x03	; 3
    244e:	c1 f4       	brne	.+48     	; 0x2480 <HW_ICU+0x9c>
	{
		/*read value from ICU*/
		ISRValue3=TIMER1ICU_u16GetICRValue();
    2450:	0e 94 0e 11 	call	0x221c	; 0x221c <TIMER1ICU_u16GetICRValue>
    2454:	90 93 7c 00 	sts	0x007C, r25
    2458:	80 93 7b 00 	sts	0x007B, r24

		/*calculate on ticks*/
		ONTicks=ISRValue3-ISRValue2;
    245c:	20 91 7b 00 	lds	r18, 0x007B
    2460:	30 91 7c 00 	lds	r19, 0x007C
    2464:	80 91 7d 00 	lds	r24, 0x007D
    2468:	90 91 7e 00 	lds	r25, 0x007E
    246c:	a9 01       	movw	r20, r18
    246e:	48 1b       	sub	r20, r24
    2470:	59 0b       	sbc	r21, r25
    2472:	ca 01       	movw	r24, r20
    2474:	90 93 7a 00 	sts	0x007A, r25
    2478:	80 93 79 00 	sts	0x0079, r24

		/*Shut down the interrupt*/
		Timer1ICU_VoidDisableInterrupt();
    247c:	0e 94 d5 10 	call	0x21aa	; 0x21aa <Timer1ICU_VoidDisableInterrupt>

		/*Reset the Local counter for future calculation of period and on time ticks*/
	//	Local_u8Counter=0;

	}
}
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <__mulsi3>:
    2486:	62 9f       	mul	r22, r18
    2488:	d0 01       	movw	r26, r0
    248a:	73 9f       	mul	r23, r19
    248c:	f0 01       	movw	r30, r0
    248e:	82 9f       	mul	r24, r18
    2490:	e0 0d       	add	r30, r0
    2492:	f1 1d       	adc	r31, r1
    2494:	64 9f       	mul	r22, r20
    2496:	e0 0d       	add	r30, r0
    2498:	f1 1d       	adc	r31, r1
    249a:	92 9f       	mul	r25, r18
    249c:	f0 0d       	add	r31, r0
    249e:	83 9f       	mul	r24, r19
    24a0:	f0 0d       	add	r31, r0
    24a2:	74 9f       	mul	r23, r20
    24a4:	f0 0d       	add	r31, r0
    24a6:	65 9f       	mul	r22, r21
    24a8:	f0 0d       	add	r31, r0
    24aa:	99 27       	eor	r25, r25
    24ac:	72 9f       	mul	r23, r18
    24ae:	b0 0d       	add	r27, r0
    24b0:	e1 1d       	adc	r30, r1
    24b2:	f9 1f       	adc	r31, r25
    24b4:	63 9f       	mul	r22, r19
    24b6:	b0 0d       	add	r27, r0
    24b8:	e1 1d       	adc	r30, r1
    24ba:	f9 1f       	adc	r31, r25
    24bc:	bd 01       	movw	r22, r26
    24be:	cf 01       	movw	r24, r30
    24c0:	11 24       	eor	r1, r1
    24c2:	08 95       	ret

000024c4 <__udivmodsi4>:
    24c4:	a1 e2       	ldi	r26, 0x21	; 33
    24c6:	1a 2e       	mov	r1, r26
    24c8:	aa 1b       	sub	r26, r26
    24ca:	bb 1b       	sub	r27, r27
    24cc:	fd 01       	movw	r30, r26
    24ce:	0d c0       	rjmp	.+26     	; 0x24ea <__udivmodsi4_ep>

000024d0 <__udivmodsi4_loop>:
    24d0:	aa 1f       	adc	r26, r26
    24d2:	bb 1f       	adc	r27, r27
    24d4:	ee 1f       	adc	r30, r30
    24d6:	ff 1f       	adc	r31, r31
    24d8:	a2 17       	cp	r26, r18
    24da:	b3 07       	cpc	r27, r19
    24dc:	e4 07       	cpc	r30, r20
    24de:	f5 07       	cpc	r31, r21
    24e0:	20 f0       	brcs	.+8      	; 0x24ea <__udivmodsi4_ep>
    24e2:	a2 1b       	sub	r26, r18
    24e4:	b3 0b       	sbc	r27, r19
    24e6:	e4 0b       	sbc	r30, r20
    24e8:	f5 0b       	sbc	r31, r21

000024ea <__udivmodsi4_ep>:
    24ea:	66 1f       	adc	r22, r22
    24ec:	77 1f       	adc	r23, r23
    24ee:	88 1f       	adc	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	1a 94       	dec	r1
    24f4:	69 f7       	brne	.-38     	; 0x24d0 <__udivmodsi4_loop>
    24f6:	60 95       	com	r22
    24f8:	70 95       	com	r23
    24fa:	80 95       	com	r24
    24fc:	90 95       	com	r25
    24fe:	9b 01       	movw	r18, r22
    2500:	ac 01       	movw	r20, r24
    2502:	bd 01       	movw	r22, r26
    2504:	cf 01       	movw	r24, r30
    2506:	08 95       	ret

00002508 <__divmodsi4>:
    2508:	97 fb       	bst	r25, 7
    250a:	09 2e       	mov	r0, r25
    250c:	05 26       	eor	r0, r21
    250e:	0e d0       	rcall	.+28     	; 0x252c <__divmodsi4_neg1>
    2510:	57 fd       	sbrc	r21, 7
    2512:	04 d0       	rcall	.+8      	; 0x251c <__divmodsi4_neg2>
    2514:	d7 df       	rcall	.-82     	; 0x24c4 <__udivmodsi4>
    2516:	0a d0       	rcall	.+20     	; 0x252c <__divmodsi4_neg1>
    2518:	00 1c       	adc	r0, r0
    251a:	38 f4       	brcc	.+14     	; 0x252a <__divmodsi4_exit>

0000251c <__divmodsi4_neg2>:
    251c:	50 95       	com	r21
    251e:	40 95       	com	r20
    2520:	30 95       	com	r19
    2522:	21 95       	neg	r18
    2524:	3f 4f       	sbci	r19, 0xFF	; 255
    2526:	4f 4f       	sbci	r20, 0xFF	; 255
    2528:	5f 4f       	sbci	r21, 0xFF	; 255

0000252a <__divmodsi4_exit>:
    252a:	08 95       	ret

0000252c <__divmodsi4_neg1>:
    252c:	f6 f7       	brtc	.-4      	; 0x252a <__divmodsi4_exit>
    252e:	90 95       	com	r25
    2530:	80 95       	com	r24
    2532:	70 95       	com	r23
    2534:	61 95       	neg	r22
    2536:	7f 4f       	sbci	r23, 0xFF	; 255
    2538:	8f 4f       	sbci	r24, 0xFF	; 255
    253a:	9f 4f       	sbci	r25, 0xFF	; 255
    253c:	08 95       	ret

0000253e <__prologue_saves__>:
    253e:	2f 92       	push	r2
    2540:	3f 92       	push	r3
    2542:	4f 92       	push	r4
    2544:	5f 92       	push	r5
    2546:	6f 92       	push	r6
    2548:	7f 92       	push	r7
    254a:	8f 92       	push	r8
    254c:	9f 92       	push	r9
    254e:	af 92       	push	r10
    2550:	bf 92       	push	r11
    2552:	cf 92       	push	r12
    2554:	df 92       	push	r13
    2556:	ef 92       	push	r14
    2558:	ff 92       	push	r15
    255a:	0f 93       	push	r16
    255c:	1f 93       	push	r17
    255e:	cf 93       	push	r28
    2560:	df 93       	push	r29
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	ca 1b       	sub	r28, r26
    2568:	db 0b       	sbc	r29, r27
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	09 94       	ijmp

00002576 <__epilogue_restores__>:
    2576:	2a 88       	ldd	r2, Y+18	; 0x12
    2578:	39 88       	ldd	r3, Y+17	; 0x11
    257a:	48 88       	ldd	r4, Y+16	; 0x10
    257c:	5f 84       	ldd	r5, Y+15	; 0x0f
    257e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2580:	7d 84       	ldd	r7, Y+13	; 0x0d
    2582:	8c 84       	ldd	r8, Y+12	; 0x0c
    2584:	9b 84       	ldd	r9, Y+11	; 0x0b
    2586:	aa 84       	ldd	r10, Y+10	; 0x0a
    2588:	b9 84       	ldd	r11, Y+9	; 0x09
    258a:	c8 84       	ldd	r12, Y+8	; 0x08
    258c:	df 80       	ldd	r13, Y+7	; 0x07
    258e:	ee 80       	ldd	r14, Y+6	; 0x06
    2590:	fd 80       	ldd	r15, Y+5	; 0x05
    2592:	0c 81       	ldd	r16, Y+4	; 0x04
    2594:	1b 81       	ldd	r17, Y+3	; 0x03
    2596:	aa 81       	ldd	r26, Y+2	; 0x02
    2598:	b9 81       	ldd	r27, Y+1	; 0x01
    259a:	ce 0f       	add	r28, r30
    259c:	d1 1d       	adc	r29, r1
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	f8 94       	cli
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	ed 01       	movw	r28, r26
    25aa:	08 95       	ret

000025ac <_exit>:
    25ac:	f8 94       	cli

000025ae <__stop_program>:
    25ae:	ff cf       	rjmp	.-2      	; 0x25ae <__stop_program>
