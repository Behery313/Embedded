
project23_SW_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000009d6  00000a6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006c  0080006c  00000a76  2**0
                  ALLOC
  3 .stab         00001044  00000000  00000000  00000a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a1a  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__vector_10>
  2c:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <main>
  8a:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_u8SetPinValue>:
/******************************************************************************/
/***********************Setting pin value**************************************/
/******************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin,u8 Copy_u8Value)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	28 97       	sbiw	r28, 0x08	; 8
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	8a 83       	std	Y+2, r24	; 0x02
  a8:	6b 83       	std	Y+3, r22	; 0x03
  aa:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially zero
  ac:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN_7)
  ae:	8b 81       	ldd	r24, Y+3	; 0x03
  b0:	88 30       	cpi	r24, 0x08	; 8
  b2:	08 f0       	brcs	.+2      	; 0xb6 <DIO_u8SetPinValue+0x24>
  b4:	ed c0       	rjmp	.+474    	; 0x290 <DIO_u8SetPinValue+0x1fe>
	{
		if (Copy_u8Value)//if value is 1 SET the required PIN
  b6:	8c 81       	ldd	r24, Y+4	; 0x04
  b8:	88 23       	and	r24, r24
  ba:	09 f4       	brne	.+2      	; 0xbe <DIO_u8SetPinValue+0x2c>
  bc:	72 c0       	rjmp	.+228    	; 0x1a2 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
  be:	8a 81       	ldd	r24, Y+2	; 0x02
  c0:	28 2f       	mov	r18, r24
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	38 87       	std	Y+8, r19	; 0x08
  c6:	2f 83       	std	Y+7, r18	; 0x07
  c8:	8f 81       	ldd	r24, Y+7	; 0x07
  ca:	98 85       	ldd	r25, Y+8	; 0x08
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	91 05       	cpc	r25, r1
  d0:	49 f1       	breq	.+82     	; 0x124 <DIO_u8SetPinValue+0x92>
  d2:	2f 81       	ldd	r18, Y+7	; 0x07
  d4:	38 85       	ldd	r19, Y+8	; 0x08
  d6:	22 30       	cpi	r18, 0x02	; 2
  d8:	31 05       	cpc	r19, r1
  da:	2c f4       	brge	.+10     	; 0xe6 <DIO_u8SetPinValue+0x54>
  dc:	8f 81       	ldd	r24, Y+7	; 0x07
  de:	98 85       	ldd	r25, Y+8	; 0x08
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	61 f0       	breq	.+24     	; 0xfc <DIO_u8SetPinValue+0x6a>
  e4:	5b c0       	rjmp	.+182    	; 0x19c <DIO_u8SetPinValue+0x10a>
  e6:	2f 81       	ldd	r18, Y+7	; 0x07
  e8:	38 85       	ldd	r19, Y+8	; 0x08
  ea:	22 30       	cpi	r18, 0x02	; 2
  ec:	31 05       	cpc	r19, r1
  ee:	71 f1       	breq	.+92     	; 0x14c <DIO_u8SetPinValue+0xba>
  f0:	8f 81       	ldd	r24, Y+7	; 0x07
  f2:	98 85       	ldd	r25, Y+8	; 0x08
  f4:	83 30       	cpi	r24, 0x03	; 3
  f6:	91 05       	cpc	r25, r1
  f8:	e9 f1       	breq	.+122    	; 0x174 <DIO_u8SetPinValue+0xe2>
  fa:	50 c0       	rjmp	.+160    	; 0x19c <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA:
				SET_BIT(PORTA_reg,Copy_u8Pin);
  fc:	ab e3       	ldi	r26, 0x3B	; 59
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	eb e3       	ldi	r30, 0x3B	; 59
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	48 2f       	mov	r20, r24
 108:	8b 81       	ldd	r24, Y+3	; 0x03
 10a:	28 2f       	mov	r18, r24
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 2e       	mov	r0, r18
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_u8SetPinValue+0x88>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_u8SetPinValue+0x84>
 11e:	84 2b       	or	r24, r20
 120:	8c 93       	st	X, r24
 122:	b8 c0       	rjmp	.+368    	; 0x294 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTB:
				SET_BIT(PORTB_reg,Copy_u8Pin);
 124:	a8 e3       	ldi	r26, 0x38	; 56
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	e8 e3       	ldi	r30, 0x38	; 56
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	48 2f       	mov	r20, r24
 130:	8b 81       	ldd	r24, Y+3	; 0x03
 132:	28 2f       	mov	r18, r24
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 2e       	mov	r0, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_u8SetPinValue+0xb0>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_u8SetPinValue+0xac>
 146:	84 2b       	or	r24, r20
 148:	8c 93       	st	X, r24
 14a:	a4 c0       	rjmp	.+328    	; 0x294 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTC:
				SET_BIT(PORTC_reg,Copy_u8Pin);
 14c:	a5 e3       	ldi	r26, 0x35	; 53
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	e5 e3       	ldi	r30, 0x35	; 53
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	48 2f       	mov	r20, r24
 158:	8b 81       	ldd	r24, Y+3	; 0x03
 15a:	28 2f       	mov	r18, r24
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 2e       	mov	r0, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_u8SetPinValue+0xd8>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_u8SetPinValue+0xd4>
 16e:	84 2b       	or	r24, r20
 170:	8c 93       	st	X, r24
 172:	90 c0       	rjmp	.+288    	; 0x294 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTD:
				SET_BIT(PORTD_reg,Copy_u8Pin);
 174:	a2 e3       	ldi	r26, 0x32	; 50
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	e2 e3       	ldi	r30, 0x32	; 50
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	48 2f       	mov	r20, r24
 180:	8b 81       	ldd	r24, Y+3	; 0x03
 182:	28 2f       	mov	r18, r24
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 2e       	mov	r0, r18
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_u8SetPinValue+0x100>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	0a 94       	dec	r0
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_u8SetPinValue+0xfc>
 196:	84 2b       	or	r24, r20
 198:	8c 93       	st	X, r24
 19a:	7c c0       	rjmp	.+248    	; 0x294 <DIO_u8SetPinValue+0x202>
				break;
			
				default:
				Local_u8ErrorState=1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	89 83       	std	Y+1, r24	; 0x01
 1a0:	79 c0       	rjmp	.+242    	; 0x294 <DIO_u8SetPinValue+0x202>
				break;
			}
		}
		else//value is 0 so we clear the bits
		{
			switch(Copy_u8Port)
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	28 2f       	mov	r18, r24
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	3e 83       	std	Y+6, r19	; 0x06
 1aa:	2d 83       	std	Y+5, r18	; 0x05
 1ac:	8d 81       	ldd	r24, Y+5	; 0x05
 1ae:	9e 81       	ldd	r25, Y+6	; 0x06
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	91 05       	cpc	r25, r1
 1b4:	59 f1       	breq	.+86     	; 0x20c <DIO_u8SetPinValue+0x17a>
 1b6:	2d 81       	ldd	r18, Y+5	; 0x05
 1b8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ba:	22 30       	cpi	r18, 0x02	; 2
 1bc:	31 05       	cpc	r19, r1
 1be:	2c f4       	brge	.+10     	; 0x1ca <DIO_u8SetPinValue+0x138>
 1c0:	8d 81       	ldd	r24, Y+5	; 0x05
 1c2:	9e 81       	ldd	r25, Y+6	; 0x06
 1c4:	00 97       	sbiw	r24, 0x00	; 0
 1c6:	69 f0       	breq	.+26     	; 0x1e2 <DIO_u8SetPinValue+0x150>
 1c8:	60 c0       	rjmp	.+192    	; 0x28a <DIO_u8SetPinValue+0x1f8>
 1ca:	2d 81       	ldd	r18, Y+5	; 0x05
 1cc:	3e 81       	ldd	r19, Y+6	; 0x06
 1ce:	22 30       	cpi	r18, 0x02	; 2
 1d0:	31 05       	cpc	r19, r1
 1d2:	89 f1       	breq	.+98     	; 0x236 <DIO_u8SetPinValue+0x1a4>
 1d4:	8d 81       	ldd	r24, Y+5	; 0x05
 1d6:	9e 81       	ldd	r25, Y+6	; 0x06
 1d8:	83 30       	cpi	r24, 0x03	; 3
 1da:	91 05       	cpc	r25, r1
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <DIO_u8SetPinValue+0x14e>
 1de:	40 c0       	rjmp	.+128    	; 0x260 <DIO_u8SetPinValue+0x1ce>
 1e0:	54 c0       	rjmp	.+168    	; 0x28a <DIO_u8SetPinValue+0x1f8>
			{
				case DIO_u8PORTA:
				CLR_BIT(PORTA_reg,Copy_u8Pin);
 1e2:	ab e3       	ldi	r26, 0x3B	; 59
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	eb e3       	ldi	r30, 0x3B	; 59
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	48 2f       	mov	r20, r24
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	28 2f       	mov	r18, r24
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 2e       	mov	r0, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_u8SetPinValue+0x16e>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_u8SetPinValue+0x16a>
 204:	80 95       	com	r24
 206:	84 23       	and	r24, r20
 208:	8c 93       	st	X, r24
 20a:	44 c0       	rjmp	.+136    	; 0x294 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTB:
				CLR_BIT(PORTB_reg,Copy_u8Pin);
 20c:	a8 e3       	ldi	r26, 0x38	; 56
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	e8 e3       	ldi	r30, 0x38	; 56
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	48 2f       	mov	r20, r24
 218:	8b 81       	ldd	r24, Y+3	; 0x03
 21a:	28 2f       	mov	r18, r24
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 2e       	mov	r0, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_u8SetPinValue+0x198>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_u8SetPinValue+0x194>
 22e:	80 95       	com	r24
 230:	84 23       	and	r24, r20
 232:	8c 93       	st	X, r24
 234:	2f c0       	rjmp	.+94     	; 0x294 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTC:
				CLR_BIT(PORTC_reg,Copy_u8Pin);
 236:	a5 e3       	ldi	r26, 0x35	; 53
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	e5 e3       	ldi	r30, 0x35	; 53
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	48 2f       	mov	r20, r24
 242:	8b 81       	ldd	r24, Y+3	; 0x03
 244:	28 2f       	mov	r18, r24
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 2e       	mov	r0, r18
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_u8SetPinValue+0x1c2>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_u8SetPinValue+0x1be>
 258:	80 95       	com	r24
 25a:	84 23       	and	r24, r20
 25c:	8c 93       	st	X, r24
 25e:	1a c0       	rjmp	.+52     	; 0x294 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTD:
				CLR_BIT(PORTD_reg,Copy_u8Pin);
 260:	a2 e3       	ldi	r26, 0x32	; 50
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	e2 e3       	ldi	r30, 0x32	; 50
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	48 2f       	mov	r20, r24
 26c:	8b 81       	ldd	r24, Y+3	; 0x03
 26e:	28 2f       	mov	r18, r24
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 2e       	mov	r0, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_u8SetPinValue+0x1ec>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	0a 94       	dec	r0
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_u8SetPinValue+0x1e8>
 282:	80 95       	com	r24
 284:	84 23       	and	r24, r20
 286:	8c 93       	st	X, r24
 288:	05 c0       	rjmp	.+10     	; 0x294 <DIO_u8SetPinValue+0x202>
				break;
				
				default:
				Local_u8ErrorState=1;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	89 83       	std	Y+1, r24	; 0x01
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_u8SetPinValue+0x202>
			}
		}
	}
	else //incorrect input
	{
		Local_u8ErrorState=1;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	89 83       	std	Y+1, r24	; 0x01
	}	
	return Local_u8ErrorState;
 294:	89 81       	ldd	r24, Y+1	; 0x01
}
 296:	28 96       	adiw	r28, 0x08	; 8
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
 2a2:	cf 91       	pop	r28
 2a4:	df 91       	pop	r29
 2a6:	08 95       	ret

000002a8 <DIO_u8SetPortValue>:
/******************************************************************************/
/***********************Setting port value*************************************/
/******************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port ,u8 Copy_u8Value)
{
 2a8:	df 93       	push	r29
 2aa:	cf 93       	push	r28
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <DIO_u8SetPortValue+0x6>
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <DIO_u8SetPortValue+0x8>
 2b0:	0f 92       	push	r0
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
 2b6:	8a 83       	std	Y+2, r24	; 0x02
 2b8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;//error state initially zero
 2ba:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
 2bc:	8a 81       	ldd	r24, Y+2	; 0x02
 2be:	28 2f       	mov	r18, r24
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	3d 83       	std	Y+5, r19	; 0x05
 2c4:	2c 83       	std	Y+4, r18	; 0x04
 2c6:	8c 81       	ldd	r24, Y+4	; 0x04
 2c8:	9d 81       	ldd	r25, Y+5	; 0x05
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	91 05       	cpc	r25, r1
 2ce:	d1 f0       	breq	.+52     	; 0x304 <DIO_u8SetPortValue+0x5c>
 2d0:	2c 81       	ldd	r18, Y+4	; 0x04
 2d2:	3d 81       	ldd	r19, Y+5	; 0x05
 2d4:	22 30       	cpi	r18, 0x02	; 2
 2d6:	31 05       	cpc	r19, r1
 2d8:	2c f4       	brge	.+10     	; 0x2e4 <DIO_u8SetPortValue+0x3c>
 2da:	8c 81       	ldd	r24, Y+4	; 0x04
 2dc:	9d 81       	ldd	r25, Y+5	; 0x05
 2de:	00 97       	sbiw	r24, 0x00	; 0
 2e0:	61 f0       	breq	.+24     	; 0x2fa <DIO_u8SetPortValue+0x52>
 2e2:	1f c0       	rjmp	.+62     	; 0x322 <DIO_u8SetPortValue+0x7a>
 2e4:	2c 81       	ldd	r18, Y+4	; 0x04
 2e6:	3d 81       	ldd	r19, Y+5	; 0x05
 2e8:	22 30       	cpi	r18, 0x02	; 2
 2ea:	31 05       	cpc	r19, r1
 2ec:	81 f0       	breq	.+32     	; 0x30e <DIO_u8SetPortValue+0x66>
 2ee:	8c 81       	ldd	r24, Y+4	; 0x04
 2f0:	9d 81       	ldd	r25, Y+5	; 0x05
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	91 05       	cpc	r25, r1
 2f6:	81 f0       	breq	.+32     	; 0x318 <DIO_u8SetPortValue+0x70>
 2f8:	14 c0       	rjmp	.+40     	; 0x322 <DIO_u8SetPortValue+0x7a>
		{
			case DIO_u8PORTA:
			PORTA_reg=Copy_u8Value;
 2fa:	eb e3       	ldi	r30, 0x3B	; 59
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	8b 81       	ldd	r24, Y+3	; 0x03
 300:	80 83       	st	Z, r24
 302:	11 c0       	rjmp	.+34     	; 0x326 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTB:
			PORTB_reg=Copy_u8Value;
 304:	e8 e3       	ldi	r30, 0x38	; 56
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	8b 81       	ldd	r24, Y+3	; 0x03
 30a:	80 83       	st	Z, r24
 30c:	0c c0       	rjmp	.+24     	; 0x326 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTC:
			PORTC_reg=Copy_u8Value;
 30e:	e5 e3       	ldi	r30, 0x35	; 53
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	8b 81       	ldd	r24, Y+3	; 0x03
 314:	80 83       	st	Z, r24
 316:	07 c0       	rjmp	.+14     	; 0x326 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTD:
			PORTD_reg=Copy_u8Value;
 318:	e2 e3       	ldi	r30, 0x32	; 50
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	8b 81       	ldd	r24, Y+3	; 0x03
 31e:	80 83       	st	Z, r24
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_u8SetPortValue+0x7e>
			break;
			
			default:
			Local_u8ErrorState=1;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_u8ErrorState;//incorrect input
 326:	89 81       	ldd	r24, Y+1	; 0x01
}
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	cf 91       	pop	r28
 334:	df 91       	pop	r29
 336:	08 95       	ret

00000338 <DIO_u8GetPinValue>:
/******************************************************************************/
/***********************Getting PIN value**************************************/
/******************************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 338:	df 93       	push	r29
 33a:	cf 93       	push	r28
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
 340:	27 97       	sbiw	r28, 0x07	; 7
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	de bf       	out	0x3e, r29	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	cd bf       	out	0x3d, r28	; 61
 34c:	8a 83       	std	Y+2, r24	; 0x02
 34e:	6b 83       	std	Y+3, r22	; 0x03
 350:	5d 83       	std	Y+5, r21	; 0x05
 352:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially zero
 354:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL)&&Copy_u8Pin<=DIO_u8PIN_7)//check if ptr not null and correct input pin
 356:	8c 81       	ldd	r24, Y+4	; 0x04
 358:	9d 81       	ldd	r25, Y+5	; 0x05
 35a:	00 97       	sbiw	r24, 0x00	; 0
 35c:	09 f4       	brne	.+2      	; 0x360 <DIO_u8GetPinValue+0x28>
 35e:	78 c0       	rjmp	.+240    	; 0x450 <DIO_u8GetPinValue+0x118>
 360:	8b 81       	ldd	r24, Y+3	; 0x03
 362:	88 30       	cpi	r24, 0x08	; 8
 364:	08 f0       	brcs	.+2      	; 0x368 <DIO_u8GetPinValue+0x30>
 366:	74 c0       	rjmp	.+232    	; 0x450 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
 368:	8a 81       	ldd	r24, Y+2	; 0x02
 36a:	28 2f       	mov	r18, r24
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	3f 83       	std	Y+7, r19	; 0x07
 370:	2e 83       	std	Y+6, r18	; 0x06
 372:	4e 81       	ldd	r20, Y+6	; 0x06
 374:	5f 81       	ldd	r21, Y+7	; 0x07
 376:	41 30       	cpi	r20, 0x01	; 1
 378:	51 05       	cpc	r21, r1
 37a:	59 f1       	breq	.+86     	; 0x3d2 <DIO_u8GetPinValue+0x9a>
 37c:	8e 81       	ldd	r24, Y+6	; 0x06
 37e:	9f 81       	ldd	r25, Y+7	; 0x07
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	91 05       	cpc	r25, r1
 384:	34 f4       	brge	.+12     	; 0x392 <DIO_u8GetPinValue+0x5a>
 386:	2e 81       	ldd	r18, Y+6	; 0x06
 388:	3f 81       	ldd	r19, Y+7	; 0x07
 38a:	21 15       	cp	r18, r1
 38c:	31 05       	cpc	r19, r1
 38e:	69 f0       	breq	.+26     	; 0x3aa <DIO_u8GetPinValue+0x72>
 390:	5c c0       	rjmp	.+184    	; 0x44a <DIO_u8GetPinValue+0x112>
 392:	4e 81       	ldd	r20, Y+6	; 0x06
 394:	5f 81       	ldd	r21, Y+7	; 0x07
 396:	42 30       	cpi	r20, 0x02	; 2
 398:	51 05       	cpc	r21, r1
 39a:	79 f1       	breq	.+94     	; 0x3fa <DIO_u8GetPinValue+0xc2>
 39c:	8e 81       	ldd	r24, Y+6	; 0x06
 39e:	9f 81       	ldd	r25, Y+7	; 0x07
 3a0:	83 30       	cpi	r24, 0x03	; 3
 3a2:	91 05       	cpc	r25, r1
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <DIO_u8GetPinValue+0x70>
 3a6:	3d c0       	rjmp	.+122    	; 0x422 <DIO_u8GetPinValue+0xea>
 3a8:	50 c0       	rjmp	.+160    	; 0x44a <DIO_u8GetPinValue+0x112>
		{
			case DIO_u8PORTA:
			*Copy_pu8Value=GET_BIT(PINA_reg,Copy_u8Pin);
 3aa:	e9 e3       	ldi	r30, 0x39	; 57
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	28 2f       	mov	r18, r24
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	8b 81       	ldd	r24, Y+3	; 0x03
 3b6:	88 2f       	mov	r24, r24
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	a9 01       	movw	r20, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_u8GetPinValue+0x8a>
 3be:	55 95       	asr	r21
 3c0:	47 95       	ror	r20
 3c2:	8a 95       	dec	r24
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_u8GetPinValue+0x86>
 3c6:	ca 01       	movw	r24, r20
 3c8:	81 70       	andi	r24, 0x01	; 1
 3ca:	ec 81       	ldd	r30, Y+4	; 0x04
 3cc:	fd 81       	ldd	r31, Y+5	; 0x05
 3ce:	80 83       	st	Z, r24
 3d0:	41 c0       	rjmp	.+130    	; 0x454 <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTB:
			*Copy_pu8Value=GET_BIT(PINB_reg,Copy_u8Pin);
 3d2:	e6 e3       	ldi	r30, 0x36	; 54
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	28 2f       	mov	r18, r24
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	8b 81       	ldd	r24, Y+3	; 0x03
 3de:	88 2f       	mov	r24, r24
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	a9 01       	movw	r20, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_u8GetPinValue+0xb2>
 3e6:	55 95       	asr	r21
 3e8:	47 95       	ror	r20
 3ea:	8a 95       	dec	r24
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_u8GetPinValue+0xae>
 3ee:	ca 01       	movw	r24, r20
 3f0:	81 70       	andi	r24, 0x01	; 1
 3f2:	ec 81       	ldd	r30, Y+4	; 0x04
 3f4:	fd 81       	ldd	r31, Y+5	; 0x05
 3f6:	80 83       	st	Z, r24
 3f8:	2d c0       	rjmp	.+90     	; 0x454 <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTC:
			*Copy_pu8Value=GET_BIT(PINC_reg,Copy_u8Pin);
 3fa:	e3 e3       	ldi	r30, 0x33	; 51
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	28 2f       	mov	r18, r24
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	88 2f       	mov	r24, r24
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	a9 01       	movw	r20, r18
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_u8GetPinValue+0xda>
 40e:	55 95       	asr	r21
 410:	47 95       	ror	r20
 412:	8a 95       	dec	r24
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_u8GetPinValue+0xd6>
 416:	ca 01       	movw	r24, r20
 418:	81 70       	andi	r24, 0x01	; 1
 41a:	ec 81       	ldd	r30, Y+4	; 0x04
 41c:	fd 81       	ldd	r31, Y+5	; 0x05
 41e:	80 83       	st	Z, r24
 420:	19 c0       	rjmp	.+50     	; 0x454 <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTD:
			*Copy_pu8Value=GET_BIT(PIND_reg,Copy_u8Pin);
 422:	e0 e3       	ldi	r30, 0x30	; 48
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	28 2f       	mov	r18, r24
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	8b 81       	ldd	r24, Y+3	; 0x03
 42e:	88 2f       	mov	r24, r24
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	a9 01       	movw	r20, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <DIO_u8GetPinValue+0x102>
 436:	55 95       	asr	r21
 438:	47 95       	ror	r20
 43a:	8a 95       	dec	r24
 43c:	e2 f7       	brpl	.-8      	; 0x436 <DIO_u8GetPinValue+0xfe>
 43e:	ca 01       	movw	r24, r20
 440:	81 70       	andi	r24, 0x01	; 1
 442:	ec 81       	ldd	r30, Y+4	; 0x04
 444:	fd 81       	ldd	r31, Y+5	; 0x05
 446:	80 83       	st	Z, r24
 448:	05 c0       	rjmp	.+10     	; 0x454 <DIO_u8GetPinValue+0x11c>
			break;
			
			default:
			Local_u8ErrorState=1;
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	89 83       	std	Y+1, r24	; 0x01
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_u8GetPinValue+0x11c>
			break;
		}
	}
	else
	{
		Local_u8ErrorState=1;
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 454:	89 81       	ldd	r24, Y+1	; 0x01
}
 456:	27 96       	adiw	r28, 0x07	; 7
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	f8 94       	cli
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	0f be       	out	0x3f, r0	; 63
 460:	cd bf       	out	0x3d, r28	; 61
 462:	cf 91       	pop	r28
 464:	df 91       	pop	r29
 466:	08 95       	ret

00000468 <DIO_u8GetPortValue>:
/*not tested*/
u8 DIO_u8GetPortValue(u8 Copy_u8Port ,u8* Copy_pu8Value)//get value of entire port
{
 468:	df 93       	push	r29
 46a:	cf 93       	push	r28
 46c:	00 d0       	rcall	.+0      	; 0x46e <DIO_u8GetPortValue+0x6>
 46e:	00 d0       	rcall	.+0      	; 0x470 <DIO_u8GetPortValue+0x8>
 470:	00 d0       	rcall	.+0      	; 0x472 <DIO_u8GetPortValue+0xa>
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	8a 83       	std	Y+2, r24	; 0x02
 478:	7c 83       	std	Y+4, r23	; 0x04
 47a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 47c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 47e:	8a 81       	ldd	r24, Y+2	; 0x02
 480:	28 2f       	mov	r18, r24
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	3e 83       	std	Y+6, r19	; 0x06
 486:	2d 83       	std	Y+5, r18	; 0x05
 488:	8d 81       	ldd	r24, Y+5	; 0x05
 48a:	9e 81       	ldd	r25, Y+6	; 0x06
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	91 05       	cpc	r25, r1
 490:	e1 f0       	breq	.+56     	; 0x4ca <DIO_u8GetPortValue+0x62>
 492:	2d 81       	ldd	r18, Y+5	; 0x05
 494:	3e 81       	ldd	r19, Y+6	; 0x06
 496:	22 30       	cpi	r18, 0x02	; 2
 498:	31 05       	cpc	r19, r1
 49a:	2c f4       	brge	.+10     	; 0x4a6 <DIO_u8GetPortValue+0x3e>
 49c:	8d 81       	ldd	r24, Y+5	; 0x05
 49e:	9e 81       	ldd	r25, Y+6	; 0x06
 4a0:	00 97       	sbiw	r24, 0x00	; 0
 4a2:	61 f0       	breq	.+24     	; 0x4bc <DIO_u8GetPortValue+0x54>
 4a4:	27 c0       	rjmp	.+78     	; 0x4f4 <DIO_u8GetPortValue+0x8c>
 4a6:	2d 81       	ldd	r18, Y+5	; 0x05
 4a8:	3e 81       	ldd	r19, Y+6	; 0x06
 4aa:	22 30       	cpi	r18, 0x02	; 2
 4ac:	31 05       	cpc	r19, r1
 4ae:	a1 f0       	breq	.+40     	; 0x4d8 <DIO_u8GetPortValue+0x70>
 4b0:	8d 81       	ldd	r24, Y+5	; 0x05
 4b2:	9e 81       	ldd	r25, Y+6	; 0x06
 4b4:	83 30       	cpi	r24, 0x03	; 3
 4b6:	91 05       	cpc	r25, r1
 4b8:	b1 f0       	breq	.+44     	; 0x4e6 <DIO_u8GetPortValue+0x7e>
 4ba:	1c c0       	rjmp	.+56     	; 0x4f4 <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA:
		*Copy_pu8Value=PINA_reg;
 4bc:	e9 e3       	ldi	r30, 0x39	; 57
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	eb 81       	ldd	r30, Y+3	; 0x03
 4c4:	fc 81       	ldd	r31, Y+4	; 0x04
 4c6:	80 83       	st	Z, r24
 4c8:	17 c0       	rjmp	.+46     	; 0x4f8 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTB:
		*Copy_pu8Value=PINB_reg;
 4ca:	e6 e3       	ldi	r30, 0x36	; 54
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	eb 81       	ldd	r30, Y+3	; 0x03
 4d2:	fc 81       	ldd	r31, Y+4	; 0x04
 4d4:	80 83       	st	Z, r24
 4d6:	10 c0       	rjmp	.+32     	; 0x4f8 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTC:
		*Copy_pu8Value=PINC_reg;
 4d8:	e3 e3       	ldi	r30, 0x33	; 51
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	eb 81       	ldd	r30, Y+3	; 0x03
 4e0:	fc 81       	ldd	r31, Y+4	; 0x04
 4e2:	80 83       	st	Z, r24
 4e4:	09 c0       	rjmp	.+18     	; 0x4f8 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTD:
		*Copy_pu8Value=PIND_reg;
 4e6:	e0 e3       	ldi	r30, 0x30	; 48
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	eb 81       	ldd	r30, Y+3	; 0x03
 4ee:	fc 81       	ldd	r31, Y+4	; 0x04
 4f0:	80 83       	st	Z, r24
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_u8GetPortValue+0x90>
		break;
	default:
		Local_u8ErrorState=1;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
}
 4fa:	26 96       	adiw	r28, 0x06	; 6
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	f8 94       	cli
 500:	de bf       	out	0x3e, r29	; 62
 502:	0f be       	out	0x3f, r0	; 63
 504:	cd bf       	out	0x3d, r28	; 61
 506:	cf 91       	pop	r28
 508:	df 91       	pop	r29
 50a:	08 95       	ret

0000050c <GIE_VoidEnable>:
#include "GIE_config.h"
#include "GIE_private.h"


void GIE_VoidEnable (void)
{
 50c:	df 93       	push	r29
 50e:	cf 93       	push	r28
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I_BIT);
 514:	af e5       	ldi	r26, 0x5F	; 95
 516:	b0 e0       	ldi	r27, 0x00	; 0
 518:	ef e5       	ldi	r30, 0x5F	; 95
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	80 81       	ld	r24, Z
 51e:	80 68       	ori	r24, 0x80	; 128
 520:	8c 93       	st	X, r24
}
 522:	cf 91       	pop	r28
 524:	df 91       	pop	r29
 526:	08 95       	ret

00000528 <GIE_VoidDisable>:


void GIE_VoidDisable (void)
{
 528:	df 93       	push	r29
 52a:	cf 93       	push	r28
 52c:	cd b7       	in	r28, 0x3d	; 61
 52e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I_BIT);
 530:	af e5       	ldi	r26, 0x5F	; 95
 532:	b0 e0       	ldi	r27, 0x00	; 0
 534:	ef e5       	ldi	r30, 0x5F	; 95
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	8f 77       	andi	r24, 0x7F	; 127
 53c:	8c 93       	st	X, r24
 53e:	cf 91       	pop	r28
 540:	df 91       	pop	r29
 542:	08 95       	ret

00000544 <PORT_VoidInit>:
#include"PORT_interface.h"
#include"PORT_config.h"
#include"PORT_private.h"
#include"PORT_register.h"
void PORT_VoidInit()
{
 544:	df 93       	push	r29
 546:	cf 93       	push	r28
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
	DDRA_reg=PORTA_DIR;
 54c:	ea e3       	ldi	r30, 0x3A	; 58
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 ef       	ldi	r24, 0xF0	; 240
 552:	80 83       	st	Z, r24
	DDRB_reg=PORTB_DIR;
 554:	e7 e3       	ldi	r30, 0x37	; 55
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	8f ef       	ldi	r24, 0xFF	; 255
 55a:	80 83       	st	Z, r24
	DDRC_reg=PORTC_DIR;
 55c:	e4 e3       	ldi	r30, 0x34	; 52
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	87 e0       	ldi	r24, 0x07	; 7
 562:	80 83       	st	Z, r24
	DDRD_reg=PORTD_DIR;
 564:	e1 e3       	ldi	r30, 0x31	; 49
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	83 ef       	ldi	r24, 0xF3	; 243
 56a:	80 83       	st	Z, r24
	
	PORTA_reg=PORTA_InitValue;
 56c:	eb e3       	ldi	r30, 0x3B	; 59
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	8f ef       	ldi	r24, 0xFF	; 255
 572:	80 83       	st	Z, r24
    PORTB_reg=PORTB_InitValue;
 574:	e8 e3       	ldi	r30, 0x38	; 56
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	87 e0       	ldi	r24, 0x07	; 7
 57a:	80 83       	st	Z, r24
    PORTC_reg=PORTC_InitValue;
 57c:	e5 e3       	ldi	r30, 0x35	; 53
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	10 82       	st	Z, r1
    PORTD_reg=PORTD_InitValue;
 582:	e2 e3       	ldi	r30, 0x32	; 50
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	8c e0       	ldi	r24, 0x0C	; 12
 588:	80 83       	st	Z, r24
}
 58a:	cf 91       	pop	r28
 58c:	df 91       	pop	r29
 58e:	08 95       	ret

00000590 <TIMER0_VoidInitSync>:

void (*Timer0_Notif)(void)=NULL;

u8 Global_u8State=IDLE;
void TIMER0_VoidInitSync()
{
 590:	df 93       	push	r29
 592:	cf 93       	push	r28
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62

	/*Choose mode*/
	#if MODE==CTC_MODE
		/*choose CTC MODE*/
		SET_BIT(TCCR0,TCCR0_WGM01);
 598:	a3 e5       	ldi	r26, 0x53	; 83
 59a:	b0 e0       	ldi	r27, 0x00	; 0
 59c:	e3 e5       	ldi	r30, 0x53	; 83
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	88 60       	ori	r24, 0x08	; 8
 5a4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_WGM00);
 5a6:	a3 e5       	ldi	r26, 0x53	; 83
 5a8:	b0 e0       	ldi	r27, 0x00	; 0
 5aa:	e3 e5       	ldi	r30, 0x53	; 83
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	80 81       	ld	r24, Z
 5b0:	8f 7b       	andi	r24, 0xBF	; 191
 5b2:	8c 93       	st	X, r24

		/*Disable interrupt*/
		CLR_BIT(TIMSK,TIMSK_OCIE0);
 5b4:	a9 e5       	ldi	r26, 0x59	; 89
 5b6:	b0 e0       	ldi	r27, 0x00	; 0
 5b8:	e9 e5       	ldi	r30, 0x59	; 89
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	80 81       	ld	r24, Z
 5be:	8d 7f       	andi	r24, 0xFD	; 253
 5c0:	8c 93       	st	X, r24
	#else
	#error "Error in mode selection"
	#endif

		/*set OC0 Action*/
		TCCR0&=COM_OutputModeBitMask;
 5c2:	a3 e5       	ldi	r26, 0x53	; 83
 5c4:	b0 e0       	ldi	r27, 0x00	; 0
 5c6:	e3 e5       	ldi	r30, 0x53	; 83
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	8f 7c       	andi	r24, 0xCF	; 207
 5ce:	8c 93       	st	X, r24
		TCCR0|=OC0_action;
 5d0:	a3 e5       	ldi	r26, 0x53	; 83
 5d2:	b0 e0       	ldi	r27, 0x00	; 0
 5d4:	e3 e5       	ldi	r30, 0x53	; 83
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	8c 93       	st	X, r24
}
 5dc:	cf 91       	pop	r28
 5de:	df 91       	pop	r29
 5e0:	08 95       	ret

000005e2 <TIMER0_u8WaitSync>:


u8 TIMER0_u8WaitSync(u8 Copy_u8RegisterValue,u32 Copy_u32Counts)
{
 5e2:	df 93       	push	r29
 5e4:	cf 93       	push	r28
 5e6:	cd b7       	in	r28, 0x3d	; 61
 5e8:	de b7       	in	r29, 0x3e	; 62
 5ea:	2f 97       	sbiw	r28, 0x0f	; 15
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	f8 94       	cli
 5f0:	de bf       	out	0x3e, r29	; 62
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	cd bf       	out	0x3d, r28	; 61
 5f6:	8a 87       	std	Y+10, r24	; 0x0a
 5f8:	4b 87       	std	Y+11, r20	; 0x0b
 5fa:	5c 87       	std	Y+12, r21	; 0x0c
 5fc:	6d 87       	std	Y+13, r22	; 0x0d
 5fe:	7e 87       	std	Y+14, r23	; 0x0e
	u8 Local_u8ErrorState=OK;
 600:	19 86       	std	Y+9, r1	; 0x09
	if (Global_u8State==BUSY)
 602:	80 91 60 00 	lds	r24, 0x0060
 606:	88 23       	and	r24, r24
 608:	19 f4       	brne	.+6      	; 0x610 <TIMER0_u8WaitSync+0x2e>
	{
		Local_u8ErrorState=BUSY_FUNC;
 60a:	84 e0       	ldi	r24, 0x04	; 4
 60c:	89 87       	std	Y+9, r24	; 0x09
 60e:	7f c0       	rjmp	.+254    	; 0x70e <TIMER0_u8WaitSync+0x12c>
	}
	else
	{
		/*set state to BUSY to avoid calling the function by interrupts while working in it*/
		Global_u8State=BUSY;
 610:	10 92 60 00 	sts	0x0060, r1

		/*busy waiting (polling) until timer finishes*/
#if MODE==CTC_MODE
		u32 TimeoutCounter=0;
 614:	1d 82       	std	Y+5, r1	; 0x05
 616:	1e 82       	std	Y+6, r1	; 0x06
 618:	1f 82       	std	Y+7, r1	; 0x07
 61a:	18 86       	std	Y+8, r1	; 0x08
		u32 Local_u32Counter=0;
 61c:	19 82       	std	Y+1, r1	; 0x01
 61e:	1a 82       	std	Y+2, r1	; 0x02
 620:	1b 82       	std	Y+3, r1	; 0x03
 622:	1c 82       	std	Y+4, r1	; 0x04

		/*Save output compare value*/
		OCR0=Copy_u8RegisterValue;//the value given is output compare to be compared every tick with TCNT0
 624:	ec e5       	ldi	r30, 0x5C	; 92
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	8a 85       	ldd	r24, Y+10	; 0x0a
 62a:	80 83       	st	Z, r24

		/*set Clock source option to turn on the timer*/
		TCCR0&=CLK_SourceBitMask;
 62c:	a3 e5       	ldi	r26, 0x53	; 83
 62e:	b0 e0       	ldi	r27, 0x00	; 0
 630:	e3 e5       	ldi	r30, 0x53	; 83
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	88 7f       	andi	r24, 0xF8	; 248
 638:	8c 93       	st	X, r24
		TCCR0|=TIMER0_1ClkSource;
 63a:	a3 e5       	ldi	r26, 0x53	; 83
 63c:	b0 e0       	ldi	r27, 0x00	; 0
 63e:	e3 e5       	ldi	r30, 0x53	; 83
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	80 81       	ld	r24, Z
 644:	84 60       	ori	r24, 0x04	; 4
 646:	8c 93       	st	X, r24
		do
		{
			Local_u32Counter++;
 648:	89 81       	ldd	r24, Y+1	; 0x01
 64a:	9a 81       	ldd	r25, Y+2	; 0x02
 64c:	ab 81       	ldd	r26, Y+3	; 0x03
 64e:	bc 81       	ldd	r27, Y+4	; 0x04
 650:	01 96       	adiw	r24, 0x01	; 1
 652:	a1 1d       	adc	r26, r1
 654:	b1 1d       	adc	r27, r1
 656:	89 83       	std	Y+1, r24	; 0x01
 658:	9a 83       	std	Y+2, r25	; 0x02
 65a:	ab 83       	std	Y+3, r26	; 0x03
 65c:	bc 83       	std	Y+4, r27	; 0x04
 65e:	0b c0       	rjmp	.+22     	; 0x676 <TIMER0_u8WaitSync+0x94>
			while((GET_BIT(TIFR,TIFR_OCF0)==0)&&(TimeoutCounter<TIMEOUT_COUNTS))
			{
				TimeoutCounter++;
 660:	8d 81       	ldd	r24, Y+5	; 0x05
 662:	9e 81       	ldd	r25, Y+6	; 0x06
 664:	af 81       	ldd	r26, Y+7	; 0x07
 666:	b8 85       	ldd	r27, Y+8	; 0x08
 668:	01 96       	adiw	r24, 0x01	; 1
 66a:	a1 1d       	adc	r26, r1
 66c:	b1 1d       	adc	r27, r1
 66e:	8d 83       	std	Y+5, r24	; 0x05
 670:	9e 83       	std	Y+6, r25	; 0x06
 672:	af 83       	std	Y+7, r26	; 0x07
 674:	b8 87       	std	Y+8, r27	; 0x08
		TCCR0&=CLK_SourceBitMask;
		TCCR0|=TIMER0_1ClkSource;
		do
		{
			Local_u32Counter++;
			while((GET_BIT(TIFR,TIFR_OCF0)==0)&&(TimeoutCounter<TIMEOUT_COUNTS))
 676:	e8 e5       	ldi	r30, 0x58	; 88
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	80 81       	ld	r24, Z
 67c:	86 95       	lsr	r24
 67e:	88 2f       	mov	r24, r24
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	81 70       	andi	r24, 0x01	; 1
 684:	90 70       	andi	r25, 0x00	; 0
 686:	00 97       	sbiw	r24, 0x00	; 0
 688:	61 f4       	brne	.+24     	; 0x6a2 <TIMER0_u8WaitSync+0xc0>
 68a:	8d 81       	ldd	r24, Y+5	; 0x05
 68c:	9e 81       	ldd	r25, Y+6	; 0x06
 68e:	af 81       	ldd	r26, Y+7	; 0x07
 690:	b8 85       	ldd	r27, Y+8	; 0x08
 692:	80 34       	cpi	r24, 0x40	; 64
 694:	2b e4       	ldi	r18, 0x4B	; 75
 696:	92 07       	cpc	r25, r18
 698:	2c e4       	ldi	r18, 0x4C	; 76
 69a:	a2 07       	cpc	r26, r18
 69c:	20 e0       	ldi	r18, 0x00	; 0
 69e:	b2 07       	cpc	r27, r18
 6a0:	f8 f2       	brcs	.-66     	; 0x660 <TIMER0_u8WaitSync+0x7e>
			{
				TimeoutCounter++;
			}
			/*check for timeout*/
			if(TimeoutCounter==TIMEOUT_COUNTS)
 6a2:	8d 81       	ldd	r24, Y+5	; 0x05
 6a4:	9e 81       	ldd	r25, Y+6	; 0x06
 6a6:	af 81       	ldd	r26, Y+7	; 0x07
 6a8:	b8 85       	ldd	r27, Y+8	; 0x08
 6aa:	80 34       	cpi	r24, 0x40	; 64
 6ac:	2b e4       	ldi	r18, 0x4B	; 75
 6ae:	92 07       	cpc	r25, r18
 6b0:	2c e4       	ldi	r18, 0x4C	; 76
 6b2:	a2 07       	cpc	r26, r18
 6b4:	20 e0       	ldi	r18, 0x00	; 0
 6b6:	b2 07       	cpc	r27, r18
 6b8:	19 f4       	brne	.+6      	; 0x6c0 <TIMER0_u8WaitSync+0xde>
			{
				Local_u8ErrorState=TIMEOUT;
 6ba:	83 e0       	ldi	r24, 0x03	; 3
 6bc:	89 87       	std	Y+9, r24	; 0x09
 6be:	07 c0       	rjmp	.+14     	; 0x6ce <TIMER0_u8WaitSync+0xec>
			}
			else
			{
				/*clear the flag manually*/
				SET_BIT(TIFR,TIFR_OCF0);
 6c0:	a8 e5       	ldi	r26, 0x58	; 88
 6c2:	b0 e0       	ldi	r27, 0x00	; 0
 6c4:	e8 e5       	ldi	r30, 0x58	; 88
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	82 60       	ori	r24, 0x02	; 2
 6cc:	8c 93       	st	X, r24
			}
		}while(Local_u32Counter<Copy_u32Counts);//exit the do while after waiting for the timer to finish
 6ce:	29 81       	ldd	r18, Y+1	; 0x01
 6d0:	3a 81       	ldd	r19, Y+2	; 0x02
 6d2:	4b 81       	ldd	r20, Y+3	; 0x03
 6d4:	5c 81       	ldd	r21, Y+4	; 0x04
 6d6:	8b 85       	ldd	r24, Y+11	; 0x0b
 6d8:	9c 85       	ldd	r25, Y+12	; 0x0c
 6da:	ad 85       	ldd	r26, Y+13	; 0x0d
 6dc:	be 85       	ldd	r27, Y+14	; 0x0e
 6de:	28 17       	cp	r18, r24
 6e0:	39 07       	cpc	r19, r25
 6e2:	4a 07       	cpc	r20, r26
 6e4:	5b 07       	cpc	r21, r27
 6e6:	08 f4       	brcc	.+2      	; 0x6ea <TIMER0_u8WaitSync+0x108>
 6e8:	af cf       	rjmp	.-162    	; 0x648 <TIMER0_u8WaitSync+0x66>
#else
#error "Error in mode selection"
#endif

		/*turn timer off*/
		TCCR0&=CLK_SourceBitMask;
 6ea:	a3 e5       	ldi	r26, 0x53	; 83
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	e3 e5       	ldi	r30, 0x53	; 83
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	88 7f       	andi	r24, 0xF8	; 248
 6f6:	8c 93       	st	X, r24
		TCCR0|=OFF;
 6f8:	a3 e5       	ldi	r26, 0x53	; 83
 6fa:	b0 e0       	ldi	r27, 0x00	; 0
 6fc:	e3 e5       	ldi	r30, 0x53	; 83
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	8c 93       	st	X, r24

		/*reset state to be called again*/
		Global_u8State=IDLE;
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	80 93 60 00 	sts	0x0060, r24
		return Local_u8ErrorState;
 70a:	89 85       	ldd	r24, Y+9	; 0x09
 70c:	8f 87       	std	Y+15, r24	; 0x0f
	}
}
 70e:	8f 85       	ldd	r24, Y+15	; 0x0f
 710:	2f 96       	adiw	r28, 0x0f	; 15
 712:	0f b6       	in	r0, 0x3f	; 63
 714:	f8 94       	cli
 716:	de bf       	out	0x3e, r29	; 62
 718:	0f be       	out	0x3f, r0	; 63
 71a:	cd bf       	out	0x3d, r28	; 61
 71c:	cf 91       	pop	r28
 71e:	df 91       	pop	r29
 720:	08 95       	ret

00000722 <TIMER0_VoidInitAsync>:
/***************************************************************/
void TIMER0_VoidInitAsync(u8 Copy_u8RegisterValue)
{
 722:	df 93       	push	r29
 724:	cf 93       	push	r28
 726:	0f 92       	push	r0
 728:	cd b7       	in	r28, 0x3d	; 61
 72a:	de b7       	in	r29, 0x3e	; 62
 72c:	89 83       	std	Y+1, r24	; 0x01

		/*Choose mode*/
#if MODE==CTC_MODE
		/*choose CTC MODE*/
		SET_BIT(TCCR0,TCCR0_WGM01);
 72e:	a3 e5       	ldi	r26, 0x53	; 83
 730:	b0 e0       	ldi	r27, 0x00	; 0
 732:	e3 e5       	ldi	r30, 0x53	; 83
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	80 81       	ld	r24, Z
 738:	88 60       	ori	r24, 0x08	; 8
 73a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_WGM00);
 73c:	a3 e5       	ldi	r26, 0x53	; 83
 73e:	b0 e0       	ldi	r27, 0x00	; 0
 740:	e3 e5       	ldi	r30, 0x53	; 83
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	8f 7b       	andi	r24, 0xBF	; 191
 748:	8c 93       	st	X, r24

		/*Save output compare value*/
		OCR0=Copy_u8RegisterValue;//the value given is output compare to be compared every tick with TCNT0
 74a:	ec e5       	ldi	r30, 0x5C	; 92
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	89 81       	ldd	r24, Y+1	; 0x01
 750:	80 83       	st	Z, r24

		/*enable interrupt*/
		SET_BIT(TIMSK,TIMSK_OCIE0);
 752:	a9 e5       	ldi	r26, 0x59	; 89
 754:	b0 e0       	ldi	r27, 0x00	; 0
 756:	e9 e5       	ldi	r30, 0x59	; 89
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	80 81       	ld	r24, Z
 75c:	82 60       	ori	r24, 0x02	; 2
 75e:	8c 93       	st	X, r24
#else
#error "Error in mode selection"
#endif

		/*set OC0 Action*/
		TCCR0&=COM_OutputModeBitMask;
 760:	a3 e5       	ldi	r26, 0x53	; 83
 762:	b0 e0       	ldi	r27, 0x00	; 0
 764:	e3 e5       	ldi	r30, 0x53	; 83
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	80 81       	ld	r24, Z
 76a:	8f 7c       	andi	r24, 0xCF	; 207
 76c:	8c 93       	st	X, r24
		TCCR0|=OC0_action;
 76e:	a3 e5       	ldi	r26, 0x53	; 83
 770:	b0 e0       	ldi	r27, 0x00	; 0
 772:	e3 e5       	ldi	r30, 0x53	; 83
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 81       	ld	r24, Z
 778:	8c 93       	st	X, r24

		/*set Clock source option to turn on the timer*/
		TCCR0&=CLK_SourceBitMask;
 77a:	a3 e5       	ldi	r26, 0x53	; 83
 77c:	b0 e0       	ldi	r27, 0x00	; 0
 77e:	e3 e5       	ldi	r30, 0x53	; 83
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	80 81       	ld	r24, Z
 784:	88 7f       	andi	r24, 0xF8	; 248
 786:	8c 93       	st	X, r24
		TCCR0|=TIMER0_1ClkSource;
 788:	a3 e5       	ldi	r26, 0x53	; 83
 78a:	b0 e0       	ldi	r27, 0x00	; 0
 78c:	e3 e5       	ldi	r30, 0x53	; 83
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	84 60       	ori	r24, 0x04	; 4
 794:	8c 93       	st	X, r24


}
 796:	0f 90       	pop	r0
 798:	cf 91       	pop	r28
 79a:	df 91       	pop	r29
 79c:	08 95       	ret

0000079e <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void (*Copy_pvNotif)(void))//used in every mode of operation
{
 79e:	df 93       	push	r29
 7a0:	cf 93       	push	r28
 7a2:	00 d0       	rcall	.+0      	; 0x7a4 <TIMER0_u8SetCallBack+0x6>
 7a4:	0f 92       	push	r0
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	9b 83       	std	Y+3, r25	; 0x03
 7ac:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ErrorState=OK;
 7ae:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvNotif!=NULL)
 7b0:	8a 81       	ldd	r24, Y+2	; 0x02
 7b2:	9b 81       	ldd	r25, Y+3	; 0x03
 7b4:	00 97       	sbiw	r24, 0x00	; 0
 7b6:	39 f0       	breq	.+14     	; 0x7c6 <TIMER0_u8SetCallBack+0x28>
	{
		Timer0_Notif=Copy_pvNotif;
 7b8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ba:	9b 81       	ldd	r25, Y+3	; 0x03
 7bc:	90 93 6d 00 	sts	0x006D, r25
 7c0:	80 93 6c 00 	sts	0x006C, r24
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
 7c6:	82 e0       	ldi	r24, 0x02	; 2
 7c8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 7ca:	89 81       	ldd	r24, Y+1	; 0x01
}
 7cc:	0f 90       	pop	r0
 7ce:	0f 90       	pop	r0
 7d0:	0f 90       	pop	r0
 7d2:	cf 91       	pop	r28
 7d4:	df 91       	pop	r29
 7d6:	08 95       	ret

000007d8 <__vector_10>:
void __vector_10(void) __attribute__((signal));//compare match interrupt
void __vector_10()
{
 7d8:	1f 92       	push	r1
 7da:	0f 92       	push	r0
 7dc:	0f b6       	in	r0, 0x3f	; 63
 7de:	0f 92       	push	r0
 7e0:	11 24       	eor	r1, r1
 7e2:	2f 93       	push	r18
 7e4:	3f 93       	push	r19
 7e6:	4f 93       	push	r20
 7e8:	5f 93       	push	r21
 7ea:	6f 93       	push	r22
 7ec:	7f 93       	push	r23
 7ee:	8f 93       	push	r24
 7f0:	9f 93       	push	r25
 7f2:	af 93       	push	r26
 7f4:	bf 93       	push	r27
 7f6:	ef 93       	push	r30
 7f8:	ff 93       	push	r31
 7fa:	df 93       	push	r29
 7fc:	cf 93       	push	r28
 7fe:	cd b7       	in	r28, 0x3d	; 61
 800:	de b7       	in	r29, 0x3e	; 62

	if(Timer0_Notif!=NULL)
 802:	80 91 6c 00 	lds	r24, 0x006C
 806:	90 91 6d 00 	lds	r25, 0x006D
 80a:	00 97       	sbiw	r24, 0x00	; 0
 80c:	29 f0       	breq	.+10     	; 0x818 <__vector_10+0x40>
	{
		Timer0_Notif();
 80e:	e0 91 6c 00 	lds	r30, 0x006C
 812:	f0 91 6d 00 	lds	r31, 0x006D
 816:	09 95       	icall
	}
}
 818:	cf 91       	pop	r28
 81a:	df 91       	pop	r29
 81c:	ff 91       	pop	r31
 81e:	ef 91       	pop	r30
 820:	bf 91       	pop	r27
 822:	af 91       	pop	r26
 824:	9f 91       	pop	r25
 826:	8f 91       	pop	r24
 828:	7f 91       	pop	r23
 82a:	6f 91       	pop	r22
 82c:	5f 91       	pop	r21
 82e:	4f 91       	pop	r20
 830:	3f 91       	pop	r19
 832:	2f 91       	pop	r18
 834:	0f 90       	pop	r0
 836:	0f be       	out	0x3f, r0	; 63
 838:	0f 90       	pop	r0
 83a:	1f 90       	pop	r1
 83c:	18 95       	reti

0000083e <__vector_11>:
void __vector_11(void) __attribute__((signal));//overflow interrupt
void __vector_11()
{
 83e:	1f 92       	push	r1
 840:	0f 92       	push	r0
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	0f 92       	push	r0
 846:	11 24       	eor	r1, r1
 848:	2f 93       	push	r18
 84a:	3f 93       	push	r19
 84c:	4f 93       	push	r20
 84e:	5f 93       	push	r21
 850:	6f 93       	push	r22
 852:	7f 93       	push	r23
 854:	8f 93       	push	r24
 856:	9f 93       	push	r25
 858:	af 93       	push	r26
 85a:	bf 93       	push	r27
 85c:	ef 93       	push	r30
 85e:	ff 93       	push	r31
 860:	df 93       	push	r29
 862:	cf 93       	push	r28
 864:	cd b7       	in	r28, 0x3d	; 61
 866:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_Notif!=NULL)
 868:	80 91 6c 00 	lds	r24, 0x006C
 86c:	90 91 6d 00 	lds	r25, 0x006D
 870:	00 97       	sbiw	r24, 0x00	; 0
 872:	29 f0       	breq	.+10     	; 0x87e <__stack+0x1f>
	{
		Timer0_Notif();
 874:	e0 91 6c 00 	lds	r30, 0x006C
 878:	f0 91 6d 00 	lds	r31, 0x006D
 87c:	09 95       	icall
	}
}
 87e:	cf 91       	pop	r28
 880:	df 91       	pop	r29
 882:	ff 91       	pop	r31
 884:	ef 91       	pop	r30
 886:	bf 91       	pop	r27
 888:	af 91       	pop	r26
 88a:	9f 91       	pop	r25
 88c:	8f 91       	pop	r24
 88e:	7f 91       	pop	r23
 890:	6f 91       	pop	r22
 892:	5f 91       	pop	r21
 894:	4f 91       	pop	r20
 896:	3f 91       	pop	r19
 898:	2f 91       	pop	r18
 89a:	0f 90       	pop	r0
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	0f 90       	pop	r0
 8a0:	1f 90       	pop	r1
 8a2:	18 95       	reti

000008a4 <TIMER0_SetPreload>:
void TIMER0_SetPreload(u8 Copy_u8Preload)
{
 8a4:	df 93       	push	r29
 8a6:	cf 93       	push	r28
 8a8:	0f 92       	push	r0
 8aa:	cd b7       	in	r28, 0x3d	; 61
 8ac:	de b7       	in	r29, 0x3e	; 62
 8ae:	89 83       	std	Y+1, r24	; 0x01
#if MODE==Normal_MODE
	TCNT0=Copy_u8Preload;
#endif
}
 8b0:	0f 90       	pop	r0
 8b2:	cf 91       	pop	r28
 8b4:	df 91       	pop	r29
 8b6:	08 95       	ret

000008b8 <main>:
u32 Counts_CTC=5;
u32 Counts_Normal=184*10;
u8 compregister=188;
u8 preload=229;
void main()
{
 8b8:	df 93       	push	r29
 8ba:	cf 93       	push	r28
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62
		PORT_VoidInit();
 8c0:	0e 94 a2 02 	call	0x544	; 0x544 <PORT_VoidInit>
		GIE_VoidEnable();//verified Async function
 8c4:	0e 94 86 02 	call	0x50c	; 0x50c <GIE_VoidEnable>
		//TIMER0_VoidInitSync();
		TIMER0_u8SetCallBack(TIMER_NOTIF);
 8c8:	8d e6       	ldi	r24, 0x6D	; 109
 8ca:	94 e0       	ldi	r25, 0x04	; 4
 8cc:	0e 94 cf 03 	call	0x79e	; 0x79e <TIMER0_u8SetCallBack>
TIMER0_VoidInitAsync(compregister);// used to verify CTC
 8d0:	80 91 69 00 	lds	r24, 0x0069
 8d4:	0e 94 91 03 	call	0x722	; 0x722 <TIMER0_VoidInitAsync>
 8d8:	ff cf       	rjmp	.-2      	; 0x8d8 <main+0x20>

000008da <TIMER_NOTIF>:
			{

			}
}
void TIMER_NOTIF()
{
 8da:	df 93       	push	r29
 8dc:	cf 93       	push	r28
 8de:	cd b7       	in	r28, 0x3d	; 61
 8e0:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN_3,1);
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	63 e0       	ldi	r22, 0x03	; 3
 8e6:	41 e0       	ldi	r20, 0x01	; 1
 8e8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinValue>
	static u32 counter=0;
			counter++;
 8ec:	80 91 6e 00 	lds	r24, 0x006E
 8f0:	90 91 6f 00 	lds	r25, 0x006F
 8f4:	a0 91 70 00 	lds	r26, 0x0070
 8f8:	b0 91 71 00 	lds	r27, 0x0071
 8fc:	01 96       	adiw	r24, 0x01	; 1
 8fe:	a1 1d       	adc	r26, r1
 900:	b1 1d       	adc	r27, r1
 902:	80 93 6e 00 	sts	0x006E, r24
 906:	90 93 6f 00 	sts	0x006F, r25
 90a:	a0 93 70 00 	sts	0x0070, r26
 90e:	b0 93 71 00 	sts	0x0071, r27
			if(counter==5)
 912:	80 91 6e 00 	lds	r24, 0x006E
 916:	90 91 6f 00 	lds	r25, 0x006F
 91a:	a0 91 70 00 	lds	r26, 0x0070
 91e:	b0 91 71 00 	lds	r27, 0x0071
 922:	85 30       	cpi	r24, 0x05	; 5
 924:	91 05       	cpc	r25, r1
 926:	a1 05       	cpc	r26, r1
 928:	b1 05       	cpc	r27, r1
 92a:	31 f4       	brne	.+12     	; 0x938 <TIMER_NOTIF+0x5e>
			{
				DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN_0,0);
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	60 e0       	ldi	r22, 0x00	; 0
 930:	40 e0       	ldi	r20, 0x00	; 0
 932:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinValue>
 936:	4a c0       	rjmp	.+148    	; 0x9cc <TIMER_NOTIF+0xf2>
			}
			else if(counter==10)
 938:	80 91 6e 00 	lds	r24, 0x006E
 93c:	90 91 6f 00 	lds	r25, 0x006F
 940:	a0 91 70 00 	lds	r26, 0x0070
 944:	b0 91 71 00 	lds	r27, 0x0071
 948:	8a 30       	cpi	r24, 0x0A	; 10
 94a:	91 05       	cpc	r25, r1
 94c:	a1 05       	cpc	r26, r1
 94e:	b1 05       	cpc	r27, r1
 950:	31 f4       	brne	.+12     	; 0x95e <TIMER_NOTIF+0x84>
			{
				DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN_1,0);
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	61 e0       	ldi	r22, 0x01	; 1
 956:	40 e0       	ldi	r20, 0x00	; 0
 958:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinValue>
 95c:	37 c0       	rjmp	.+110    	; 0x9cc <TIMER_NOTIF+0xf2>
			}
			else if(counter==15)
 95e:	80 91 6e 00 	lds	r24, 0x006E
 962:	90 91 6f 00 	lds	r25, 0x006F
 966:	a0 91 70 00 	lds	r26, 0x0070
 96a:	b0 91 71 00 	lds	r27, 0x0071
 96e:	8f 30       	cpi	r24, 0x0F	; 15
 970:	91 05       	cpc	r25, r1
 972:	a1 05       	cpc	r26, r1
 974:	b1 05       	cpc	r27, r1
 976:	31 f4       	brne	.+12     	; 0x984 <TIMER_NOTIF+0xaa>
			{
				DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN_2,0);
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	62 e0       	ldi	r22, 0x02	; 2
 97c:	40 e0       	ldi	r20, 0x00	; 0
 97e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinValue>
 982:	24 c0       	rjmp	.+72     	; 0x9cc <TIMER_NOTIF+0xf2>
			}
			else if(counter==20)
 984:	80 91 6e 00 	lds	r24, 0x006E
 988:	90 91 6f 00 	lds	r25, 0x006F
 98c:	a0 91 70 00 	lds	r26, 0x0070
 990:	b0 91 71 00 	lds	r27, 0x0071
 994:	84 31       	cpi	r24, 0x14	; 20
 996:	91 05       	cpc	r25, r1
 998:	a1 05       	cpc	r26, r1
 99a:	b1 05       	cpc	r27, r1
 99c:	b9 f4       	brne	.+46     	; 0x9cc <TIMER_NOTIF+0xf2>
			{
				DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN_0,1);
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	60 e0       	ldi	r22, 0x00	; 0
 9a2:	41 e0       	ldi	r20, 0x01	; 1
 9a4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN_1,1);
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	61 e0       	ldi	r22, 0x01	; 1
 9ac:	41 e0       	ldi	r20, 0x01	; 1
 9ae:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN_2,1);
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	62 e0       	ldi	r22, 0x02	; 2
 9b6:	41 e0       	ldi	r20, 0x01	; 1
 9b8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinValue>
				counter=0;
 9bc:	10 92 6e 00 	sts	0x006E, r1
 9c0:	10 92 6f 00 	sts	0x006F, r1
 9c4:	10 92 70 00 	sts	0x0070, r1
 9c8:	10 92 71 00 	sts	0x0071, r1
			}
}
 9cc:	cf 91       	pop	r28
 9ce:	df 91       	pop	r29
 9d0:	08 95       	ret

000009d2 <_exit>:
 9d2:	f8 94       	cli

000009d4 <__stop_program>:
 9d4:	ff cf       	rjmp	.-2      	; 0x9d4 <__stop_program>
