
project19_ADC_LDR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001da6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001da6  00001e3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800068  00800068  00001e42  2**0
                  ALLOC
  3 .stab         000017d0  00000000  00000000  00001e44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c8e  00000000  00000000  00003614  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000042a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000043e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004552  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000619b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007086  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008221  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000089ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 ea       	ldi	r30, 0xA6	; 166
      78:	fd e1       	ldi	r31, 0x1D	; 29
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <main>
      8a:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_VoidInit>:

u8 Global_u8ADCState=IDLE;
static u16* ADC_pu16Reading;
static void(* ADC_pvSetCallBackNotification)(void);
void ADC_VoidInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*refrence selection*/
	#if RefSelection==AREF
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);
	#elif RefSelection==AVCC
	SET_BIT(ADMUX,ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
	#error "Error in reference selection"
	#endif

	/* adjustment*/
	#if Adjustment==Left
	SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
	#else
	#error"Error in left adjustment"
	#endif

	/*Prescaler (BIT MASKING)*/
	ADCSRA&=Prescaler_BIT_MASK;
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 7f       	andi	r24, 0xF8	; 248
     b84:	8c 93       	st	X, r24
	ADCSRA|=PRESCALER_SEL;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 60       	ori	r24, 0x07	; 7
     b92:	8c 93       	st	X, r24

	/*Enable ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <ADC_u8GetChannelReadingSync>:
u8 ADC_u8GetChannelReadingSync(u8 Copy_u8Channel , u16* Copy_pu16ADCReading)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	28 97       	sbiw	r28, 0x08	; 8
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	8e 83       	std	Y+6, r24	; 0x06
     bbe:	78 87       	std	Y+8, r23	; 0x08
     bc0:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState=OK;
     bc2:	1d 82       	std	Y+5, r1	; 0x05
	if(Copy_pu16ADCReading!=NULL)
     bc4:	8f 81       	ldd	r24, Y+7	; 0x07
     bc6:	98 85       	ldd	r25, Y+8	; 0x08
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	09 f4       	brne	.+2      	; 0xbce <ADC_u8GetChannelReadingSync+0x26>
     bcc:	6a c0       	rjmp	.+212    	; 0xca2 <ADC_u8GetChannelReadingSync+0xfa>
	{
		if(Global_u8ADCState==IDLE)
     bce:	80 91 68 00 	lds	r24, 0x0068
     bd2:	88 23       	and	r24, r24
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <ADC_u8GetChannelReadingSync+0x30>
     bd6:	62 c0       	rjmp	.+196    	; 0xc9c <ADC_u8GetChannelReadingSync+0xf4>
		{
			//make ADC state busy
			Global_u8ADCState=BUSY;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	80 93 68 00 	sts	0x0068, r24

			u32 Local_u8LoopCounter=0;
     bde:	19 82       	std	Y+1, r1	; 0x01
     be0:	1a 82       	std	Y+2, r1	; 0x02
     be2:	1b 82       	std	Y+3, r1	; 0x03
     be4:	1c 82       	std	Y+4, r1	; 0x04

			//setting channel
			ADMUX&=MUX_BIT_MASK;
     be6:	a7 e2       	ldi	r26, 0x27	; 39
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e7 e2       	ldi	r30, 0x27	; 39
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	80 7e       	andi	r24, 0xE0	; 224
     bf2:	8c 93       	st	X, r24
			ADMUX|=Copy_u8Channel;
     bf4:	a7 e2       	ldi	r26, 0x27	; 39
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e7 e2       	ldi	r30, 0x27	; 39
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	90 81       	ld	r25, Z
     bfe:	8e 81       	ldd	r24, Y+6	; 0x06
     c00:	89 2b       	or	r24, r25
     c02:	8c 93       	st	X, r24

			//Start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     c04:	a6 e2       	ldi	r26, 0x26	; 38
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e6 e2       	ldi	r30, 0x26	; 38
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 64       	ori	r24, 0x40	; 64
     c10:	8c 93       	st	X, r24
     c12:	0b c0       	rjmp	.+22     	; 0xc2a <ADC_u8GetChannelReadingSync+0x82>

			//polling(busy waiting) until conversion is done
			while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)||(Local_u8LoopCounter<ADC_TIMEOUT))
			{
				Local_u8LoopCounter++;
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	ab 81       	ldd	r26, Y+3	; 0x03
     c1a:	bc 81       	ldd	r27, Y+4	; 0x04
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	a1 1d       	adc	r26, r1
     c20:	b1 1d       	adc	r27, r1
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	9a 83       	std	Y+2, r25	; 0x02
     c26:	ab 83       	std	Y+3, r26	; 0x03
     c28:	bc 83       	std	Y+4, r27	; 0x04

			//Start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);

			//polling(busy waiting) until conversion is done
			while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)||(Local_u8LoopCounter<ADC_TIMEOUT))
     c2a:	e6 e2       	ldi	r30, 0x26	; 38
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	82 95       	swap	r24
     c32:	8f 70       	andi	r24, 0x0F	; 15
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	81 70       	andi	r24, 0x01	; 1
     c3a:	90 70       	andi	r25, 0x00	; 0
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	51 f3       	breq	.-44     	; 0xc14 <ADC_u8GetChannelReadingSync+0x6c>
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	ab 81       	ldd	r26, Y+3	; 0x03
     c46:	bc 81       	ldd	r27, Y+4	; 0x04
     c48:	80 35       	cpi	r24, 0x50	; 80
     c4a:	23 ec       	ldi	r18, 0xC3	; 195
     c4c:	92 07       	cpc	r25, r18
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	a2 07       	cpc	r26, r18
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	b2 07       	cpc	r27, r18
     c56:	f0 f2       	brcs	.-68     	; 0xc14 <ADC_u8GetChannelReadingSync+0x6c>
			{
				Local_u8LoopCounter++;
			}
			if(Local_u8LoopCounter==ADC_TIMEOUT)
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	ab 81       	ldd	r26, Y+3	; 0x03
     c5e:	bc 81       	ldd	r27, Y+4	; 0x04
     c60:	80 35       	cpi	r24, 0x50	; 80
     c62:	23 ec       	ldi	r18, 0xC3	; 195
     c64:	92 07       	cpc	r25, r18
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	a2 07       	cpc	r26, r18
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	b2 07       	cpc	r27, r18
     c6e:	19 f4       	brne	.+6      	; 0xc76 <ADC_u8GetChannelReadingSync+0xce>
			{
				Local_u8ErrorState=TIMEOUT;
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	8d 83       	std	Y+5, r24	; 0x05
     c74:	18 c0       	rjmp	.+48     	; 0xca6 <ADC_u8GetChannelReadingSync+0xfe>
			}
			else
			{
				//make ADC state IDLE
				Global_u8ADCState=IDLE;
     c76:	10 92 68 00 	sts	0x0068, r1

				//clear the flag manually by setting it to 1
				SET_BIT(ADCSRA,ADCSRA_ADIF);
     c7a:	a6 e2       	ldi	r26, 0x26	; 38
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e6 e2       	ldi	r30, 0x26	; 38
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	80 61       	ori	r24, 0x10	; 16
     c86:	8c 93       	st	X, r24

				#if Adjustment==Left//take 8 bits
					*Copy_pu16ADCReading= ADCH;
     c88:	e5 e2       	ldi	r30, 0x25	; 37
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	ef 81       	ldd	r30, Y+7	; 0x07
     c94:	f8 85       	ldd	r31, Y+8	; 0x08
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
     c9a:	05 c0       	rjmp	.+10     	; 0xca6 <ADC_u8GetChannelReadingSync+0xfe>
			}
		}
		else
		{
			/*make error state busy function*/
			Local_u8ErrorState=BUSY_FUNC;
     c9c:	84 e0       	ldi	r24, 0x04	; 4
     c9e:	8d 83       	std	Y+5, r24	; 0x05
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <ADC_u8GetChannelReadingSync+0xfe>
		}
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_u8ErrorState;
     ca6:	8d 81       	ldd	r24, Y+5	; 0x05
}
     ca8:	28 96       	adiw	r28, 0x08	; 8
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <ADC_u8GetChannelReadingAsync>:
u8 ADC_u8GetChannelReadingAsync(u8 Copy_u8Channel , u16* Copy_pu16ADCReading,void(*Copy_pvADCNotification)(void))
{
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <ADC_u8GetChannelReadingAsync+0x6>
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <ADC_u8GetChannelReadingAsync+0x8>
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <ADC_u8GetChannelReadingAsync+0xa>
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	8a 83       	std	Y+2, r24	; 0x02
     cca:	7c 83       	std	Y+4, r23	; 0x04
     ccc:	6b 83       	std	Y+3, r22	; 0x03
     cce:	5e 83       	std	Y+6, r21	; 0x06
     cd0:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
     cd2:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu16ADCReading==NULL)||(Copy_pvADCNotification==NULL))
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	21 f0       	breq	.+8      	; 0xce4 <ADC_u8GetChannelReadingAsync+0x2a>
     cdc:	8d 81       	ldd	r24, Y+5	; 0x05
     cde:	9e 81       	ldd	r25, Y+6	; 0x06
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	19 f4       	brne	.+6      	; 0xcea <ADC_u8GetChannelReadingAsync+0x30>
	{
		Local_u8ErrorState=NULL_POINTER;
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	33 c0       	rjmp	.+102    	; 0xd50 <ADC_u8GetChannelReadingAsync+0x96>
	}
	else
	{
		if(Global_u8ADCState==IDLE)
     cea:	80 91 68 00 	lds	r24, 0x0068
     cee:	88 23       	and	r24, r24
     cf0:	69 f5       	brne	.+90     	; 0xd4c <ADC_u8GetChannelReadingAsync+0x92>
		{
			/*set ADC state to busy*/
			Global_u8ADCState=BUSY;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	80 93 68 00 	sts	0x0068, r24

			/*setting global pointers to the input pointers to be used in the ISR*/
			ADC_pu16Reading=Copy_pu16ADCReading;
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	9c 81       	ldd	r25, Y+4	; 0x04
     cfc:	90 93 6a 00 	sts	0x006A, r25
     d00:	80 93 69 00 	sts	0x0069, r24
			ADC_pvSetCallBackNotification=Copy_pvADCNotification;
     d04:	8d 81       	ldd	r24, Y+5	; 0x05
     d06:	9e 81       	ldd	r25, Y+6	; 0x06
     d08:	90 93 6c 00 	sts	0x006C, r25
     d0c:	80 93 6b 00 	sts	0x006B, r24

			/*setting channel*/
			ADMUX&=MUX_BIT_MASK;
     d10:	a7 e2       	ldi	r26, 0x27	; 39
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e7 e2       	ldi	r30, 0x27	; 39
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 7e       	andi	r24, 0xE0	; 224
     d1c:	8c 93       	st	X, r24
			ADMUX|=Copy_u8Channel;
     d1e:	a7 e2       	ldi	r26, 0x27	; 39
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e7 e2       	ldi	r30, 0x27	; 39
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	90 81       	ld	r25, Z
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	89 2b       	or	r24, r25
     d2c:	8c 93       	st	X, r24

			/*enable interrupt*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d2e:	a6 e2       	ldi	r26, 0x26	; 38
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e6 e2       	ldi	r30, 0x26	; 38
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	88 60       	ori	r24, 0x08	; 8
     d3a:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d3c:	a6 e2       	ldi	r26, 0x26	; 38
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e6 e2       	ldi	r30, 0x26	; 38
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	80 64       	ori	r24, 0x40	; 64
     d48:	8c 93       	st	X, r24
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <ADC_u8GetChannelReadingAsync+0x96>

		}
		else
		{
			Local_u8ErrorState=BUSY_FUNC;
     d4c:	84 e0       	ldi	r24, 0x04	; 4
     d4e:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState;
     d50:	89 81       	ldd	r24, Y+1	; 0x01
}
     d52:	26 96       	adiw	r28, 0x06	; 6
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <__vector_16>:
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     d64:	1f 92       	push	r1
     d66:	0f 92       	push	r0
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	0f 92       	push	r0
     d6c:	11 24       	eor	r1, r1
     d6e:	2f 93       	push	r18
     d70:	3f 93       	push	r19
     d72:	4f 93       	push	r20
     d74:	5f 93       	push	r21
     d76:	6f 93       	push	r22
     d78:	7f 93       	push	r23
     d7a:	8f 93       	push	r24
     d7c:	9f 93       	push	r25
     d7e:	af 93       	push	r26
     d80:	bf 93       	push	r27
     d82:	ef 93       	push	r30
     d84:	ff 93       	push	r31
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
	/*conversion done set adc state to idle*/
	Global_u8ADCState=IDLE;
     d8e:	10 92 68 00 	sts	0x0068, r1

	/*conversion done set the adc reading*/
	#if Adjustment==Left//take 8 bits
		*ADC_pu16Reading= ADCH;
     d92:	a0 91 69 00 	lds	r26, 0x0069
     d96:	b0 91 6a 00 	lds	r27, 0x006A
     d9a:	e5 e2       	ldi	r30, 0x25	; 37
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	88 2f       	mov	r24, r24
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	8d 93       	st	X+, r24
     da6:	9c 93       	st	X, r25
	#else
	#error "Error in adjustment"
	#endif

	/*callback the notification function*/
	ADC_pvSetCallBackNotification();
     da8:	e0 91 6b 00 	lds	r30, 0x006B
     dac:	f0 91 6c 00 	lds	r31, 0x006C
     db0:	09 95       	icall

	/*Disable the interrupt*/
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     db2:	a6 e2       	ldi	r26, 0x26	; 38
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e6 e2       	ldi	r30, 0x26	; 38
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	87 7f       	andi	r24, 0xF7	; 247
     dbe:	8c 93       	st	X, r24
}
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	bf 91       	pop	r27
     dca:	af 91       	pop	r26
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	7f 91       	pop	r23
     dd2:	6f 91       	pop	r22
     dd4:	5f 91       	pop	r21
     dd6:	4f 91       	pop	r20
     dd8:	3f 91       	pop	r19
     dda:	2f 91       	pop	r18
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	0f 90       	pop	r0
     de2:	1f 90       	pop	r1
     de4:	18 95       	reti

00000de6 <CLCD_VoidSendCommand>:
/*Send data counter is number of times that function send data was called .The number
 *specifies the position of the next character to be written on the first row */

/*send command in 4 bit mode operate on 4 bits only when using it send 4 bits ONLY*/
void CLCD_VoidSendCommand(u8 Copy_u8Command)
{
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	2f 97       	sbiw	r28, 0x0f	; 15
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	8f 87       	std	Y+15, r24	; 0x0f
	/**********SET RS to 0 for command*************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8LOW);
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
	
	/**********SET RW to 0 to write****************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8LOW);
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>

	/*4 BIT OPERATION*/
#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE

	/*send the 4 bits received*/
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_0,GET_BIT(Copy_u8Command,0));
     e10:	8f 85       	ldd	r24, Y+15	; 0x0f
     e12:	98 2f       	mov	r25, r24
     e14:	91 70       	andi	r25, 0x01	; 1
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	64 e0       	ldi	r22, 0x04	; 4
     e1a:	49 2f       	mov	r20, r25
     e1c:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_1,GET_BIT(Copy_u8Command,1));
     e20:	8f 85       	ldd	r24, Y+15	; 0x0f
     e22:	86 95       	lsr	r24
     e24:	98 2f       	mov	r25, r24
     e26:	91 70       	andi	r25, 0x01	; 1
     e28:	83 e0       	ldi	r24, 0x03	; 3
     e2a:	65 e0       	ldi	r22, 0x05	; 5
     e2c:	49 2f       	mov	r20, r25
     e2e:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_2,GET_BIT(Copy_u8Command,2));
     e32:	8f 85       	ldd	r24, Y+15	; 0x0f
     e34:	86 95       	lsr	r24
     e36:	86 95       	lsr	r24
     e38:	98 2f       	mov	r25, r24
     e3a:	91 70       	andi	r25, 0x01	; 1
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	66 e0       	ldi	r22, 0x06	; 6
     e40:	49 2f       	mov	r20, r25
     e42:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_3,GET_BIT(Copy_u8Command,3));
     e46:	8f 85       	ldd	r24, Y+15	; 0x0f
     e48:	86 95       	lsr	r24
     e4a:	86 95       	lsr	r24
     e4c:	86 95       	lsr	r24
     e4e:	98 2f       	mov	r25, r24
     e50:	91 70       	andi	r25, 0x01	; 1
     e52:	83 e0       	ldi	r24, 0x03	; 3
     e54:	67 e0       	ldi	r22, 0x07	; 7
     e56:	49 2f       	mov	r20, r25
     e58:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
//	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_2,GET_BIT(Copy_u8Command,2));
//	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_3,GET_BIT(Copy_u8Command,3));
#endif
	
	/**********Send enable pulse********************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8HIGH);//set enable pin to high for the microcontroller on the lcd to read the data sent to it
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	62 e0       	ldi	r22, 0x02	; 2
     e60:	41 e0       	ldi	r20, 0x01	; 1
     e62:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	a0 e0       	ldi	r26, 0x00	; 0
     e6c:	b0 e4       	ldi	r27, 0x40	; 64
     e6e:	8b 87       	std	Y+11, r24	; 0x0b
     e70:	9c 87       	std	Y+12, r25	; 0x0c
     e72:	ad 87       	std	Y+13, r26	; 0x0d
     e74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e76:	6b 85       	ldd	r22, Y+11	; 0x0b
     e78:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e8       	ldi	r19, 0x80	; 128
     e82:	4b e3       	ldi	r20, 0x3B	; 59
     e84:	55 e4       	ldi	r21, 0x45	; 69
     e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	8f 83       	std	Y+7, r24	; 0x07
     e90:	98 87       	std	Y+8, r25	; 0x08
     e92:	a9 87       	std	Y+9, r26	; 0x09
     e94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e96:	6f 81       	ldd	r22, Y+7	; 0x07
     e98:	78 85       	ldd	r23, Y+8	; 0x08
     e9a:	89 85       	ldd	r24, Y+9	; 0x09
     e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e8       	ldi	r20, 0x80	; 128
     ea4:	5f e3       	ldi	r21, 0x3F	; 63
     ea6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eaa:	88 23       	and	r24, r24
     eac:	2c f4       	brge	.+10     	; 0xeb8 <CLCD_VoidSendCommand+0xd2>
		__ticks = 1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	9e 83       	std	Y+6, r25	; 0x06
     eb4:	8d 83       	std	Y+5, r24	; 0x05
     eb6:	3f c0       	rjmp	.+126    	; 0xf36 <CLCD_VoidSendCommand+0x150>
	else if (__tmp > 65535)
     eb8:	6f 81       	ldd	r22, Y+7	; 0x07
     eba:	78 85       	ldd	r23, Y+8	; 0x08
     ebc:	89 85       	ldd	r24, Y+9	; 0x09
     ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	3f ef       	ldi	r19, 0xFF	; 255
     ec4:	4f e7       	ldi	r20, 0x7F	; 127
     ec6:	57 e4       	ldi	r21, 0x47	; 71
     ec8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ecc:	18 16       	cp	r1, r24
     ece:	4c f5       	brge	.+82     	; 0xf22 <CLCD_VoidSendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e2       	ldi	r20, 0x20	; 32
     ede:	51 e4       	ldi	r21, 0x41	; 65
     ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	bc 01       	movw	r22, r24
     eea:	cd 01       	movw	r24, r26
     eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	9e 83       	std	Y+6, r25	; 0x06
     ef6:	8d 83       	std	Y+5, r24	; 0x05
     ef8:	0f c0       	rjmp	.+30     	; 0xf18 <CLCD_VoidSendCommand+0x132>
     efa:	8c e2       	ldi	r24, 0x2C	; 44
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	9c 83       	std	Y+4, r25	; 0x04
     f00:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	9c 81       	ldd	r25, Y+4	; 0x04
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <CLCD_VoidSendCommand+0x120>
     f0a:	9c 83       	std	Y+4, r25	; 0x04
     f0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0e:	8d 81       	ldd	r24, Y+5	; 0x05
     f10:	9e 81       	ldd	r25, Y+6	; 0x06
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	9e 83       	std	Y+6, r25	; 0x06
     f16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
     f1a:	9e 81       	ldd	r25, Y+6	; 0x06
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	69 f7       	brne	.-38     	; 0xefa <CLCD_VoidSendCommand+0x114>
     f20:	14 c0       	rjmp	.+40     	; 0xf4a <CLCD_VoidSendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f22:	6f 81       	ldd	r22, Y+7	; 0x07
     f24:	78 85       	ldd	r23, Y+8	; 0x08
     f26:	89 85       	ldd	r24, Y+9	; 0x09
     f28:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	8d 83       	std	Y+5, r24	; 0x05
     f36:	8d 81       	ldd	r24, Y+5	; 0x05
     f38:	9e 81       	ldd	r25, Y+6	; 0x06
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <CLCD_VoidSendCommand+0x15c>
     f46:	9a 83       	std	Y+2, r25	; 0x02
     f48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);//max delay value specified by the initializations after sending the command
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8LOW);
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	62 e0       	ldi	r22, 0x02	; 2
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
}
     f54:	2f 96       	adiw	r28, 0x0f	; 15
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <CLCD_VoidSendData>:

/*send data can work in 4 bit mode while sending 8 bit data*/
void CLCD_VoidSendData(u8 Copy_u8Data)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	6d 97       	sbiw	r28, 0x1d	; 29
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	8d 8f       	std	Y+29, r24	; 0x1d
	/*check if the function is called 16 times the first row is completely filled then write to the second row*/
	if(Global_u8SendDataCounter==MAX_COLUMNS)
     f7c:	80 91 6d 00 	lds	r24, 0x006D
     f80:	80 31       	cpi	r24, 0x10	; 16
     f82:	21 f4       	brne	.+8      	; 0xf8c <CLCD_VoidSendData+0x26>
	{
		CLCD_VoidGoToXY(1,0);
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <CLCD_VoidGoToXY>
	}
	/**********SET RS to 1 for DATA****************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8HIGH);
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	41 e0       	ldi	r20, 0x01	; 1
     f92:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
	/**********SET RW to 0 to write****************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8LOW);
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	61 e0       	ldi	r22, 0x01	; 1
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_8_BIT_DATA_PORT,Copy_u8Data);

	/*4 BIT OPERATION*/
	#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE
	/*send the 4 MSBs */
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_0,GET_BIT(Copy_u8Data,4));
     fa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa2:	82 95       	swap	r24
     fa4:	8f 70       	andi	r24, 0x0F	; 15
     fa6:	98 2f       	mov	r25, r24
     fa8:	91 70       	andi	r25, 0x01	; 1
     faa:	83 e0       	ldi	r24, 0x03	; 3
     fac:	64 e0       	ldi	r22, 0x04	; 4
     fae:	49 2f       	mov	r20, r25
     fb0:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_1,GET_BIT(Copy_u8Data,5));
     fb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fb6:	82 95       	swap	r24
     fb8:	86 95       	lsr	r24
     fba:	87 70       	andi	r24, 0x07	; 7
     fbc:	98 2f       	mov	r25, r24
     fbe:	91 70       	andi	r25, 0x01	; 1
     fc0:	83 e0       	ldi	r24, 0x03	; 3
     fc2:	65 e0       	ldi	r22, 0x05	; 5
     fc4:	49 2f       	mov	r20, r25
     fc6:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_2,GET_BIT(Copy_u8Data,6));
     fca:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fcc:	82 95       	swap	r24
     fce:	86 95       	lsr	r24
     fd0:	86 95       	lsr	r24
     fd2:	83 70       	andi	r24, 0x03	; 3
     fd4:	98 2f       	mov	r25, r24
     fd6:	91 70       	andi	r25, 0x01	; 1
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	66 e0       	ldi	r22, 0x06	; 6
     fdc:	49 2f       	mov	r20, r25
     fde:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_3,GET_BIT(Copy_u8Data,7));
     fe2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fe4:	98 2f       	mov	r25, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	99 27       	eor	r25, r25
     fea:	99 1f       	adc	r25, r25
     fec:	83 e0       	ldi	r24, 0x03	; 3
     fee:	67 e0       	ldi	r22, 0x07	; 7
     ff0:	49 2f       	mov	r20, r25
     ff2:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
//CHECK*/*****************************************************************************************************************************/
//CHECK	/*send enable pulse*/
/*CHECK*/ DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8HIGH);//set enable pin to high for the microcontroller on the lcd to read the data sent to it
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	62 e0       	ldi	r22, 0x02	; 2
     ffa:	41 e0       	ldi	r20, 0x01	; 1
     ffc:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	a0 e0       	ldi	r26, 0x00	; 0
    1006:	b0 e4       	ldi	r27, 0x40	; 64
    1008:	89 8f       	std	Y+25, r24	; 0x19
    100a:	9a 8f       	std	Y+26, r25	; 0x1a
    100c:	ab 8f       	std	Y+27, r26	; 0x1b
    100e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1010:	69 8d       	ldd	r22, Y+25	; 0x19
    1012:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1014:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1016:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e8       	ldi	r19, 0x80	; 128
    101c:	4b e3       	ldi	r20, 0x3B	; 59
    101e:	55 e4       	ldi	r21, 0x45	; 69
    1020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	8d 8b       	std	Y+21, r24	; 0x15
    102a:	9e 8b       	std	Y+22, r25	; 0x16
    102c:	af 8b       	std	Y+23, r26	; 0x17
    102e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1030:	6d 89       	ldd	r22, Y+21	; 0x15
    1032:	7e 89       	ldd	r23, Y+22	; 0x16
    1034:	8f 89       	ldd	r24, Y+23	; 0x17
    1036:	98 8d       	ldd	r25, Y+24	; 0x18
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e8       	ldi	r20, 0x80	; 128
    103e:	5f e3       	ldi	r21, 0x3F	; 63
    1040:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1044:	88 23       	and	r24, r24
    1046:	2c f4       	brge	.+10     	; 0x1052 <CLCD_VoidSendData+0xec>
		__ticks = 1;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	9c 8b       	std	Y+20, r25	; 0x14
    104e:	8b 8b       	std	Y+19, r24	; 0x13
    1050:	3f c0       	rjmp	.+126    	; 0x10d0 <CLCD_VoidSendData+0x16a>
	else if (__tmp > 65535)
    1052:	6d 89       	ldd	r22, Y+21	; 0x15
    1054:	7e 89       	ldd	r23, Y+22	; 0x16
    1056:	8f 89       	ldd	r24, Y+23	; 0x17
    1058:	98 8d       	ldd	r25, Y+24	; 0x18
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	3f ef       	ldi	r19, 0xFF	; 255
    105e:	4f e7       	ldi	r20, 0x7F	; 127
    1060:	57 e4       	ldi	r21, 0x47	; 71
    1062:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1066:	18 16       	cp	r1, r24
    1068:	4c f5       	brge	.+82     	; 0x10bc <CLCD_VoidSendData+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106a:	69 8d       	ldd	r22, Y+25	; 0x19
    106c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    106e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1070:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 e2       	ldi	r20, 0x20	; 32
    1078:	51 e4       	ldi	r21, 0x41	; 65
    107a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	bc 01       	movw	r22, r24
    1084:	cd 01       	movw	r24, r26
    1086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	9c 8b       	std	Y+20, r25	; 0x14
    1090:	8b 8b       	std	Y+19, r24	; 0x13
    1092:	0f c0       	rjmp	.+30     	; 0x10b2 <CLCD_VoidSendData+0x14c>
    1094:	8c e2       	ldi	r24, 0x2C	; 44
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	9a 8b       	std	Y+18, r25	; 0x12
    109a:	89 8b       	std	Y+17, r24	; 0x11
    109c:	89 89       	ldd	r24, Y+17	; 0x11
    109e:	9a 89       	ldd	r25, Y+18	; 0x12
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <CLCD_VoidSendData+0x13a>
    10a4:	9a 8b       	std	Y+18, r25	; 0x12
    10a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a8:	8b 89       	ldd	r24, Y+19	; 0x13
    10aa:	9c 89       	ldd	r25, Y+20	; 0x14
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	9c 8b       	std	Y+20, r25	; 0x14
    10b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b2:	8b 89       	ldd	r24, Y+19	; 0x13
    10b4:	9c 89       	ldd	r25, Y+20	; 0x14
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	69 f7       	brne	.-38     	; 0x1094 <CLCD_VoidSendData+0x12e>
    10ba:	14 c0       	rjmp	.+40     	; 0x10e4 <CLCD_VoidSendData+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10bc:	6d 89       	ldd	r22, Y+21	; 0x15
    10be:	7e 89       	ldd	r23, Y+22	; 0x16
    10c0:	8f 89       	ldd	r24, Y+23	; 0x17
    10c2:	98 8d       	ldd	r25, Y+24	; 0x18
    10c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	9c 8b       	std	Y+20, r25	; 0x14
    10ce:	8b 8b       	std	Y+19, r24	; 0x13
    10d0:	8b 89       	ldd	r24, Y+19	; 0x13
    10d2:	9c 89       	ldd	r25, Y+20	; 0x14
    10d4:	98 8b       	std	Y+16, r25	; 0x10
    10d6:	8f 87       	std	Y+15, r24	; 0x0f
    10d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10da:	98 89       	ldd	r25, Y+16	; 0x10
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <CLCD_VoidSendData+0x176>
    10e0:	98 8b       	std	Y+16, r25	; 0x10
    10e2:	8f 87       	std	Y+15, r24	; 0x0f
/*CHECK*/		_delay_ms(2);//max delay value specified by the initializations after sending the command
/*CHECK*/	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8LOW);
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	62 e0       	ldi	r22, 0x02	; 2
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
	/*****************************************************************************************************************************/
	/*send the 4 LSBs*/
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_0,GET_BIT(Copy_u8Data,0));
    10ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10f0:	98 2f       	mov	r25, r24
    10f2:	91 70       	andi	r25, 0x01	; 1
    10f4:	83 e0       	ldi	r24, 0x03	; 3
    10f6:	64 e0       	ldi	r22, 0x04	; 4
    10f8:	49 2f       	mov	r20, r25
    10fa:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_1,GET_BIT(Copy_u8Data,1));
    10fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1100:	86 95       	lsr	r24
    1102:	98 2f       	mov	r25, r24
    1104:	91 70       	andi	r25, 0x01	; 1
    1106:	83 e0       	ldi	r24, 0x03	; 3
    1108:	65 e0       	ldi	r22, 0x05	; 5
    110a:	49 2f       	mov	r20, r25
    110c:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_2,GET_BIT(Copy_u8Data,2));
    1110:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1112:	86 95       	lsr	r24
    1114:	86 95       	lsr	r24
    1116:	98 2f       	mov	r25, r24
    1118:	91 70       	andi	r25, 0x01	; 1
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	66 e0       	ldi	r22, 0x06	; 6
    111e:	49 2f       	mov	r20, r25
    1120:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_4_BIT_DATA_PORT,CLCD_4_BIT_DATA_PIN_3,GET_BIT(Copy_u8Data,3));
    1124:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1126:	86 95       	lsr	r24
    1128:	86 95       	lsr	r24
    112a:	86 95       	lsr	r24
    112c:	98 2f       	mov	r25, r24
    112e:	91 70       	andi	r25, 0x01	; 1
    1130:	83 e0       	ldi	r24, 0x03	; 3
    1132:	67 e0       	ldi	r22, 0x07	; 7
    1134:	49 2f       	mov	r20, r25
    1136:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
#endif
	/**********Send enable pulse********************/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8HIGH);//set enable pin to high for the microcontroller on the lcd to read the data sent to it
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	62 e0       	ldi	r22, 0x02	; 2
    113e:	41 e0       	ldi	r20, 0x01	; 1
    1140:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	a0 e0       	ldi	r26, 0x00	; 0
    114a:	b0 e4       	ldi	r27, 0x40	; 64
    114c:	8b 87       	std	Y+11, r24	; 0x0b
    114e:	9c 87       	std	Y+12, r25	; 0x0c
    1150:	ad 87       	std	Y+13, r26	; 0x0d
    1152:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1154:	6b 85       	ldd	r22, Y+11	; 0x0b
    1156:	7c 85       	ldd	r23, Y+12	; 0x0c
    1158:	8d 85       	ldd	r24, Y+13	; 0x0d
    115a:	9e 85       	ldd	r25, Y+14	; 0x0e
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e8       	ldi	r19, 0x80	; 128
    1160:	4b e3       	ldi	r20, 0x3B	; 59
    1162:	55 e4       	ldi	r21, 0x45	; 69
    1164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	8f 83       	std	Y+7, r24	; 0x07
    116e:	98 87       	std	Y+8, r25	; 0x08
    1170:	a9 87       	std	Y+9, r26	; 0x09
    1172:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1174:	6f 81       	ldd	r22, Y+7	; 0x07
    1176:	78 85       	ldd	r23, Y+8	; 0x08
    1178:	89 85       	ldd	r24, Y+9	; 0x09
    117a:	9a 85       	ldd	r25, Y+10	; 0x0a
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e8       	ldi	r20, 0x80	; 128
    1182:	5f e3       	ldi	r21, 0x3F	; 63
    1184:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1188:	88 23       	and	r24, r24
    118a:	2c f4       	brge	.+10     	; 0x1196 <CLCD_VoidSendData+0x230>
		__ticks = 1;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	9e 83       	std	Y+6, r25	; 0x06
    1192:	8d 83       	std	Y+5, r24	; 0x05
    1194:	3f c0       	rjmp	.+126    	; 0x1214 <CLCD_VoidSendData+0x2ae>
	else if (__tmp > 65535)
    1196:	6f 81       	ldd	r22, Y+7	; 0x07
    1198:	78 85       	ldd	r23, Y+8	; 0x08
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	9a 85       	ldd	r25, Y+10	; 0x0a
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	3f ef       	ldi	r19, 0xFF	; 255
    11a2:	4f e7       	ldi	r20, 0x7F	; 127
    11a4:	57 e4       	ldi	r21, 0x47	; 71
    11a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11aa:	18 16       	cp	r1, r24
    11ac:	4c f5       	brge	.+82     	; 0x1200 <CLCD_VoidSendData+0x29a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e2       	ldi	r20, 0x20	; 32
    11bc:	51 e4       	ldi	r21, 0x41	; 65
    11be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	bc 01       	movw	r22, r24
    11c8:	cd 01       	movw	r24, r26
    11ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 83       	std	Y+5, r24	; 0x05
    11d6:	0f c0       	rjmp	.+30     	; 0x11f6 <CLCD_VoidSendData+0x290>
    11d8:	8c e2       	ldi	r24, 0x2C	; 44
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	9c 83       	std	Y+4, r25	; 0x04
    11de:	8b 83       	std	Y+3, r24	; 0x03
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <CLCD_VoidSendData+0x27e>
    11e8:	9c 83       	std	Y+4, r25	; 0x04
    11ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	9e 81       	ldd	r25, Y+6	; 0x06
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	9e 83       	std	Y+6, r25	; 0x06
    11f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f6:	8d 81       	ldd	r24, Y+5	; 0x05
    11f8:	9e 81       	ldd	r25, Y+6	; 0x06
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	69 f7       	brne	.-38     	; 0x11d8 <CLCD_VoidSendData+0x272>
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <CLCD_VoidSendData+0x2c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1200:	6f 81       	ldd	r22, Y+7	; 0x07
    1202:	78 85       	ldd	r23, Y+8	; 0x08
    1204:	89 85       	ldd	r24, Y+9	; 0x09
    1206:	9a 85       	ldd	r25, Y+10	; 0x0a
    1208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	9e 83       	std	Y+6, r25	; 0x06
    1212:	8d 83       	std	Y+5, r24	; 0x05
    1214:	8d 81       	ldd	r24, Y+5	; 0x05
    1216:	9e 81       	ldd	r25, Y+6	; 0x06
    1218:	9a 83       	std	Y+2, r25	; 0x02
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	9a 81       	ldd	r25, Y+2	; 0x02
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	f1 f7       	brne	.-4      	; 0x1220 <CLCD_VoidSendData+0x2ba>
    1224:	9a 83       	std	Y+2, r25	; 0x02
    1226:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);//delay value specified by the datasheet
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8LOW);
    1228:	82 e0       	ldi	r24, 0x02	; 2
    122a:	62 e0       	ldi	r22, 0x02	; 2
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	0e 94 21 0b 	call	0x1642	; 0x1642 <DIO_u8SetPinValue>

	/*increment the static variable so if it reaches 15*/
		Global_u8SendDataCounter++;
    1232:	80 91 6d 00 	lds	r24, 0x006D
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	80 93 6d 00 	sts	0x006D, r24
}
    123c:	6d 96       	adiw	r28, 0x1d	; 29
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <CLCD_VoidInit>:
void CLCD_VoidInit(void)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	2e 97       	sbiw	r28, 0x0e	; 14
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	a0 ef       	ldi	r26, 0xF0	; 240
    1268:	b1 e4       	ldi	r27, 0x41	; 65
    126a:	8b 87       	std	Y+11, r24	; 0x0b
    126c:	9c 87       	std	Y+12, r25	; 0x0c
    126e:	ad 87       	std	Y+13, r26	; 0x0d
    1270:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1272:	6b 85       	ldd	r22, Y+11	; 0x0b
    1274:	7c 85       	ldd	r23, Y+12	; 0x0c
    1276:	8d 85       	ldd	r24, Y+13	; 0x0d
    1278:	9e 85       	ldd	r25, Y+14	; 0x0e
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e8       	ldi	r19, 0x80	; 128
    127e:	4b e3       	ldi	r20, 0x3B	; 59
    1280:	55 e4       	ldi	r21, 0x45	; 69
    1282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	8f 83       	std	Y+7, r24	; 0x07
    128c:	98 87       	std	Y+8, r25	; 0x08
    128e:	a9 87       	std	Y+9, r26	; 0x09
    1290:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1292:	6f 81       	ldd	r22, Y+7	; 0x07
    1294:	78 85       	ldd	r23, Y+8	; 0x08
    1296:	89 85       	ldd	r24, Y+9	; 0x09
    1298:	9a 85       	ldd	r25, Y+10	; 0x0a
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	40 e8       	ldi	r20, 0x80	; 128
    12a0:	5f e3       	ldi	r21, 0x3F	; 63
    12a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12a6:	88 23       	and	r24, r24
    12a8:	2c f4       	brge	.+10     	; 0x12b4 <CLCD_VoidInit+0x66>
		__ticks = 1;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9e 83       	std	Y+6, r25	; 0x06
    12b0:	8d 83       	std	Y+5, r24	; 0x05
    12b2:	3f c0       	rjmp	.+126    	; 0x1332 <CLCD_VoidInit+0xe4>
	else if (__tmp > 65535)
    12b4:	6f 81       	ldd	r22, Y+7	; 0x07
    12b6:	78 85       	ldd	r23, Y+8	; 0x08
    12b8:	89 85       	ldd	r24, Y+9	; 0x09
    12ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	3f ef       	ldi	r19, 0xFF	; 255
    12c0:	4f e7       	ldi	r20, 0x7F	; 127
    12c2:	57 e4       	ldi	r21, 0x47	; 71
    12c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12c8:	18 16       	cp	r1, r24
    12ca:	4c f5       	brge	.+82     	; 0x131e <CLCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e2       	ldi	r20, 0x20	; 32
    12da:	51 e4       	ldi	r21, 0x41	; 65
    12dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	bc 01       	movw	r22, r24
    12e6:	cd 01       	movw	r24, r26
    12e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	9e 83       	std	Y+6, r25	; 0x06
    12f2:	8d 83       	std	Y+5, r24	; 0x05
    12f4:	0f c0       	rjmp	.+30     	; 0x1314 <CLCD_VoidInit+0xc6>
    12f6:	8c e2       	ldi	r24, 0x2C	; 44
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	9c 83       	std	Y+4, r25	; 0x04
    12fc:	8b 83       	std	Y+3, r24	; 0x03
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	f1 f7       	brne	.-4      	; 0x1302 <CLCD_VoidInit+0xb4>
    1306:	9c 83       	std	Y+4, r25	; 0x04
    1308:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	9e 83       	std	Y+6, r25	; 0x06
    1312:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
    1316:	9e 81       	ldd	r25, Y+6	; 0x06
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	69 f7       	brne	.-38     	; 0x12f6 <CLCD_VoidInit+0xa8>
    131c:	14 c0       	rjmp	.+40     	; 0x1346 <CLCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131e:	6f 81       	ldd	r22, Y+7	; 0x07
    1320:	78 85       	ldd	r23, Y+8	; 0x08
    1322:	89 85       	ldd	r24, Y+9	; 0x09
    1324:	9a 85       	ldd	r25, Y+10	; 0x0a
    1326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	9e 83       	std	Y+6, r25	; 0x06
    1330:	8d 83       	std	Y+5, r24	; 0x05
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	9a 83       	std	Y+2, r25	; 0x02
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	9a 81       	ldd	r25, Y+2	; 0x02
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <CLCD_VoidInit+0xf0>
    1342:	9a 83       	std	Y+2, r25	; 0x02
    1344:	89 83       	std	Y+1, r24	; 0x01
#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE
	/*function set : set the DATA port to specified value from datasheet */
	/*N:number of lines used in the LCD '0' for 1 line and '1' for 2 lines*/
	/*F:charachter size either 5x8 or 5x11 '0' for 5x8 and '1' for 5x11*/
	/*note that character is displayed in either 5x10 or 5x7 the extra row is for the cursor*/
	CLCD_VoidSendCommand(0b0010);//use 5x8 and 2 lines
    1346:	82 e0       	ldi	r24, 0x02	; 2
    1348:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_VoidSendCommand>
	CLCD_VoidSendCommand(0b0010);
    134c:	82 e0       	ldi	r24, 0x02	; 2
    134e:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_VoidSendCommand>
	CLCD_VoidSendCommand(0b1000);
    1352:	88 e0       	ldi	r24, 0x08	; 8
    1354:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_VoidSendCommand>

	/*Display ON/OFF control:control whether to turn on or off the display*/
	/*D:display on or off to save power '0' for off '1' for on*/
	/*C:cursor on or off '0' for off '1' for on*/
	/*B:cursor blinks or not '0' for nonblinking '1' for blinking*/
	CLCD_VoidSendCommand(0b0000);
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_VoidSendCommand>
	CLCD_VoidSendCommand(0b1100);
    135e:	8c e0       	ldi	r24, 0x0C	; 12
    1360:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_VoidSendCommand>
	
	/*clear display*/
	CLCD_VoidSendCommand(0b0000);
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_VoidSendCommand>
	CLCD_VoidSendCommand(0b0001);
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_VoidSendCommand>
#endif
	
}
    1370:	2e 96       	adiw	r28, 0x0e	; 14
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <CLCD_VoidSendString>:
void CLCD_VoidSendString(const char * CLCD_pcString)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	00 d0       	rcall	.+0      	; 0x1388 <CLCD_VoidSendString+0x6>
    1388:	0f 92       	push	r0
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	9b 83       	std	Y+3, r25	; 0x03
    1390:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 i=0;*(CLCD_pcString+i)!='\0';i++)
    1392:	19 82       	std	Y+1, r1	; 0x01
    1394:	0e c0       	rjmp	.+28     	; 0x13b2 <CLCD_VoidSendString+0x30>
	{
		CLCD_VoidSendData(CLCD_pcString[i]);
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	9b 81       	ldd	r25, Y+3	; 0x03
    13a0:	fc 01       	movw	r30, r24
    13a2:	e2 0f       	add	r30, r18
    13a4:	f3 1f       	adc	r31, r19
    13a6:	80 81       	ld	r24, Z
    13a8:	0e 94 b3 07 	call	0xf66	; 0xf66 <CLCD_VoidSendData>
	
}
void CLCD_VoidSendString(const char * CLCD_pcString)
{

	for(u8 i=0;*(CLCD_pcString+i)!='\0';i++)
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	8f 5f       	subi	r24, 0xFF	; 255
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	9b 81       	ldd	r25, Y+3	; 0x03
    13bc:	fc 01       	movw	r30, r24
    13be:	e2 0f       	add	r30, r18
    13c0:	f3 1f       	adc	r31, r19
    13c2:	80 81       	ld	r24, Z
    13c4:	88 23       	and	r24, r24
    13c6:	39 f7       	brne	.-50     	; 0x1396 <CLCD_VoidSendString+0x14>
	{
		CLCD_VoidSendData(CLCD_pcString[i]);
	}
}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <CLCD_VoidGoToXY>:
void CLCD_VoidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	00 d0       	rcall	.+0      	; 0x13da <CLCD_VoidGoToXY+0x6>
    13da:	0f 92       	push	r0
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	8a 83       	std	Y+2, r24	; 0x02
    13e2:	6b 83       	std	Y+3, r22	; 0x03
	/* we have DDRAM(display data ram used to store values which are shown on the LCD) 2 rows with visible window of 16 columns */
	/*it starts from address 0 till address 40 on the first row the second row starts from address 0x40*/
	/*we notice that if row =0 address = Y and if X=1 Address = 0x40+Y*/
	u8 Local_u8Address;
	/*location in first line*/
	if(Copy_u8XPos==0)
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	88 23       	and	r24, r24
    13e8:	19 f4       	brne	.+6      	; 0x13f0 <CLCD_VoidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	06 c0       	rjmp	.+12     	; 0x13fc <CLCD_VoidGoToXY+0x28>
	}
	/*location 2nd line*/
	else if(Copy_u8XPos==1)
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	19 f4       	brne	.+6      	; 0x13fc <CLCD_VoidGoToXY+0x28>
	{
		Local_u8Address=Copy_u8YPos+0x40;
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	80 5c       	subi	r24, 0xC0	; 192
    13fa:	89 83       	std	Y+1, r24	; 0x01
#if CLCD_WORKING_MODE==PRE_EIGHT_BIT_MODE
	CLCD_VoidSendCommand(Local_u8Address|1<<7);

#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE
	/*send the 4 MSBs. Make the MSBs to make them LSBs as function copies the 4 LSBs*/
	CLCD_VoidSendCommand((Local_u8Address|1<<7)>>4);
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	80 68       	ori	r24, 0x80	; 128
    1400:	82 95       	swap	r24
    1402:	8f 70       	andi	r24, 0x0F	; 15
    1404:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_VoidSendCommand>
	/*send the 4 LSBs we don't care about the value of the 4MSBs as function only operates on the LSBs so we dont need to set MSBs to 0*/
	/*we don't need to set the 6th bit to high as we are sending the LSBs and we don't care about the MSBs*/
	CLCD_VoidSendCommand(Local_u8Address);
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_VoidSendCommand>
#endif
}
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <CLCD_VoidWriteSpecialChar>:
void CLCD_VoidWriteSpecialChar(const u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	27 97       	sbiw	r28, 0x07	; 7
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	9c 83       	std	Y+4, r25	; 0x04
    1430:	8b 83       	std	Y+3, r24	; 0x03
    1432:	6d 83       	std	Y+5, r22	; 0x05
    1434:	4e 83       	std	Y+6, r20	; 0x06
    1436:	2f 83       	std	Y+7, r18	; 0x07
	//_delay_ms(1);
	//DIO_u8GetPortValue(CLCD_8_BIT_DATA_PORT,& Local_u8DDRamAddress);
	/*restore the data port*/
	//DIO_u8SetPortDirection(CLCD_8_BIT_DATA_PORT,DIO_u8OUTPUT);
	/*get CGram address from block number*/
	u8 Local_u8CGRamAddress=Copy_u8PatternNumber*8;
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	88 2f       	mov	r24, r24
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	8a 83       	std	Y+2, r24	; 0x02
	/*send command to specify address in CGRAM to write to*/
#if CLCD_WORKING_MODE==PRE_EIGHT_BIT_MODE
	CLCD_VoidSendCommand(Local_u8CGRamAddress|1<<6);
#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE
	/*send the 4 MSBs. Make the MSBs to make them LSBs as function copies the 4 LSBs*/
		CLCD_VoidSendCommand((Local_u8CGRamAddress|1<<6)>>4);
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	80 64       	ori	r24, 0x40	; 64
    1450:	82 95       	swap	r24
    1452:	8f 70       	andi	r24, 0x0F	; 15
    1454:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_VoidSendCommand>
		/*send the 4 LSBs we don't care about the value of the 4MSBs as function only operates on the LSBs so we dont need to set MSBs to 0*/
		/*we don't need to set the 6th bit to high as we are sending the LSBs and we don't care about the MSBs*/
		CLCD_VoidSendCommand(Local_u8CGRamAddress);
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_VoidSendCommand>
#endif
	for(u8 i=0;i<8;i++)
    145e:	19 82       	std	Y+1, r1	; 0x01
    1460:	0e c0       	rjmp	.+28     	; 0x147e <CLCD_VoidWriteSpecialChar+0x64>
	{
		/*send special char to CGRAM (Address counter pointer increments automatically)*/
		CLCD_VoidSendData(Copy_pu8Pattern[i]);
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	fc 01       	movw	r30, r24
    146e:	e2 0f       	add	r30, r18
    1470:	f3 1f       	adc	r31, r19
    1472:	80 81       	ld	r24, Z
    1474:	0e 94 b3 07 	call	0xf66	; 0xf66 <CLCD_VoidSendData>
		CLCD_VoidSendCommand((Local_u8CGRamAddress|1<<6)>>4);
		/*send the 4 LSBs we don't care about the value of the 4MSBs as function only operates on the LSBs so we dont need to set MSBs to 0*/
		/*we don't need to set the 6th bit to high as we are sending the LSBs and we don't care about the MSBs*/
		CLCD_VoidSendCommand(Local_u8CGRamAddress);
#endif
	for(u8 i=0;i<8;i++)
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	8f 5f       	subi	r24, 0xFF	; 255
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	88 30       	cpi	r24, 0x08	; 8
    1482:	78 f3       	brcs	.-34     	; 0x1462 <CLCD_VoidWriteSpecialChar+0x48>
	/*restore address counter to the saved value from the DDRAM */
	/*during storing operation we saved Address counter into 7 bits of the DDRAM address and the busy flag is in the 8th bit */
	/*we don't need to discard the 8th bit as it will be ORed with 1 in next step*/
	//CLCD_VoidSendCommand((Local_u8DDRamAddress)|1<<7);
	/*to display char in CGram send data using block number as input*/
	CLCD_VoidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1484:	8e 81       	ldd	r24, Y+6	; 0x06
    1486:	6f 81       	ldd	r22, Y+7	; 0x07
    1488:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <CLCD_VoidGoToXY>
	CLCD_VoidSendData(Copy_u8PatternNumber);
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	0e 94 b3 07 	call	0xf66	; 0xf66 <CLCD_VoidSendData>

	/*configuring the global send data counter to make sure to write to second row after finishing first row*/
	/*Send data counter is number of times that function send data was called the number specifies the position of the next character to be written on the first row */
	if(Copy_u8XPos==0)//write special char in first row
    1492:	8e 81       	ldd	r24, Y+6	; 0x06
    1494:	88 23       	and	r24, r24
    1496:	21 f4       	brne	.+8      	; 0x14a0 <CLCD_VoidWriteSpecialChar+0x86>
	{

		Global_u8SendDataCounter=Copy_u8YPos+1;
    1498:	8f 81       	ldd	r24, Y+7	; 0x07
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	80 93 6d 00 	sts	0x006D, r24
	}
}
    14a0:	27 96       	adiw	r28, 0x07	; 7
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <u32POWER>:
u32 u32POWER(u32 Copy_u8Num, u8 Copy_u8pow)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	2d 97       	sbiw	r28, 0x0d	; 13
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	6d 83       	std	Y+5, r22	; 0x05
    14c8:	7e 83       	std	Y+6, r23	; 0x06
    14ca:	8f 83       	std	Y+7, r24	; 0x07
    14cc:	98 87       	std	Y+8, r25	; 0x08
    14ce:	49 87       	std	Y+9, r20	; 0x09
	if(Copy_u8pow==0)
    14d0:	89 85       	ldd	r24, Y+9	; 0x09
    14d2:	88 23       	and	r24, r24
    14d4:	49 f4       	brne	.+18     	; 0x14e8 <u32POWER+0x36>
		return 1;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	a0 e0       	ldi	r26, 0x00	; 0
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	8a 87       	std	Y+10, r24	; 0x0a
    14e0:	9b 87       	std	Y+11, r25	; 0x0b
    14e2:	ac 87       	std	Y+12, r26	; 0x0c
    14e4:	bd 87       	std	Y+13, r27	; 0x0d
    14e6:	29 c0       	rjmp	.+82     	; 0x153a <u32POWER+0x88>
	else
		{
		u32 Local_u32Result=Copy_u8Num;
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	af 81       	ldd	r26, Y+7	; 0x07
    14ee:	b8 85       	ldd	r27, Y+8	; 0x08
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	ab 83       	std	Y+3, r26	; 0x03
    14f6:	bc 83       	std	Y+4, r27	; 0x04
    14f8:	15 c0       	rjmp	.+42     	; 0x1524 <u32POWER+0x72>
		for(;Copy_u8pow>1;Copy_u8pow--)
		{
			Local_u32Result=Local_u32Result*Copy_u8Num;
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1500:	bc 81       	ldd	r27, Y+4	; 0x04
    1502:	2d 81       	ldd	r18, Y+5	; 0x05
    1504:	3e 81       	ldd	r19, Y+6	; 0x06
    1506:	4f 81       	ldd	r20, Y+7	; 0x07
    1508:	58 85       	ldd	r21, Y+8	; 0x08
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__mulsi3>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	ab 83       	std	Y+3, r26	; 0x03
    151c:	bc 83       	std	Y+4, r27	; 0x04
	if(Copy_u8pow==0)
		return 1;
	else
		{
		u32 Local_u32Result=Copy_u8Num;
		for(;Copy_u8pow>1;Copy_u8pow--)
    151e:	89 85       	ldd	r24, Y+9	; 0x09
    1520:	81 50       	subi	r24, 0x01	; 1
    1522:	89 87       	std	Y+9, r24	; 0x09
    1524:	89 85       	ldd	r24, Y+9	; 0x09
    1526:	82 30       	cpi	r24, 0x02	; 2
    1528:	40 f7       	brcc	.-48     	; 0x14fa <u32POWER+0x48>
		{
			Local_u32Result=Local_u32Result*Copy_u8Num;
		}
		return Local_u32Result;
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	9a 81       	ldd	r25, Y+2	; 0x02
    152e:	ab 81       	ldd	r26, Y+3	; 0x03
    1530:	bc 81       	ldd	r27, Y+4	; 0x04
    1532:	8a 87       	std	Y+10, r24	; 0x0a
    1534:	9b 87       	std	Y+11, r25	; 0x0b
    1536:	ac 87       	std	Y+12, r26	; 0x0c
    1538:	bd 87       	std	Y+13, r27	; 0x0d
    153a:	8a 85       	ldd	r24, Y+10	; 0x0a
    153c:	9b 85       	ldd	r25, Y+11	; 0x0b
    153e:	ac 85       	ldd	r26, Y+12	; 0x0c
    1540:	bd 85       	ldd	r27, Y+13	; 0x0d
	}
}
    1542:	bc 01       	movw	r22, r24
    1544:	cd 01       	movw	r24, r26
    1546:	2d 96       	adiw	r28, 0x0d	; 13
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <CLCD_VoidShowNum>:
void CLCD_VoidShowNum(u32 Copy_u32Num)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	29 97       	sbiw	r28, 0x09	; 9
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	6e 83       	std	Y+6, r22	; 0x06
    156e:	7f 83       	std	Y+7, r23	; 0x07
    1570:	88 87       	std	Y+8, r24	; 0x08
    1572:	99 87       	std	Y+9, r25	; 0x09
	u8 Local_u8DigitCount=1;//at least one digit is given
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32Temp=Copy_u32Num;
    1578:	8e 81       	ldd	r24, Y+6	; 0x06
    157a:	9f 81       	ldd	r25, Y+7	; 0x07
    157c:	a8 85       	ldd	r26, Y+8	; 0x08
    157e:	b9 85       	ldd	r27, Y+9	; 0x09
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	9a 83       	std	Y+2, r25	; 0x02
    1584:	ab 83       	std	Y+3, r26	; 0x03
    1586:	bc 83       	std	Y+4, r27	; 0x04
    1588:	03 c0       	rjmp	.+6      	; 0x1590 <CLCD_VoidShowNum+0x38>
	while((Local_u32Temp/=10)!=0)
	{
		Local_u8DigitCount++;
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	8d 83       	std	Y+5, r24	; 0x05
}
void CLCD_VoidShowNum(u32 Copy_u32Num)
{
	u8 Local_u8DigitCount=1;//at least one digit is given
	u32 Local_u32Temp=Copy_u32Num;
	while((Local_u32Temp/=10)!=0)
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	9a 81       	ldd	r25, Y+2	; 0x02
    1594:	ab 81       	ldd	r26, Y+3	; 0x03
    1596:	bc 81       	ldd	r27, Y+4	; 0x04
    1598:	2a e0       	ldi	r18, 0x0A	; 10
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	50 e0       	ldi	r21, 0x00	; 0
    15a0:	bc 01       	movw	r22, r24
    15a2:	cd 01       	movw	r24, r26
    15a4:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__udivmodsi4>
    15a8:	da 01       	movw	r26, r20
    15aa:	c9 01       	movw	r24, r18
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	ab 83       	std	Y+3, r26	; 0x03
    15b2:	bc 83       	std	Y+4, r27	; 0x04
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	9a 81       	ldd	r25, Y+2	; 0x02
    15b8:	ab 81       	ldd	r26, Y+3	; 0x03
    15ba:	bc 81       	ldd	r27, Y+4	; 0x04
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	a1 05       	cpc	r26, r1
    15c0:	b1 05       	cpc	r27, r1
    15c2:	19 f7       	brne	.-58     	; 0x158a <CLCD_VoidShowNum+0x32>
    15c4:	23 c0       	rjmp	.+70     	; 0x160c <CLCD_VoidShowNum+0xb4>
	{
		Local_u8DigitCount++;
	}
	while(Local_u8DigitCount!=0)
	{
		Local_u8DigitCount--;
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
    15c8:	81 50       	subi	r24, 0x01	; 1
    15ca:	8d 83       	std	Y+5, r24	; 0x05
		CLCD_VoidSendData(((Copy_u32Num/(u32POWER(10,Local_u8DigitCount)))%10)+'0');
    15cc:	6a e0       	ldi	r22, 0x0A	; 10
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	4d 81       	ldd	r20, Y+5	; 0x05
    15d6:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <u32POWER>
    15da:	9b 01       	movw	r18, r22
    15dc:	ac 01       	movw	r20, r24
    15de:	8e 81       	ldd	r24, Y+6	; 0x06
    15e0:	9f 81       	ldd	r25, Y+7	; 0x07
    15e2:	a8 85       	ldd	r26, Y+8	; 0x08
    15e4:	b9 85       	ldd	r27, Y+9	; 0x09
    15e6:	bc 01       	movw	r22, r24
    15e8:	cd 01       	movw	r24, r26
    15ea:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__udivmodsi4>
    15ee:	da 01       	movw	r26, r20
    15f0:	c9 01       	movw	r24, r18
    15f2:	2a e0       	ldi	r18, 0x0A	; 10
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	bc 01       	movw	r22, r24
    15fc:	cd 01       	movw	r24, r26
    15fe:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__udivmodsi4>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	80 5d       	subi	r24, 0xD0	; 208
    1608:	0e 94 b3 07 	call	0xf66	; 0xf66 <CLCD_VoidSendData>
	u32 Local_u32Temp=Copy_u32Num;
	while((Local_u32Temp/=10)!=0)
	{
		Local_u8DigitCount++;
	}
	while(Local_u8DigitCount!=0)
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	88 23       	and	r24, r24
    1610:	d1 f6       	brne	.-76     	; 0x15c6 <CLCD_VoidShowNum+0x6e>
	{
		Local_u8DigitCount--;
		CLCD_VoidSendData(((Copy_u32Num/(u32POWER(10,Local_u8DigitCount)))%10)+'0');
	}
}
    1612:	29 96       	adiw	r28, 0x09	; 9
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <CLCD_VoidReset_Display>:
void CLCD_VoidReset_Display(void)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
	/*send command to reset the display*/
#if CLCD_WORKING_MODE==PRE_EIGHT_BIT_MODE
	CLCD_VoidSendCommand(0b00000001);
#elif CLCD_WORKING_MODE==PRE_FOUR_BIT_MODE
	CLCD_VoidSendCommand(0b0000);
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_VoidSendCommand>
	CLCD_VoidSendCommand(0b0001);
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_VoidSendCommand>
#endif
	/*reset the global counter*/
	Global_u8SendDataCounter=0;
    1638:	10 92 6d 00 	sts	0x006D, r1
}
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <DIO_u8SetPinValue>:
/******************************************************************************/
/***********************Setting pin value**************************************/
/******************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	28 97       	sbiw	r28, 0x08	; 8
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	8a 83       	std	Y+2, r24	; 0x02
    1658:	6b 83       	std	Y+3, r22	; 0x03
    165a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially zero
    165c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN_7)
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	88 30       	cpi	r24, 0x08	; 8
    1662:	08 f0       	brcs	.+2      	; 0x1666 <DIO_u8SetPinValue+0x24>
    1664:	ed c0       	rjmp	.+474    	; 0x1840 <DIO_u8SetPinValue+0x1fe>
	{
		if (Copy_u8Value)//if value is 1 SET the required PIN
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	88 23       	and	r24, r24
    166a:	09 f4       	brne	.+2      	; 0x166e <DIO_u8SetPinValue+0x2c>
    166c:	72 c0       	rjmp	.+228    	; 0x1752 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	38 87       	std	Y+8, r19	; 0x08
    1676:	2f 83       	std	Y+7, r18	; 0x07
    1678:	8f 81       	ldd	r24, Y+7	; 0x07
    167a:	98 85       	ldd	r25, Y+8	; 0x08
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	91 05       	cpc	r25, r1
    1680:	49 f1       	breq	.+82     	; 0x16d4 <DIO_u8SetPinValue+0x92>
    1682:	2f 81       	ldd	r18, Y+7	; 0x07
    1684:	38 85       	ldd	r19, Y+8	; 0x08
    1686:	22 30       	cpi	r18, 0x02	; 2
    1688:	31 05       	cpc	r19, r1
    168a:	2c f4       	brge	.+10     	; 0x1696 <DIO_u8SetPinValue+0x54>
    168c:	8f 81       	ldd	r24, Y+7	; 0x07
    168e:	98 85       	ldd	r25, Y+8	; 0x08
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	61 f0       	breq	.+24     	; 0x16ac <DIO_u8SetPinValue+0x6a>
    1694:	5b c0       	rjmp	.+182    	; 0x174c <DIO_u8SetPinValue+0x10a>
    1696:	2f 81       	ldd	r18, Y+7	; 0x07
    1698:	38 85       	ldd	r19, Y+8	; 0x08
    169a:	22 30       	cpi	r18, 0x02	; 2
    169c:	31 05       	cpc	r19, r1
    169e:	71 f1       	breq	.+92     	; 0x16fc <DIO_u8SetPinValue+0xba>
    16a0:	8f 81       	ldd	r24, Y+7	; 0x07
    16a2:	98 85       	ldd	r25, Y+8	; 0x08
    16a4:	83 30       	cpi	r24, 0x03	; 3
    16a6:	91 05       	cpc	r25, r1
    16a8:	e9 f1       	breq	.+122    	; 0x1724 <DIO_u8SetPinValue+0xe2>
    16aa:	50 c0       	rjmp	.+160    	; 0x174c <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA:
				SET_BIT(PORTA_reg,Copy_u8Pin);
    16ac:	ab e3       	ldi	r26, 0x3B	; 59
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	eb e3       	ldi	r30, 0x3B	; 59
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	48 2f       	mov	r20, r24
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 2e       	mov	r0, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <DIO_u8SetPinValue+0x88>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <DIO_u8SetPinValue+0x84>
    16ce:	84 2b       	or	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	b8 c0       	rjmp	.+368    	; 0x1844 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTB:
				SET_BIT(PORTB_reg,Copy_u8Pin);
    16d4:	a8 e3       	ldi	r26, 0x38	; 56
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e8 e3       	ldi	r30, 0x38	; 56
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <DIO_u8SetPinValue+0xb0>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <DIO_u8SetPinValue+0xac>
    16f6:	84 2b       	or	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	a4 c0       	rjmp	.+328    	; 0x1844 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTC:
				SET_BIT(PORTC_reg,Copy_u8Pin);
    16fc:	a5 e3       	ldi	r26, 0x35	; 53
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e5 e3       	ldi	r30, 0x35	; 53
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <DIO_u8SetPinValue+0xd8>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <DIO_u8SetPinValue+0xd4>
    171e:	84 2b       	or	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	90 c0       	rjmp	.+288    	; 0x1844 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTD:
				SET_BIT(PORTD_reg,Copy_u8Pin);
    1724:	a2 e3       	ldi	r26, 0x32	; 50
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e2 e3       	ldi	r30, 0x32	; 50
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <DIO_u8SetPinValue+0x100>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <DIO_u8SetPinValue+0xfc>
    1746:	84 2b       	or	r24, r20
    1748:	8c 93       	st	X, r24
    174a:	7c c0       	rjmp	.+248    	; 0x1844 <DIO_u8SetPinValue+0x202>
				break;
			
				default:
				Local_u8ErrorState=1;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	79 c0       	rjmp	.+242    	; 0x1844 <DIO_u8SetPinValue+0x202>
				break;
			}
		}
		else//value is 0 so we clear the bits
		{
			switch(Copy_u8Port)
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	3e 83       	std	Y+6, r19	; 0x06
    175a:	2d 83       	std	Y+5, r18	; 0x05
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	9e 81       	ldd	r25, Y+6	; 0x06
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	91 05       	cpc	r25, r1
    1764:	59 f1       	breq	.+86     	; 0x17bc <DIO_u8SetPinValue+0x17a>
    1766:	2d 81       	ldd	r18, Y+5	; 0x05
    1768:	3e 81       	ldd	r19, Y+6	; 0x06
    176a:	22 30       	cpi	r18, 0x02	; 2
    176c:	31 05       	cpc	r19, r1
    176e:	2c f4       	brge	.+10     	; 0x177a <DIO_u8SetPinValue+0x138>
    1770:	8d 81       	ldd	r24, Y+5	; 0x05
    1772:	9e 81       	ldd	r25, Y+6	; 0x06
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	69 f0       	breq	.+26     	; 0x1792 <DIO_u8SetPinValue+0x150>
    1778:	60 c0       	rjmp	.+192    	; 0x183a <DIO_u8SetPinValue+0x1f8>
    177a:	2d 81       	ldd	r18, Y+5	; 0x05
    177c:	3e 81       	ldd	r19, Y+6	; 0x06
    177e:	22 30       	cpi	r18, 0x02	; 2
    1780:	31 05       	cpc	r19, r1
    1782:	89 f1       	breq	.+98     	; 0x17e6 <DIO_u8SetPinValue+0x1a4>
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	83 30       	cpi	r24, 0x03	; 3
    178a:	91 05       	cpc	r25, r1
    178c:	09 f4       	brne	.+2      	; 0x1790 <DIO_u8SetPinValue+0x14e>
    178e:	40 c0       	rjmp	.+128    	; 0x1810 <DIO_u8SetPinValue+0x1ce>
    1790:	54 c0       	rjmp	.+168    	; 0x183a <DIO_u8SetPinValue+0x1f8>
			{
				case DIO_u8PORTA:
				CLR_BIT(PORTA_reg,Copy_u8Pin);
    1792:	ab e3       	ldi	r26, 0x3B	; 59
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	eb e3       	ldi	r30, 0x3B	; 59
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	48 2f       	mov	r20, r24
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	02 2e       	mov	r0, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <DIO_u8SetPinValue+0x16e>
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	0a 94       	dec	r0
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <DIO_u8SetPinValue+0x16a>
    17b4:	80 95       	com	r24
    17b6:	84 23       	and	r24, r20
    17b8:	8c 93       	st	X, r24
    17ba:	44 c0       	rjmp	.+136    	; 0x1844 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTB:
				CLR_BIT(PORTB_reg,Copy_u8Pin);
    17bc:	a8 e3       	ldi	r26, 0x38	; 56
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e8 e3       	ldi	r30, 0x38	; 56
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	48 2f       	mov	r20, r24
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	02 2e       	mov	r0, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <DIO_u8SetPinValue+0x198>
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	0a 94       	dec	r0
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <DIO_u8SetPinValue+0x194>
    17de:	80 95       	com	r24
    17e0:	84 23       	and	r24, r20
    17e2:	8c 93       	st	X, r24
    17e4:	2f c0       	rjmp	.+94     	; 0x1844 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTC:
				CLR_BIT(PORTC_reg,Copy_u8Pin);
    17e6:	a5 e3       	ldi	r26, 0x35	; 53
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e5 e3       	ldi	r30, 0x35	; 53
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_u8SetPinValue+0x1c2>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <DIO_u8SetPinValue+0x1be>
    1808:	80 95       	com	r24
    180a:	84 23       	and	r24, r20
    180c:	8c 93       	st	X, r24
    180e:	1a c0       	rjmp	.+52     	; 0x1844 <DIO_u8SetPinValue+0x202>
				break;
				
				case DIO_u8PORTD:
				CLR_BIT(PORTD_reg,Copy_u8Pin);
    1810:	a2 e3       	ldi	r26, 0x32	; 50
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e2 e3       	ldi	r30, 0x32	; 50
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <DIO_u8SetPinValue+0x1ec>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <DIO_u8SetPinValue+0x1e8>
    1832:	80 95       	com	r24
    1834:	84 23       	and	r24, r20
    1836:	8c 93       	st	X, r24
    1838:	05 c0       	rjmp	.+10     	; 0x1844 <DIO_u8SetPinValue+0x202>
				break;
				
				default:
				Local_u8ErrorState=1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <DIO_u8SetPinValue+0x202>
			}
		}
	}
	else //incorrect input
	{
		Local_u8ErrorState=1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	89 83       	std	Y+1, r24	; 0x01
	}	
	return Local_u8ErrorState;
    1844:	89 81       	ldd	r24, Y+1	; 0x01
}
    1846:	28 96       	adiw	r28, 0x08	; 8
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <DIO_u8SetPortValue>:
/******************************************************************************/
/***********************Setting port value*************************************/
/******************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port ,u8 Copy_u8Value)
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	00 d0       	rcall	.+0      	; 0x185e <DIO_u8SetPortValue+0x6>
    185e:	00 d0       	rcall	.+0      	; 0x1860 <DIO_u8SetPortValue+0x8>
    1860:	0f 92       	push	r0
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	8a 83       	std	Y+2, r24	; 0x02
    1868:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;//error state initially zero
    186a:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port)
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	3d 83       	std	Y+5, r19	; 0x05
    1874:	2c 83       	std	Y+4, r18	; 0x04
    1876:	8c 81       	ldd	r24, Y+4	; 0x04
    1878:	9d 81       	ldd	r25, Y+5	; 0x05
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	91 05       	cpc	r25, r1
    187e:	d1 f0       	breq	.+52     	; 0x18b4 <DIO_u8SetPortValue+0x5c>
    1880:	2c 81       	ldd	r18, Y+4	; 0x04
    1882:	3d 81       	ldd	r19, Y+5	; 0x05
    1884:	22 30       	cpi	r18, 0x02	; 2
    1886:	31 05       	cpc	r19, r1
    1888:	2c f4       	brge	.+10     	; 0x1894 <DIO_u8SetPortValue+0x3c>
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	9d 81       	ldd	r25, Y+5	; 0x05
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	61 f0       	breq	.+24     	; 0x18aa <DIO_u8SetPortValue+0x52>
    1892:	1f c0       	rjmp	.+62     	; 0x18d2 <DIO_u8SetPortValue+0x7a>
    1894:	2c 81       	ldd	r18, Y+4	; 0x04
    1896:	3d 81       	ldd	r19, Y+5	; 0x05
    1898:	22 30       	cpi	r18, 0x02	; 2
    189a:	31 05       	cpc	r19, r1
    189c:	81 f0       	breq	.+32     	; 0x18be <DIO_u8SetPortValue+0x66>
    189e:	8c 81       	ldd	r24, Y+4	; 0x04
    18a0:	9d 81       	ldd	r25, Y+5	; 0x05
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	91 05       	cpc	r25, r1
    18a6:	81 f0       	breq	.+32     	; 0x18c8 <DIO_u8SetPortValue+0x70>
    18a8:	14 c0       	rjmp	.+40     	; 0x18d2 <DIO_u8SetPortValue+0x7a>
		{
			case DIO_u8PORTA:
			PORTA_reg=Copy_u8Value;
    18aa:	eb e3       	ldi	r30, 0x3B	; 59
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	80 83       	st	Z, r24
    18b2:	11 c0       	rjmp	.+34     	; 0x18d6 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTB:
			PORTB_reg=Copy_u8Value;
    18b4:	e8 e3       	ldi	r30, 0x38	; 56
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	80 83       	st	Z, r24
    18bc:	0c c0       	rjmp	.+24     	; 0x18d6 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTC:
			PORTC_reg=Copy_u8Value;
    18be:	e5 e3       	ldi	r30, 0x35	; 53
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	80 83       	st	Z, r24
    18c6:	07 c0       	rjmp	.+14     	; 0x18d6 <DIO_u8SetPortValue+0x7e>
			break;
			
			case DIO_u8PORTD:
			PORTD_reg=Copy_u8Value;
    18c8:	e2 e3       	ldi	r30, 0x32	; 50
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	80 83       	st	Z, r24
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <DIO_u8SetPortValue+0x7e>
			break;
			
			default:
			Local_u8ErrorState=1;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_u8ErrorState;//incorrect input
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <DIO_u8GetPinValue>:
/******************************************************************************/
/***********************Getting PIN value**************************************/
/******************************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	27 97       	sbiw	r28, 0x07	; 7
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	8a 83       	std	Y+2, r24	; 0x02
    18fe:	6b 83       	std	Y+3, r22	; 0x03
    1900:	5d 83       	std	Y+5, r21	; 0x05
    1902:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;//error state initially zero
    1904:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL)&&Copy_u8Pin<=DIO_u8PIN_7)//check if ptr not null and correct input pin
    1906:	8c 81       	ldd	r24, Y+4	; 0x04
    1908:	9d 81       	ldd	r25, Y+5	; 0x05
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	09 f4       	brne	.+2      	; 0x1910 <DIO_u8GetPinValue+0x28>
    190e:	78 c0       	rjmp	.+240    	; 0x1a00 <DIO_u8GetPinValue+0x118>
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	88 30       	cpi	r24, 0x08	; 8
    1914:	08 f0       	brcs	.+2      	; 0x1918 <DIO_u8GetPinValue+0x30>
    1916:	74 c0       	rjmp	.+232    	; 0x1a00 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	3f 83       	std	Y+7, r19	; 0x07
    1920:	2e 83       	std	Y+6, r18	; 0x06
    1922:	4e 81       	ldd	r20, Y+6	; 0x06
    1924:	5f 81       	ldd	r21, Y+7	; 0x07
    1926:	41 30       	cpi	r20, 0x01	; 1
    1928:	51 05       	cpc	r21, r1
    192a:	59 f1       	breq	.+86     	; 0x1982 <DIO_u8GetPinValue+0x9a>
    192c:	8e 81       	ldd	r24, Y+6	; 0x06
    192e:	9f 81       	ldd	r25, Y+7	; 0x07
    1930:	82 30       	cpi	r24, 0x02	; 2
    1932:	91 05       	cpc	r25, r1
    1934:	34 f4       	brge	.+12     	; 0x1942 <DIO_u8GetPinValue+0x5a>
    1936:	2e 81       	ldd	r18, Y+6	; 0x06
    1938:	3f 81       	ldd	r19, Y+7	; 0x07
    193a:	21 15       	cp	r18, r1
    193c:	31 05       	cpc	r19, r1
    193e:	69 f0       	breq	.+26     	; 0x195a <DIO_u8GetPinValue+0x72>
    1940:	5c c0       	rjmp	.+184    	; 0x19fa <DIO_u8GetPinValue+0x112>
    1942:	4e 81       	ldd	r20, Y+6	; 0x06
    1944:	5f 81       	ldd	r21, Y+7	; 0x07
    1946:	42 30       	cpi	r20, 0x02	; 2
    1948:	51 05       	cpc	r21, r1
    194a:	79 f1       	breq	.+94     	; 0x19aa <DIO_u8GetPinValue+0xc2>
    194c:	8e 81       	ldd	r24, Y+6	; 0x06
    194e:	9f 81       	ldd	r25, Y+7	; 0x07
    1950:	83 30       	cpi	r24, 0x03	; 3
    1952:	91 05       	cpc	r25, r1
    1954:	09 f4       	brne	.+2      	; 0x1958 <DIO_u8GetPinValue+0x70>
    1956:	3d c0       	rjmp	.+122    	; 0x19d2 <DIO_u8GetPinValue+0xea>
    1958:	50 c0       	rjmp	.+160    	; 0x19fa <DIO_u8GetPinValue+0x112>
		{
			case DIO_u8PORTA:
			*Copy_pu8Value=GET_BIT(PINA_reg,Copy_u8Pin);
    195a:	e9 e3       	ldi	r30, 0x39	; 57
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	a9 01       	movw	r20, r18
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <DIO_u8GetPinValue+0x8a>
    196e:	55 95       	asr	r21
    1970:	47 95       	ror	r20
    1972:	8a 95       	dec	r24
    1974:	e2 f7       	brpl	.-8      	; 0x196e <DIO_u8GetPinValue+0x86>
    1976:	ca 01       	movw	r24, r20
    1978:	81 70       	andi	r24, 0x01	; 1
    197a:	ec 81       	ldd	r30, Y+4	; 0x04
    197c:	fd 81       	ldd	r31, Y+5	; 0x05
    197e:	80 83       	st	Z, r24
    1980:	41 c0       	rjmp	.+130    	; 0x1a04 <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTB:
			*Copy_pu8Value=GET_BIT(PINB_reg,Copy_u8Pin);
    1982:	e6 e3       	ldi	r30, 0x36	; 54
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	a9 01       	movw	r20, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <DIO_u8GetPinValue+0xb2>
    1996:	55 95       	asr	r21
    1998:	47 95       	ror	r20
    199a:	8a 95       	dec	r24
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <DIO_u8GetPinValue+0xae>
    199e:	ca 01       	movw	r24, r20
    19a0:	81 70       	andi	r24, 0x01	; 1
    19a2:	ec 81       	ldd	r30, Y+4	; 0x04
    19a4:	fd 81       	ldd	r31, Y+5	; 0x05
    19a6:	80 83       	st	Z, r24
    19a8:	2d c0       	rjmp	.+90     	; 0x1a04 <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTC:
			*Copy_pu8Value=GET_BIT(PINC_reg,Copy_u8Pin);
    19aa:	e3 e3       	ldi	r30, 0x33	; 51
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	88 2f       	mov	r24, r24
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a9 01       	movw	r20, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <DIO_u8GetPinValue+0xda>
    19be:	55 95       	asr	r21
    19c0:	47 95       	ror	r20
    19c2:	8a 95       	dec	r24
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <DIO_u8GetPinValue+0xd6>
    19c6:	ca 01       	movw	r24, r20
    19c8:	81 70       	andi	r24, 0x01	; 1
    19ca:	ec 81       	ldd	r30, Y+4	; 0x04
    19cc:	fd 81       	ldd	r31, Y+5	; 0x05
    19ce:	80 83       	st	Z, r24
    19d0:	19 c0       	rjmp	.+50     	; 0x1a04 <DIO_u8GetPinValue+0x11c>
			break;
			
			case DIO_u8PORTD:
			*Copy_pu8Value=GET_BIT(PIND_reg,Copy_u8Pin);
    19d2:	e0 e3       	ldi	r30, 0x30	; 48
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	88 2f       	mov	r24, r24
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	a9 01       	movw	r20, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <DIO_u8GetPinValue+0x102>
    19e6:	55 95       	asr	r21
    19e8:	47 95       	ror	r20
    19ea:	8a 95       	dec	r24
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <DIO_u8GetPinValue+0xfe>
    19ee:	ca 01       	movw	r24, r20
    19f0:	81 70       	andi	r24, 0x01	; 1
    19f2:	ec 81       	ldd	r30, Y+4	; 0x04
    19f4:	fd 81       	ldd	r31, Y+5	; 0x05
    19f6:	80 83       	st	Z, r24
    19f8:	05 c0       	rjmp	.+10     	; 0x1a04 <DIO_u8GetPinValue+0x11c>
			break;
			
			default:
			Local_u8ErrorState=1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <DIO_u8GetPinValue+0x11c>
			break;
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a06:	27 96       	adiw	r28, 0x07	; 7
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <DIO_u8GetPortValue>:
/*not tested*/
u8 DIO_u8GetPortValue(u8 Copy_u8Port ,u8* Copy_pu8Value)//get value of entire port
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <DIO_u8GetPortValue+0x6>
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <DIO_u8GetPortValue+0x8>
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <DIO_u8GetPortValue+0xa>
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	8a 83       	std	Y+2, r24	; 0x02
    1a28:	7c 83       	std	Y+4, r23	; 0x04
    1a2a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1a2c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	3e 83       	std	Y+6, r19	; 0x06
    1a36:	2d 83       	std	Y+5, r18	; 0x05
    1a38:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	91 05       	cpc	r25, r1
    1a40:	e1 f0       	breq	.+56     	; 0x1a7a <DIO_u8GetPortValue+0x62>
    1a42:	2d 81       	ldd	r18, Y+5	; 0x05
    1a44:	3e 81       	ldd	r19, Y+6	; 0x06
    1a46:	22 30       	cpi	r18, 0x02	; 2
    1a48:	31 05       	cpc	r19, r1
    1a4a:	2c f4       	brge	.+10     	; 0x1a56 <DIO_u8GetPortValue+0x3e>
    1a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	61 f0       	breq	.+24     	; 0x1a6c <DIO_u8GetPortValue+0x54>
    1a54:	27 c0       	rjmp	.+78     	; 0x1aa4 <DIO_u8GetPortValue+0x8c>
    1a56:	2d 81       	ldd	r18, Y+5	; 0x05
    1a58:	3e 81       	ldd	r19, Y+6	; 0x06
    1a5a:	22 30       	cpi	r18, 0x02	; 2
    1a5c:	31 05       	cpc	r19, r1
    1a5e:	a1 f0       	breq	.+40     	; 0x1a88 <DIO_u8GetPortValue+0x70>
    1a60:	8d 81       	ldd	r24, Y+5	; 0x05
    1a62:	9e 81       	ldd	r25, Y+6	; 0x06
    1a64:	83 30       	cpi	r24, 0x03	; 3
    1a66:	91 05       	cpc	r25, r1
    1a68:	b1 f0       	breq	.+44     	; 0x1a96 <DIO_u8GetPortValue+0x7e>
    1a6a:	1c c0       	rjmp	.+56     	; 0x1aa4 <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA:
		*Copy_pu8Value=PINA_reg;
    1a6c:	e9 e3       	ldi	r30, 0x39	; 57
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	eb 81       	ldd	r30, Y+3	; 0x03
    1a74:	fc 81       	ldd	r31, Y+4	; 0x04
    1a76:	80 83       	st	Z, r24
    1a78:	17 c0       	rjmp	.+46     	; 0x1aa8 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTB:
		*Copy_pu8Value=PINB_reg;
    1a7a:	e6 e3       	ldi	r30, 0x36	; 54
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	eb 81       	ldd	r30, Y+3	; 0x03
    1a82:	fc 81       	ldd	r31, Y+4	; 0x04
    1a84:	80 83       	st	Z, r24
    1a86:	10 c0       	rjmp	.+32     	; 0x1aa8 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTC:
		*Copy_pu8Value=PINC_reg;
    1a88:	e3 e3       	ldi	r30, 0x33	; 51
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a90:	fc 81       	ldd	r31, Y+4	; 0x04
    1a92:	80 83       	st	Z, r24
    1a94:	09 c0       	rjmp	.+18     	; 0x1aa8 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_u8PORTD:
		*Copy_pu8Value=PIND_reg;
    1a96:	e0 e3       	ldi	r30, 0x30	; 48
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1aa0:	80 83       	st	Z, r24
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <DIO_u8GetPortValue+0x90>
		break;
	default:
		Local_u8ErrorState=1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aaa:	26 96       	adiw	r28, 0x06	; 6
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <PORT_VoidInit>:
#include"PORT_interface.h"
#include"PORT_config.h"
#include"PORT_private.h"
#include"PORT_register.h"
void PORT_VoidInit()
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
	DDRA_reg=PORTA_DIR;
    1ac4:	ea e3       	ldi	r30, 0x3A	; 58
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 ef       	ldi	r24, 0xF0	; 240
    1aca:	80 83       	st	Z, r24
	DDRB_reg=PORTB_DIR;
    1acc:	e7 e3       	ldi	r30, 0x37	; 55
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	80 83       	st	Z, r24
	DDRC_reg=PORTC_DIR;
    1ad4:	e4 e3       	ldi	r30, 0x34	; 52
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	87 e0       	ldi	r24, 0x07	; 7
    1ada:	80 83       	st	Z, r24
	DDRD_reg=PORTD_DIR;
    1adc:	e1 e3       	ldi	r30, 0x31	; 49
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	83 ef       	ldi	r24, 0xF3	; 243
    1ae2:	80 83       	st	Z, r24
	
	PORTA_reg=PORTA_InitValue;
    1ae4:	eb e3       	ldi	r30, 0x3B	; 59
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	8f ef       	ldi	r24, 0xFF	; 255
    1aea:	80 83       	st	Z, r24
    PORTB_reg=PORTB_InitValue;
    1aec:	e8 e3       	ldi	r30, 0x38	; 56
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	10 82       	st	Z, r1
    PORTC_reg=PORTC_InitValue;
    1af2:	e5 e3       	ldi	r30, 0x35	; 53
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	10 82       	st	Z, r1
    PORTD_reg=PORTD_InitValue;
    1af8:	e2 e3       	ldi	r30, 0x32	; 50
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	8c e0       	ldi	r24, 0x0C	; 12
    1afe:	80 83       	st	Z, r24
}
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <S32Map>:
#include"PORT_interface.h"
#include "CLCD_interface.h"
#include <util/delay.h>

s32 S32Map (s32 S32_X1,s32 S32_X2,s32 S32_Y2,s32 S32_Y1,s32 S32_X)
{
    1b06:	af 92       	push	r10
    1b08:	bf 92       	push	r11
    1b0a:	cf 92       	push	r12
    1b0c:	df 92       	push	r13
    1b0e:	ef 92       	push	r14
    1b10:	ff 92       	push	r15
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	60 97       	sbiw	r28, 0x10	; 16
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	69 83       	std	Y+1, r22	; 0x01
    1b2c:	7a 83       	std	Y+2, r23	; 0x02
    1b2e:	8b 83       	std	Y+3, r24	; 0x03
    1b30:	9c 83       	std	Y+4, r25	; 0x04
    1b32:	2d 83       	std	Y+5, r18	; 0x05
    1b34:	3e 83       	std	Y+6, r19	; 0x06
    1b36:	4f 83       	std	Y+7, r20	; 0x07
    1b38:	58 87       	std	Y+8, r21	; 0x08
    1b3a:	e9 86       	std	Y+9, r14	; 0x09
    1b3c:	fa 86       	std	Y+10, r15	; 0x0a
    1b3e:	0b 87       	std	Y+11, r16	; 0x0b
    1b40:	1c 87       	std	Y+12, r17	; 0x0c
    1b42:	ad 86       	std	Y+13, r10	; 0x0d
    1b44:	be 86       	std	Y+14, r11	; 0x0e
    1b46:	cf 86       	std	Y+15, r12	; 0x0f
    1b48:	d8 8a       	std	Y+16, r13	; 0x10
	return (S32_Y1+((S32_X-S32_X1)*(S32_Y2-S32_Y1)/(S32_X2-S32_X1)));
    1b4a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1b4c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1b4e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1b50:	58 a1       	ldd	r21, Y+32	; 0x20
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
    1b56:	ab 81       	ldd	r26, Y+3	; 0x03
    1b58:	bc 81       	ldd	r27, Y+4	; 0x04
    1b5a:	79 01       	movw	r14, r18
    1b5c:	8a 01       	movw	r16, r20
    1b5e:	e8 1a       	sub	r14, r24
    1b60:	f9 0a       	sbc	r15, r25
    1b62:	0a 0b       	sbc	r16, r26
    1b64:	1b 0b       	sbc	r17, r27
    1b66:	29 85       	ldd	r18, Y+9	; 0x09
    1b68:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b6a:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b6c:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b72:	af 85       	ldd	r26, Y+15	; 0x0f
    1b74:	b8 89       	ldd	r27, Y+16	; 0x10
    1b76:	28 1b       	sub	r18, r24
    1b78:	39 0b       	sbc	r19, r25
    1b7a:	4a 0b       	sbc	r20, r26
    1b7c:	5b 0b       	sbc	r21, r27
    1b7e:	c8 01       	movw	r24, r16
    1b80:	b7 01       	movw	r22, r14
    1b82:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__mulsi3>
    1b86:	7b 01       	movw	r14, r22
    1b88:	8c 01       	movw	r16, r24
    1b8a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b8c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b8e:	4f 81       	ldd	r20, Y+7	; 0x07
    1b90:	58 85       	ldd	r21, Y+8	; 0x08
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	ab 81       	ldd	r26, Y+3	; 0x03
    1b98:	bc 81       	ldd	r27, Y+4	; 0x04
    1b9a:	28 1b       	sub	r18, r24
    1b9c:	39 0b       	sbc	r19, r25
    1b9e:	4a 0b       	sbc	r20, r26
    1ba0:	5b 0b       	sbc	r21, r27
    1ba2:	c8 01       	movw	r24, r16
    1ba4:	b7 01       	movw	r22, r14
    1ba6:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__divmodsi4>
    1baa:	da 01       	movw	r26, r20
    1bac:	c9 01       	movw	r24, r18
    1bae:	9c 01       	movw	r18, r24
    1bb0:	ad 01       	movw	r20, r26
    1bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb6:	af 85       	ldd	r26, Y+15	; 0x0f
    1bb8:	b8 89       	ldd	r27, Y+16	; 0x10
    1bba:	82 0f       	add	r24, r18
    1bbc:	93 1f       	adc	r25, r19
    1bbe:	a4 1f       	adc	r26, r20
    1bc0:	b5 1f       	adc	r27, r21
}
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	60 96       	adiw	r28, 0x10	; 16
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	ff 90       	pop	r15
    1bdc:	ef 90       	pop	r14
    1bde:	df 90       	pop	r13
    1be0:	cf 90       	pop	r12
    1be2:	bf 90       	pop	r11
    1be4:	af 90       	pop	r10
    1be6:	08 95       	ret

00001be8 <main>:
void main ()
{
    1be8:	af 92       	push	r10
    1bea:	bf 92       	push	r11
    1bec:	cf 92       	push	r12
    1bee:	df 92       	push	r13
    1bf0:	ef 92       	push	r14
    1bf2:	ff 92       	push	r15
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <main+0x16>
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
	PORT_VoidInit();
    1c02:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <PORT_VoidInit>
	ADC_VoidInit();
    1c06:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_VoidInit>
	CLCD_VoidInit();
    1c0a:	0e 94 27 09 	call	0x124e	; 0x124e <CLCD_VoidInit>
CLCD_VoidShowNum(S32Map(0,255,8,1,100));
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <main+0x28>
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <main+0x2a>
    1c12:	ed b7       	in	r30, 0x3d	; 61
    1c14:	fe b7       	in	r31, 0x3e	; 62
    1c16:	31 96       	adiw	r30, 0x01	; 1
    1c18:	84 e6       	ldi	r24, 0x64	; 100
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	a0 e0       	ldi	r26, 0x00	; 0
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	80 83       	st	Z, r24
    1c22:	91 83       	std	Z+1, r25	; 0x01
    1c24:	a2 83       	std	Z+2, r26	; 0x02
    1c26:	b3 83       	std	Z+3, r27	; 0x03
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	2f ef       	ldi	r18, 0xFF	; 255
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	50 e0       	ldi	r21, 0x00	; 0
    1c38:	ee 24       	eor	r14, r14
    1c3a:	ff 24       	eor	r15, r15
    1c3c:	87 01       	movw	r16, r14
    1c3e:	68 94       	set
    1c40:	e3 f8       	bld	r14, 3
    1c42:	aa 24       	eor	r10, r10
    1c44:	bb 24       	eor	r11, r11
    1c46:	65 01       	movw	r12, r10
    1c48:	a3 94       	inc	r10
    1c4a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <S32Map>
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <CLCD_VoidShowNum>
		CLCD_VoidReset_Display();
		DIO_u8SetPortValue(DIO_u8PORTB,0);
		_delay_ms(500);
	}*/

}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	ff 90       	pop	r15
    1c70:	ef 90       	pop	r14
    1c72:	df 90       	pop	r13
    1c74:	cf 90       	pop	r12
    1c76:	bf 90       	pop	r11
    1c78:	af 90       	pop	r10
    1c7a:	08 95       	ret

00001c7c <__mulsi3>:
    1c7c:	62 9f       	mul	r22, r18
    1c7e:	d0 01       	movw	r26, r0
    1c80:	73 9f       	mul	r23, r19
    1c82:	f0 01       	movw	r30, r0
    1c84:	82 9f       	mul	r24, r18
    1c86:	e0 0d       	add	r30, r0
    1c88:	f1 1d       	adc	r31, r1
    1c8a:	64 9f       	mul	r22, r20
    1c8c:	e0 0d       	add	r30, r0
    1c8e:	f1 1d       	adc	r31, r1
    1c90:	92 9f       	mul	r25, r18
    1c92:	f0 0d       	add	r31, r0
    1c94:	83 9f       	mul	r24, r19
    1c96:	f0 0d       	add	r31, r0
    1c98:	74 9f       	mul	r23, r20
    1c9a:	f0 0d       	add	r31, r0
    1c9c:	65 9f       	mul	r22, r21
    1c9e:	f0 0d       	add	r31, r0
    1ca0:	99 27       	eor	r25, r25
    1ca2:	72 9f       	mul	r23, r18
    1ca4:	b0 0d       	add	r27, r0
    1ca6:	e1 1d       	adc	r30, r1
    1ca8:	f9 1f       	adc	r31, r25
    1caa:	63 9f       	mul	r22, r19
    1cac:	b0 0d       	add	r27, r0
    1cae:	e1 1d       	adc	r30, r1
    1cb0:	f9 1f       	adc	r31, r25
    1cb2:	bd 01       	movw	r22, r26
    1cb4:	cf 01       	movw	r24, r30
    1cb6:	11 24       	eor	r1, r1
    1cb8:	08 95       	ret

00001cba <__udivmodsi4>:
    1cba:	a1 e2       	ldi	r26, 0x21	; 33
    1cbc:	1a 2e       	mov	r1, r26
    1cbe:	aa 1b       	sub	r26, r26
    1cc0:	bb 1b       	sub	r27, r27
    1cc2:	fd 01       	movw	r30, r26
    1cc4:	0d c0       	rjmp	.+26     	; 0x1ce0 <__udivmodsi4_ep>

00001cc6 <__udivmodsi4_loop>:
    1cc6:	aa 1f       	adc	r26, r26
    1cc8:	bb 1f       	adc	r27, r27
    1cca:	ee 1f       	adc	r30, r30
    1ccc:	ff 1f       	adc	r31, r31
    1cce:	a2 17       	cp	r26, r18
    1cd0:	b3 07       	cpc	r27, r19
    1cd2:	e4 07       	cpc	r30, r20
    1cd4:	f5 07       	cpc	r31, r21
    1cd6:	20 f0       	brcs	.+8      	; 0x1ce0 <__udivmodsi4_ep>
    1cd8:	a2 1b       	sub	r26, r18
    1cda:	b3 0b       	sbc	r27, r19
    1cdc:	e4 0b       	sbc	r30, r20
    1cde:	f5 0b       	sbc	r31, r21

00001ce0 <__udivmodsi4_ep>:
    1ce0:	66 1f       	adc	r22, r22
    1ce2:	77 1f       	adc	r23, r23
    1ce4:	88 1f       	adc	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	1a 94       	dec	r1
    1cea:	69 f7       	brne	.-38     	; 0x1cc6 <__udivmodsi4_loop>
    1cec:	60 95       	com	r22
    1cee:	70 95       	com	r23
    1cf0:	80 95       	com	r24
    1cf2:	90 95       	com	r25
    1cf4:	9b 01       	movw	r18, r22
    1cf6:	ac 01       	movw	r20, r24
    1cf8:	bd 01       	movw	r22, r26
    1cfa:	cf 01       	movw	r24, r30
    1cfc:	08 95       	ret

00001cfe <__divmodsi4>:
    1cfe:	97 fb       	bst	r25, 7
    1d00:	09 2e       	mov	r0, r25
    1d02:	05 26       	eor	r0, r21
    1d04:	0e d0       	rcall	.+28     	; 0x1d22 <__divmodsi4_neg1>
    1d06:	57 fd       	sbrc	r21, 7
    1d08:	04 d0       	rcall	.+8      	; 0x1d12 <__divmodsi4_neg2>
    1d0a:	d7 df       	rcall	.-82     	; 0x1cba <__udivmodsi4>
    1d0c:	0a d0       	rcall	.+20     	; 0x1d22 <__divmodsi4_neg1>
    1d0e:	00 1c       	adc	r0, r0
    1d10:	38 f4       	brcc	.+14     	; 0x1d20 <__divmodsi4_exit>

00001d12 <__divmodsi4_neg2>:
    1d12:	50 95       	com	r21
    1d14:	40 95       	com	r20
    1d16:	30 95       	com	r19
    1d18:	21 95       	neg	r18
    1d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1c:	4f 4f       	sbci	r20, 0xFF	; 255
    1d1e:	5f 4f       	sbci	r21, 0xFF	; 255

00001d20 <__divmodsi4_exit>:
    1d20:	08 95       	ret

00001d22 <__divmodsi4_neg1>:
    1d22:	f6 f7       	brtc	.-4      	; 0x1d20 <__divmodsi4_exit>
    1d24:	90 95       	com	r25
    1d26:	80 95       	com	r24
    1d28:	70 95       	com	r23
    1d2a:	61 95       	neg	r22
    1d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d30:	9f 4f       	sbci	r25, 0xFF	; 255
    1d32:	08 95       	ret

00001d34 <__prologue_saves__>:
    1d34:	2f 92       	push	r2
    1d36:	3f 92       	push	r3
    1d38:	4f 92       	push	r4
    1d3a:	5f 92       	push	r5
    1d3c:	6f 92       	push	r6
    1d3e:	7f 92       	push	r7
    1d40:	8f 92       	push	r8
    1d42:	9f 92       	push	r9
    1d44:	af 92       	push	r10
    1d46:	bf 92       	push	r11
    1d48:	cf 92       	push	r12
    1d4a:	df 92       	push	r13
    1d4c:	ef 92       	push	r14
    1d4e:	ff 92       	push	r15
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	ca 1b       	sub	r28, r26
    1d5e:	db 0b       	sbc	r29, r27
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	09 94       	ijmp

00001d6c <__epilogue_restores__>:
    1d6c:	2a 88       	ldd	r2, Y+18	; 0x12
    1d6e:	39 88       	ldd	r3, Y+17	; 0x11
    1d70:	48 88       	ldd	r4, Y+16	; 0x10
    1d72:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d74:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d76:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d78:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d7a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d7c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d7e:	b9 84       	ldd	r11, Y+9	; 0x09
    1d80:	c8 84       	ldd	r12, Y+8	; 0x08
    1d82:	df 80       	ldd	r13, Y+7	; 0x07
    1d84:	ee 80       	ldd	r14, Y+6	; 0x06
    1d86:	fd 80       	ldd	r15, Y+5	; 0x05
    1d88:	0c 81       	ldd	r16, Y+4	; 0x04
    1d8a:	1b 81       	ldd	r17, Y+3	; 0x03
    1d8c:	aa 81       	ldd	r26, Y+2	; 0x02
    1d8e:	b9 81       	ldd	r27, Y+1	; 0x01
    1d90:	ce 0f       	add	r28, r30
    1d92:	d1 1d       	adc	r29, r1
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	ed 01       	movw	r28, r26
    1da0:	08 95       	ret

00001da2 <_exit>:
    1da2:	f8 94       	cli

00001da4 <__stop_program>:
    1da4:	ff cf       	rjmp	.-2      	; 0x1da4 <__stop_program>
